<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 28 Mar 2025 12:48:36 GMT</lastBuildDate>
    <item>
      <title>黑客法律：痛苦的教训</title>
      <link>https://www.reddit.com/r/programming/comments/1jlu8rl/hacker_laws_the_bitter_lesson/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/dwmkerr      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlu8rl/hacker_laws_the_bitter_lesson/</guid>
      <pubDate>Fri, 28 Mar 2025 12:47:01 GMT</pubDate>
    </item>
    <item>
      <title>我测试了前端开发的所有最佳语言模型。其中一种模型在其余部分中突出。</title>
      <link>https://www.reddit.com/r/programming/comments/1jlt4s2/i_tested_out_all_of_the_best_language_models_for/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlt4s2/i_tested_out_all_of_the_best_language_models_for/</guid>
      <pubDate>Fri, 28 Mar 2025 11:45:11 GMT</pubDate>
    </item>
    <item>
      <title>WebAssembly：已采用Spectec</title>
      <link>https://www.reddit.com/r/programming/comments/1jlsyzq/webassembly_spectec_has_been_adopted/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  两周前，WASM社区集团投票通过为WASM规范的未来版本而采用Spectec。在这篇文章中，我将阐明什么是spectec，它的帮助以及为什么将WASM达到新的严格和保证水平，而在语言标准方面，这是前所未有的。   设置了一个与其他主流编程的功能相距甚远。基本上是卡在1960年代：大多数语言标准，甚至是新的标准，仍然由某些基本的语法符号来定义，因为它们的语法（有时甚至不是这样），而他们的语义是通过漂亮的散文，隐藏的假设和一厢情愿的思想来给出的。      &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/sideffffect      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlsyzq/webassembly_spectec_has_been_adopted/</guid>
      <pubDate>Fri, 28 Mar 2025 11:35:12 GMT</pubDate>
    </item>
    <item>
      <title>.NET ASPIRE-微软作为代码的基础架构尝试</title>
      <link>https://www.reddit.com/r/programming/comments/1jlstu5/net_aspire_microsofts_attempt_at_infrastructure/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/bizzehdee     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlstu5/net_aspire_microsofts_attempt_at_infrastructure/</guid>
      <pubDate>Fri, 28 Mar 2025 11:26:06 GMT</pubDate>
    </item>
    <item>
      <title>这种老式文档样式仍然与git相关吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1jlrw8j/is_this_oldschool_documentation_style_still/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好， 我最近在 30岁的Command＆amp;征服C ++源代码，请参阅YouTube上的链接。在现代开发中， git Handles版本的版本历史，许多团队依靠自我解释的代码，Swagger（apis）（apis）我在我的控制器中使用Swagger，但在我的控制器中工作，但涉及诸如reposoritories之类的fuctions opositories，服务... , and IDE auto-documentation instead of manual inline documentation. So, is this style outdated? what you guys working with  /*********************************************************************************************** *** C O N F I D E N T I A L --- W E S T W O O D S T U D I O S *** *********************************************************************************************** * * * Project Name : Command &amp;征服 *  * * *  *文件名：bullet.cpp *  * *   *程序员：乔·鲍斯蒂奇（Joe L. * * *---------------------------------------------------------------------------------------------* * Functions: * * BulletClass::AI -- Logic processing for bullet. *  * bulletclass :: bulletclass-子弹构造器。 *  * BulletClass :: Bullet_explodes-执行子弹爆炸逻辑。 *  * BulletClass :: Delach-从此子弹的目标系统中删除指定的目标。 *  * bulletclass :: draw_it-在指定的位置显示子弹。 *  * bulletclass :: in_which_layer-获取子弹所居住的层。 *  * BulletClass :: IS_FORCED_TO_EXPLODE-检查项目是否现在应该爆炸。 *  * BulletClass :: Mark-在子弹下执行相关地图。 *  * bulletclass :: usedy_list-确定子弹职业列表。 *  * BulletClass :: Shape_number-获取子弹对象的形状编号。 *  * bulletclass :: sort_y-对子弹渲染的排序坐标。 *  * bulletclass :: target_coord-获取在此对象上启动时使用的坐标。 *  * BulletClass :: Unlimbo-将子弹对象转移到游戏渲染/逻辑系统中。 *  * bulletclass :: delete-子弹内存删除。 *  * BulletClass :: new-为子弹对象分配内存。 *  *子弹子::〜子弹子 - 子弹对象的破坏者。 * * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ this is a sample of the comments in command and conquer source code released publicly in github   提交由＆＃32; /u/u/faceless_sky_father     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlrw8j/is_this_oldschool_documentation_style_still/</guid>
      <pubDate>Fri, 28 Mar 2025 10:24:17 GMT</pubDate>
    </item>
    <item>
      <title>学习编码，忽略AI，然后使用AI更好地编码</title>
      <link>https://www.reddit.com/r/programming/comments/1jlrsom/learn_to_code_ignore_ai_then_use_ai_to_code_even/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  这是我对Reping CEO最近推文的反应，他说学习编码会浪费时间。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/kyrylo     [link]     [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlrsom/learn_to_code_ignore_ai_then_use_ai_to_code_even/</guid>
      <pubDate>Fri, 28 Mar 2025 10:17:08 GMT</pubDate>
    </item>
    <item>
      <title>刚刚在Python制作了我为LLM的第一个GUI应用程序。</title>
      <link>https://www.reddit.com/r/programming/comments/1jlpprj/just_made_my_first_gui_app_for_llms_in_python/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   嘿，redditors，  我刚刚完成了一个我称为ollama-gui-chat的简单聊天应用程序。这是我使用Python的第一个真正的项目，我为它的发展感到非常自豪。 作为一个刚开始编程旅程的人，我会很喜欢您可能会有的任何反馈或建议。 I know there are probably lots of things I could improve on, so please don&#39;t hesitate to point out any bugs or areas for optimization. Main features of the app:  Light, small and minimalist Save, load and clear chats Auto detects installed LLMs  易于自定义   跨平台    我在学习时尽力而为。我正在使用基本上只有 fustomtkinter   构建此应用程序，我仍在学习很多东西，因此任何建议或指导都将非常感谢。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/tomteipl       [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlpprj/just_made_my_first_gui_app_for_llms_in_python/</guid>
      <pubDate>Fri, 28 Mar 2025 07:37:40 GMT</pubDate>
    </item>
    <item>
      <title>零配置开发环境！ Flyenv安装php/python/go/nodejs/java i ...</title>
      <link>https://www.reddit.com/r/programming/comments/1jllzqh/zero_config_dev_environment_flyenv_installs/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/phpwebstudy    href =“ https://youtube.com/watch?v=47i5nzk3rjo&amp;si = _auvamaibmy-yhjf”&gt; [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jllzqh/zero_config_dev_environment_flyenv_installs/</guid>
      <pubDate>Fri, 28 Mar 2025 03:31:51 GMT</pubDate>
    </item>
    <item>
      <title>追踪大语言模型的思想</title>
      <link>https://www.reddit.com/r/programming/comments/1jllpme/tracing_the_thoughts_of_a_large_language_model/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/namanyayg      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jllpme/tracing_the_thoughts_of_a_large_language_model/</guid>
      <pubDate>Fri, 28 Mar 2025 03:17:04 GMT</pubDate>
    </item>
    <item>
      <title>golang在PlayStation 2上</title>
      <link>https://www.reddit.com/r/programming/comments/1jlkqcy/golang_on_the_playstation_2/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/nxgz      [commist]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlkqcy/golang_on_the_playstation_2/</guid>
      <pubDate>Fri, 28 Mar 2025 02:25:36 GMT</pubDate>
    </item>
    <item>
      <title>从头开始的HTTP服务器：第2部分：修复，中间Wares，QueryString &&子程序</title>
      <link>https://www.reddit.com/r/programming/comments/1jleklp/an_http_server_in_go_from_scratch_part_2_fixes/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/_krayorn_     &lt;a href =“ https://www.reddit.com/r/programming/comments/1jleklp/an_http_server_in_go_from_scratch_part_part_2_fixes/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jleklp/an_http_server_in_go_from_scratch_part_2_fixes/</guid>
      <pubDate>Thu, 27 Mar 2025 21:40:29 GMT</pubDate>
    </item>
    <item>
      <title>建筑Regexwars：Regex的密码 - 与AI，clerk.js＆Next.js实时设置</title>
      <link>https://www.reddit.com/r/programming/comments/1jldw2k/building_regexwars_codewars_for_regex_live_setup/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/the_random_coder       [注释]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jldw2k/building_regexwars_codewars_for_regex_live_setup/</guid>
      <pubDate>Thu, 27 Mar 2025 21:13:12 GMT</pubDate>
    </item>
    <item>
      <title>rtabench-实时分析的基准</title>
      <link>https://www.reddit.com/r/programming/comments/1jlduch/rtabench_a_benchmark_for_real_time_analytics/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/jascha_eng      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlduch/rtabench_a_benchmark_for_real_time_analytics/</guid>
      <pubDate>Thu, 27 Mar 2025 21:11:21 GMT</pubDate>
    </item>
    <item>
      <title>开源：AWS Lambda + Puppeteer启动器存储库</title>
      <link>https://www.reddit.com/r/programming/comments/1jlc63c/open_source_aws_lambda_puppeteer_starter_repo/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，，我最近开放了一些我一直使用的小仓库，这使得可以更容易在AWS lambda &lt; /strong&gt;上运行 Puppeteer。认为它可能会帮助其他人构建无服务器刮板或屏幕截图工具。  github： https://github.com.com/github.com/geiger01/peiger01/puppeeter-lambda  Puppeteer bundled and ready to run inside Lambda chrome-aws-lambda support Simple example handler for extracting HTML  I use this setup in my side projects, and it’s worked well so far for handling headless Chromium tasks without managing servers. 让我知道您是否觉得它有用，或者您发现任何可以改进的东西。也欢迎PRS：）  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/jonathan_geiger     &lt;a href =“ https://www.reddit.com/r/programming/comments/1jlc63c/open_source_aws_aws_lambda_puppeteer_starter_repo/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlc63c/open_source_aws_lambda_puppeteer_starter_repo/</guid>
      <pubDate>Thu, 27 Mar 2025 20:01:04 GMT</pubDate>
    </item>
    <item>
      <title>解析，不要验证又名一些C安全提示</title>
      <link>https://www.reddit.com/r/programming/comments/1jlbmzj/parse_dont_validate_aka_some_c_safety_tips/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/lelanthran      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jlbmzj/parse_dont_validate_aka_some_c_safety_tips/</guid>
      <pubDate>Thu, 27 Mar 2025 19:00:20 GMT</pubDate>
    </item>
    </channel>
</rss>
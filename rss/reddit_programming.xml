<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 28 Feb 2025 21:21:33 GMT</lastBuildDate>
    <item>
      <title>P2P REDDIT替代基于IPFS和LIBP2P：探索SEEDIT和PLEBBIT协议</title>
      <link>https://www.reddit.com/r/programming/comments/1j0ikol/a_p2p_reddit_alternative_built_on_ipfs_libp2p/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我一直在关注一个名为plebbit的项目，该项目正在建立一个分散的，耐心的替代品，用于Reddit的替代方案，我想了解您对其建筑和技术设计的想法。他们最近发布了一个名为SEEDIT的客户，旨在复制旧的Reddit UI，但在完全点对点的基础上。 是什么与众不同： 与传统的社交媒体平台，甚至像Mastodon一样，PLEBBIT均设计为真正的P2P。它建立在IPF和LIBP2P的顶部，因此没有中央服务器，没有单一的失败点，并且（从理论上）则无法审查或关闭社区。 It&#39;s a completely different approach compared to the likes of Farcaster and nostr that rely on hubs or relays, as Plebbit aims to connect peers directly and automatically. Key Technical Aspects: * Content Addressing (IPFS): All content (posts, comments, subplebbit data) is identified by its cryptographic hash (CID) using IPFS, ensuring data integrity and immutability. * P2P网络（LIBP2P）：使用LIBP2P进行同行发现，节点之间的直接通信和内容分布。他们正在使用八卦来发送消息。 *作为P2P群体的Subplebbits：每个社区（亚bit）充当其自己的P2P群，用户在其中直接共享内容。 *挑战反应系统：这是他们预防垃圾邮件的方法。每个子公寓所有者都可以定义用户必须完成的任意，基于代码的挑战才能发布或交互。这可能是从简单的验证码到验证令牌所有权到解决编码难题的任何事情。 *没有用于核心功能的区块链在发布内容的核心功能上不使用任何类型的链条，因此没有用于发布的交易费用。 *基于React的客户：SEEDIT和其他客户（例如Plebchan，类似于4chan的客户端）是由React构建的，并使用Plebbit-React-Hooks与基础协议进行交互。 * P2P Web客户端：他们正在通过WebTransport和WEBRTC从事P2P发布，允许任何人在不依赖集中式服务器的情况下使用plebbit。 * Web3集成：它使用ENS（以太坊名称服务）为子Plebbits制作人类可读名称。  有趣且潜在的讨论点：   * P2P网络的可伸缩性：此设计设计范围如何作为用户数量的数量和社区的数量？有潜在的瓶颈吗？开发人员声称已经找到了使P2P设计无限可扩展的方法，但尚未使用大型用户群进行测试。 *可用性权衡：完全P2P通常会为用户引入复杂性（例如，运行节点）。 Plebbit如何针对非技术受众的P2P系统的UX挑战？ *数据持久性和可用性：由于内容已分发，如何确保数据持久性？如果亚bit所有者离线偏离线会怎样？ *安全注意事项：运行完整的Plebbit节点的安全含义是什么？潜在的攻击向量是什么？ *与其他分散的协议进行比较：还有许多其他社交媒体协议声称是分散的，但实际上只是使用集中式方法。每个项目的利弊是什么？ 我很想听听您对这种方法的技术优点和潜在陷阱的想法。这是通往真正分散社交媒体的可行途径吗？他们面临的最大挑战是什么？您会建议哪些改进或替代设计？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/content_link_2084      [link&gt; link&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0ikol/a_p2p_reddit_alternative_built_on_ipfs_libp2p/</guid>
      <pubDate>Fri, 28 Feb 2025 21:17:18 GMT</pubDate>
    </item>
    <item>
      <title>GitHub- Theandor/Nodes：用于在图形上实现分布式算法的Python框架。</title>
      <link>https://www.reddit.com/r/programming/comments/1j0hz6v/github_theelandornodes_a_python_framework_to/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/gand-sale-2343      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0hz6v/github_theelandornodes_a_python_framework_to/</guid>
      <pubDate>Fri, 28 Feb 2025 20:51:43 GMT</pubDate>
    </item>
    <item>
      <title>通往普通LISP / Steve Losh的道路</title>
      <link>https://www.reddit.com/r/programming/comments/1j0hob3/a_road_to_common_lisp_steve_losh/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;  /u/Alexander_Selkirk   [link] ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0hob3/a_road_to_common_lisp_steve_losh/</guid>
      <pubDate>Fri, 28 Feb 2025 20:38:28 GMT</pubDate>
    </item>
    <item>
      <title>没有指针的编程</title>
      <link>https://www.reddit.com/r/programming/comments/1j0gwgg/programming_without_pointers/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/jamiiecb     [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0gwgg/programming_without_pointers/</guid>
      <pubDate>Fri, 28 Feb 2025 20:05:09 GMT</pubDate>
    </item>
    <item>
      <title>防止比赛条件：我在JavaScript中与Lockmanager的经历</title>
      <link>https://www.reddit.com/r/programming/comments/1j0gfjx/preventing_race_conditions_my_experience_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ubarber9673     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0gfjx/preventing_race_conditions_my_experience_with/</guid>
      <pubDate>Fri, 28 Feb 2025 19:45:19 GMT</pubDate>
    </item>
    <item>
      <title>宣布打字稿5.8</title>
      <link>https://www.reddit.com/r/programming/comments/1j0g8es/announcing_typescript_58/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/u/danielrosewasser      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0g8es/announcing_typescript_58/</guid>
      <pubDate>Fri, 28 Feb 2025 19:36:49 GMT</pubDate>
    </item>
    <item>
      <title>订单邮票 - 一种基于弦乐的技巧，用于轻松列表订购</title>
      <link>https://www.reddit.com/r/programming/comments/1j0dpk3/order_stamps_a_stringbased_trick_for_effortless/</link>
      <description><![CDATA[Hey r/programming 🙋‍♂️ We recently cooked up a small TypeScript utility that tackles an old database annoyance: ordering lists without tedious reindexing or conflict checks. What’s the problem?想想将项目插入大列表的中间。如果您将位置存储为整数，则可能必须将每个索引下游的每个索引洗牌。我们想要一个更简单的解决方案 - 一种可以用最小摩擦的插入和删除的插入和删除。 我们的接近序列 - 作为字符串：而不是整数索引，每个列表项目都会获得一个“邮票”，这是一个无限删除的字符串。因此，您可以在现有的邮票中插入新的邮票，而不会重新列出整个列表。 核心功能： -  start（start（）和end（）生成邮票，用于在列表的开头或结束时添加项目。 - （Stampa，StampB）在两个现有的邮票之间生成一个新的邮票。 实用的倒影：您将这些字符串存储在DB列中，按它们进行排序，而Voilà-您的列表顺序是正确的。无需重新索引，不需要奇特的并发检查。 为什么它的工作：字符串可以不断增长以提供“中间”的空间。例如，如果您有“ AA”和“ AB”，则可能在中间插入“ AAN”，“ AAR”或“ AAX”。  性能和碰撞总是有空间摇摆的空间。 - 碰撞极不可能归功于可能的价值的宽敞空间和一些随机性。 我们最初为自己的分布式数据库项目GoatDB创建了订单邮票，但是如果您只需要快速解决列表的快速修复。 我们喜欢您的反馈：Edgeback：Edgeback：Edgeback：Edgeback：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edge：Edgeback：Edgeback，cesmormance corvelys corvess，您的建议或任何建议或任何建议。如果您最终使用它，我们将被震惊以了解您的经历！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/funny-anding-791      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0dpk3/order_stamps_a_stringbased_trick_for_effortless/</guid>
      <pubDate>Fri, 28 Feb 2025 17:50:00 GMT</pubDate>
    </item>
    <item>
      <title>Websockets如何工作</title>
      <link>https://www.reddit.com/r/programming/comments/1j0cvkr/how_do_websockets_work/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/sdxyz42      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0cvkr/how_do_websockets_work/</guid>
      <pubDate>Fri, 28 Feb 2025 17:15:13 GMT</pubDate>
    </item>
    <item>
      <title>最佳的AI替代品用于编码的CHATGPT</title>
      <link>https://www.reddit.com/r/programming/comments/1j0bsdn/best_ai_alternatives_to_chatgpt_for_coding/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/suipranuvem   href =“ https://subipranuvem.hashnode.dev/you-shouldnt-use-chatgpt-to-generate-code-use-use-ishis-this-this-other-ai-instead”&gt; [link]    ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0bsdn/best_ai_alternatives_to_chatgpt_for_coding/</guid>
      <pubDate>Fri, 28 Feb 2025 16:31:00 GMT</pubDate>
    </item>
    <item>
      <title>跨平台，0-外部依赖性文本/代码编辑器，完全写在C ++中</title>
      <link>https://www.reddit.com/r/programming/comments/1j0bn3o/a_crossplatform_0externaldependencies_textcode/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/armanding_chip_5729        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0bn3o/a_crossplatform_0externaldependencies_textcode/</guid>
      <pubDate>Fri, 28 Feb 2025 16:25:08 GMT</pubDate>
    </item>
    <item>
      <title>如何筑巢三元</title>
      <link>https://www.reddit.com/r/programming/comments/1j0ax3p/how_to_nest_ternaries/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/levodelellis      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0ax3p/how_to_nest_ternaries/</guid>
      <pubDate>Fri, 28 Feb 2025 15:56:09 GMT</pubDate>
    </item>
    <item>
      <title>价：从自然语言借用以扩大代码的表现力</title>
      <link>https://www.reddit.com/r/programming/comments/1j0avsm/valence_borrowing_from_natural_language_to_expand/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/rottytooth      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j0avsm/valence_borrowing_from_natural_language_to_expand/</guid>
      <pubDate>Fri, 28 Feb 2025 15:54:41 GMT</pubDate>
    </item>
    <item>
      <title>微服务，一切都在哪里出错•伊恩·库珀（Ian Cooper）</title>
      <link>https://www.reddit.com/r/programming/comments/1j09oix/microservices_where_did_it_all_go_wrong_ian_cooper/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j09oix/microservices_where_did_it_all_go_wrong_ian_cooper/</guid>
      <pubDate>Fri, 28 Feb 2025 15:03:08 GMT</pubDate>
    </item>
    <item>
      <title>建立一个完全编码和操作的副驾驶</title>
      <link>https://www.reddit.com/r/programming/comments/1j09c99/building_a_fully_coded_and_operational_copilot/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ally_piccolo5736       [link]        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j09c99/building_a_fully_coded_and_operational_copilot/</guid>
      <pubDate>Fri, 28 Feb 2025 14:48:03 GMT</pubDate>
    </item>
    <item>
      <title>所有堆栈的杰克，无主人……除了Tech Fomo。</title>
      <link>https://www.reddit.com/r/programming/comments/1j08ruc/jack_of_all_stacks_master_of_none_except_tech_fomo/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/confffec_aardvark_621     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1j08ruc/jack_of_all_stacks_master_of_none_except_tech_fomo/</guid>
      <pubDate>Fri, 28 Feb 2025 14:22:06 GMT</pubDate>
    </item>
    </channel>
</rss>
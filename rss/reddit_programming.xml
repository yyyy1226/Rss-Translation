<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 11 Apr 2025 15:26:59 GMT</lastBuildDate>
    <item>
      <title>我从头开始实施了HOTP和TOTP，以了解一次性密码的工作方式</title>
      <link>https://www.reddit.com/r/programming/comments/1jwq9c2/i_implemented_hotp_totp_from_scratch_to/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我发现了2fa和otps神秘，所以我决定深入研究它们的工作方式，并编写了自己的HOTP/TOTP实现。我还解释了他们在这篇文章中如何工作和想法。  帖子浏览HMAC，基于时间的计数器，动态截断，并将代码共享到示例应用程序。  会喜欢反馈或建议！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/dogacel      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwq9c2/i_implemented_hotp_totp_from_scratch_to/</guid>
      <pubDate>Fri, 11 Apr 2025 13:45:47 GMT</pubDate>
    </item>
    <item>
      <title>从头开始建造变压器...在Python中</title>
      <link>https://www.reddit.com/r/programming/comments/1jwq4rb/building_transformers_from_scratch_in_python/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  当在地标2017论文中引入    您需要       脱离了传统序列模型，变形金刚采用自我注意力机制（稍后再详细介绍）作为其核心构建块，使他们能够以显着的效率捕获数据中的长距离依赖性。从本质上讲，变压器可以被视为通用计算底物 - 一种可编程的逻辑组织，基于训练数据来重新配置，并且可以堆叠，并且可以堆叠，因为层构建了具有引人入胜的紧急行为的大型模型。   &lt;！ -  sc_on--&gt;＆＃32;&gt;＆＃32;提交由＆＃32; /u/u/dtseng123       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwq4rb/building_transformers_from_scratch_in_python/</guid>
      <pubDate>Fri, 11 Apr 2025 13:40:02 GMT</pubDate>
    </item>
    <item>
      <title>优点和劣势：同一枚硬币的两个方面</title>
      <link>https://www.reddit.com/r/programming/comments/1jwq3cr/strengths_and_weaknesses_two_sides_of_the_same/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/himothyjohndoe     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwq3cr/strengths_and_weaknesses_two_sides_of_the_same/</guid>
      <pubDate>Fri, 11 Apr 2025 13:38:15 GMT</pubDate>
    </item>
    <item>
      <title>为什么要成为后端开发的第一步</title>
      <link>https://www.reddit.com/r/programming/comments/1jwq29z/why_go_should_be_your_first_step_into_backend/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;态href =“ https://blog.cubed.run/why-go-should-be-be-your-first-step-into-backend-development-45be1ea5fdf7”&gt; [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwq29z/why_go_should_be_your_first_step_into_backend/</guid>
      <pubDate>Fri, 11 Apr 2025 13:36:52 GMT</pubDate>
    </item>
    <item>
      <title>PostScript中的编程 - 复古编码乐趣：打印机上的游戏</title>
      <link>https://www.reddit.com/r/programming/comments/1jwpkgo/programming_in_postscript_retro_coding_fun_games/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我在过去两年中一直在尝试Postscript编程，创建了几种小游戏（TIC-TAC，国际象棋，Sokoban和Tetris），它们都在鬼影或直接在打印机上运行。  这是我关于这个古怪而有趣的旅程的注释幻灯片，充满了见解，代码片段和经验教训。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/dull_replacement8890       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwpkgo/programming_in_postscript_retro_coding_fun_games/</guid>
      <pubDate>Fri, 11 Apr 2025 13:14:01 GMT</pubDate>
    </item>
    <item>
      <title>编程语言的过去，现在和未来•Kevlin Henney</title>
      <link>https://www.reddit.com/r/programming/comments/1jwp95k/the_past_present_future_of_programming_languages/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwp95k/the_past_present_future_of_programming_languages/</guid>
      <pubDate>Fri, 11 Apr 2025 12:59:20 GMT</pubDate>
    </item>
    <item>
      <title>如何激励自己，自我编码仍然是一件事情？</title>
      <link>https://www.reddit.com/r/programming/comments/1jwp5ff/how_to_motivate_myself_and_is_self_coding_still_a/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我目前正在学习python，我确实有编程的基础知识，并且我可以很好地理解什么教程/课程告诉我，我可以阅读没有附带额外库的基本代码。我看到自己要锁定进行一些W3Schools练习（对我来说，这是最有效的学习方式，同时关注W3Schools关于该主题的页面），然后跳下30分钟后跳下来，因为我觉得由于语法错误或对一个错误或错误的问题的错误答案，所以我感到觉得自己选择了错误的答案。基本上，我缺乏找到正确答案的动力。自我编码了吗？在与工作相关的工作方面，人们实际上是从0开始的自我代码吗？看来我在创造力上挣扎，实际上在没有AI的帮助下创建了自己的代码，并且编程职业看起来离现实很远。我想遵循网络和电信软件作为学位，并关注网络工程师，DevOps或云架构师作为未来的工作目标。我觉得至少要了解python或bash或任何可以帮助理由的语言，我认为我正在寻找twords实际学习编码而不是仅仅实现chatgpt代码并求解他犯的错误并解决他犯的错误。提交由＆＃32; /u/u/jokerghostx     link&gt;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwp5ff/how_to_motivate_myself_and_is_self_coding_still_a/</guid>
      <pubDate>Fri, 11 Apr 2025 12:54:09 GMT</pubDate>
    </item>
    <item>
      <title>使用AI与Gemma 3，Langchain和简化的视频总结视频</title>
      <link>https://www.reddit.com/r/programming/comments/1jwoso2/summarize_videos_using_ai_with_gemma_3_langchain/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/flacky-thought-5472      [link]       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwoso2/summarize_videos_using_ai_with_gemma_3_langchain/</guid>
      <pubDate>Fri, 11 Apr 2025 12:36:24 GMT</pubDate>
    </item>
    <item>
      <title>Vibe编码 - 开发人员的结束</title>
      <link>https://www.reddit.com/r/programming/comments/1jwohe5/vibe_coding_the_end_of_developers/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  在表面上，氛围编码听起来很棒。诸如Copilot，Cursor和基于CHATGPT的代码代理这样的AI工具比以往任何时候都更容易构建软件。 ，但这是捕获：VIBE编码可能很快，但它通常会跳过思维的最重要部分。提交由＆＃32; /u/u/emmysteven      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwohe5/vibe_coding_the_end_of_developers/</guid>
      <pubDate>Fri, 11 Apr 2025 12:20:12 GMT</pubDate>
    </item>
    <item>
      <title>携带者令牌指南：JWT与不透明令牌</title>
      <link>https://www.reddit.com/r/programming/comments/1jwoelx/a_guide_to_bearer_tokens_jwt_vs_opaque_tokens/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/uper_io     &lt;a href =“ https://www.reddit.com/r/programming/comments/1jwoelx/a_guide_to_bearer_tokens_jwt_jwt_vs_opaque_tokens/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwoelx/a_guide_to_bearer_tokens_jwt_vs_opaque_tokens/</guid>
      <pubDate>Fri, 11 Apr 2025 12:16:07 GMT</pubDate>
    </item>
    <item>
      <title>像2000年的图形编程 -  PlayStation 2图形的深奥介绍 - 第1部分</title>
      <link>https://www.reddit.com/r/programming/comments/1jwni7m/graphics_programming_like_its_2000_an_esoteric/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/nxgz     [link link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwni7m/graphics_programming_like_its_2000_an_esoteric/</guid>
      <pubDate>Fri, 11 Apr 2025 11:25:34 GMT</pubDate>
    </item>
    <item>
      <title>Linus Torvalds在10天内建造了Git-从未想象它会持续20年</title>
      <link>https://www.reddit.com/r/programming/comments/1jwmwdy/linus_torvalds_built_git_in_10_days_and_never/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/crankybear     [link]        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwmwdy/linus_torvalds_built_git_in_10_days_and_never/</guid>
      <pubDate>Fri, 11 Apr 2025 10:48:14 GMT</pubDate>
    </item>
    <item>
      <title>Python代码</title>
      <link>https://www.reddit.com/r/programming/comments/1jwmtu9/python_code/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  你好，我会遇到错误＆quorts = results = result [0] .data.c.get_counts（）databin对象没有属性&#39;c&#39;＆quot;当我运行以下Qiskit Python代码时。您能否让我知道如何修复它。非常感谢。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://drive.google.com/file/d/1t5udmgvsvsvsv6w7x5ns6e0bsx6koaivdg7q/view?usp = drive_link”&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwmtu9/python_code/</guid>
      <pubDate>Fri, 11 Apr 2025 10:43:26 GMT</pubDate>
    </item>
    <item>
      <title>AI驱动软件体系结构的未来：AI如何转换技术文档</title>
      <link>https://www.reddit.com/r/programming/comments/1jwmob1/the_future_of_aidriven_software_architecture_how/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;态href =“ https://stackstudio.io/blog/the-future-of-ai-drive-software-architecture-how-ai-i-is-is-transforming-technical-documentation”&gt; [link]        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwmob1/the_future_of_aidriven_software_architecture_how/</guid>
      <pubDate>Fri, 11 Apr 2025 10:33:04 GMT</pubDate>
    </item>
    <item>
      <title>JEP 463：隐式声明的类和实例主要方法</title>
      <link>https://www.reddit.com/r/programming/comments/1jwmde2/jep_463_clases_implícitamente_declaradas_y/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/emanuelpeg     ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1jwmde2/jep_463_clases_implícitamente_declaradas_y/</guid>
      <pubDate>Fri, 11 Apr 2025 10:12:40 GMT</pubDate>
    </item>
    </channel>
</rss>
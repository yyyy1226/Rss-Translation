<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Wed, 28 Aug 2024 01:37:29 GMT</lastBuildDate>
    <item>
      <title>[媒体] Rerun.io 推出了一种强大的工具，用于随时间推移可视化多模式数据。</title>
      <link>https://t.me/hn_summary/105836</link>
      <description><![CDATA[Rerun：随时间可视化多模态数据
Rerun.io 推出了一款强大的工具，用于随时间可视化多模态数据。借助 Rerun，用户可以轻松记录和传输各种数据类型，例如张量、点云和文本。此功能允许无缝关联来自各种来源的输入、中间状态和输出，从而提供复杂数据交互的全面视图。该平台的独特优势在于它能够处理和集成多种数据模态，这使其成为旨在从数据流中获得更深入见解的数据科学家和工程师的宝贵资源。]]></description>
      <guid>https://t.me/hn_summary/105836</guid>
      <pubDate>Wed, 28 Aug 2024 01:37:29 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Knockknock 是一个基于 Python 的端口敲击实现，旨在简单、安全 [...]</title>
      <link>https://t.me/hn_summary/105835</link>
      <description><![CDATA[Knockknock：简单、安全、隐秘的端口敲击实现
Knockknock 是一种基于 Python 的端口敲击实现，旨在简单、安全、隐秘。该项目解决了传统端口敲击方法的局限性，这些方法容易受到重放攻击，而且往往过于复杂。Knockknock 通过避免不安全的语言、内核级操作和不必要的网络服务来脱颖而出。它通过向服务器发送单个加密的 SYN 数据包来运行，然后记录并处理该数据包以打开指定端口。加密可确保安全，防止窃听和重放攻击。Knockknock 旨在最大限度地减少网络服务暴露，使其成为保护具有潜在易受攻击服务的服务器的强大解决方案。]]></description>
      <guid>https://t.me/hn_summary/105835</guid>
      <pubDate>Wed, 28 Aug 2024 00:35:09 GMT</pubDate>
    </item>
    <item>
      <title>Auglinn 是一个创新平台，允许用户创建地图（空间）并标记虚拟号码 [...]</title>
      <link>https://t.me/hn_summary/105834</link>
      <description><![CDATA[展示 HN：通过 Web 和 AR 集成创建户外笔记和地图
Auglinn 是一个创新平台，允许用户创建地图（空间）并将虚拟笔记固定到特定位置。这些笔记可以包括想法、信息、故事、反馈或事件，可以通过 Web 远程放置，也可以在边走边使用应用程序。笔记将同时出现在地图和街道上。用户可以选择将他们的空间设为公开、私人或仅供查看。最突出的功能是，任何路过的人都可以通过增强现实 (AR) 查看和与公开和仅供查看的笔记进行交互。这种独特的 Web 和 AR 技术集成提供了一种共享和与基于位置的内容交互的新颖方式。]]></description>
      <guid>https://t.me/hn_summary/105834</guid>
      <pubDate>Wed, 28 Aug 2024 00:29:04 GMT</pubDate>
    </item>
    <item>
      <title>JavaScript 到 WASM 的编译，第 2 部分：提前与临时</title>
      <link>https://t.me/hn_summary/105833</link>
      <description><![CDATA[JavaScript 到 WASM 的编译，第 2 部分：提前编译与 JIT
在我的“Wasm 上的快速 JS”系列的续篇中，我深入研究了 JavaScript 到 WebAssembly (Wasm) 的提前 (AOT) 编译的复杂性，并以第一篇文章中讨论的带有内联缓存的可移植解释器为基础。JavaScript 在网络上的普遍性要求它与现代计算平台兼容，包括 Wasm，我过去四年一直在研究它，尤其是服务器端沙盒。

这篇文章详细介绍了我为 JavaScript 到 Wasm 字节码创建 AOT 编译器的 1.5 年努力，实现了 3-5 倍的加速。这项工作集成到了字节码联盟的 SpiderMonkey 和我们的 StarlingMonkey JS-on-Wasm 运行时中，通过了所有相关测试，但仍处于测试阶段。该方法利用了我的便携式基线解释器和 weval 部分程序评估器，使用 Futamura 投影进行高效编译。

在缺少原生 JS 引擎的 Wasm-first 平台上运行 JavaScript 带来了独特的挑战。这些平台受益于 Wasm 的细粒度隔离和安全性，但由于缺乏运行时代码生成和需要每个请求隔离，使传统的 JIT 编译变得复杂。这需要在 Wasm 上高效编译动态类型 JavaScript 的创新解决方案。

争议：在 Wasm 模块内运行整个 JavaScript 引擎的方法可能看起来不太常规，但它提供的安全性和性能优势是合理的。

独特/巧妙：使用 Futamura 投影和集成 weval 以从解释器主体进行“免费”编译是这项工作的特别创新的方面。（基于 41% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/105833</guid>
      <pubDate>Wed, 28 Aug 2024 00:28:00 GMT</pubDate>
    </item>
    <item>
      <title>网站：bpfquery.com</title>
      <link>https://t.me/hn_summary/105832</link>
      <description><![CDATA[显示 HN：bpfquery – 尝试将 SQL 编译为 bpf（跟踪）
标题：显示 HN：bpfquery – 尝试将 SQL 编译为 bpf（跟踪）
网站：bpfquery.com

bpfquery 是一项创新实验，探索将 SQL 查询编译为 BPF（伯克利数据包过滤器）跟踪程序的潜力。此方法旨在通过利用 SQL 的熟悉性和表现力来简化监控和调试系统调用的过程。该项目展示了跟踪系统调用和简化 kprobe 使用等示例，使开发人员更容易洞察系统性能和行为。这种独特的 SQL 和 BPF 组合可能会彻底改变我们与系统跟踪工具的交互方式，为系统分析提供更直观、更强大的方法。]]></description>
      <guid>https://t.me/hn_summary/105832</guid>
      <pubDate>Wed, 28 Aug 2024 00:25:55 GMT</pubDate>
    </item>
    <item>
      <title>问 HN：您如何度过休息日？</title>
      <link>https://t.me/hn_summary/105831</link>
      <description><![CDATA[问 HN：你如何度过休息日？
标题：问 HN：你如何度过休息日？
网站：news.ycombinator.com

在此 Hacker News 主题中，用户分享了在感到疲倦、生病或睡眠不足但仍想保持一定效率时管理休息日的策略。常见的建议包括小睡一会儿、进行轻度锻炼、专注于低强度任务以及通过承认休息一天是可以的来练习自我同情。一些用户建议调整自己的日程安排，优先考虑休息和恢复，而另一些人则建议利用这段时间进行创造性或要求较低的活动。该帖子强调了倾听身心并相应地调整生产力策略的重要性。]]></description>
      <guid>https://t.me/hn_summary/105831</guid>
      <pubDate>Wed, 28 Aug 2024 00:24:52 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 大家好，</title>
      <link>https://t.me/hn_summary/105830</link>
      <description><![CDATA[显示 HN：Supertree – Python 中的决策树交互式可视化
大家好，

我很高兴介绍 supertree，这是一个专为交互式决策树可视化而设计的新 Python 包。此工具允许您将决策树可视化为交互式图形，使您能够折叠和展开节点，以及缩放和平移大型树。它支持 Scikit-learn、Xgboost 和 LightGBM，并可在 Jupyter Lab、Jupyter Notebook 和 Google Colab 中无缝运行。此外，您可以在 Python 脚本中使用它并将输出树保存为 HTML。该包可在 pip（pip install supertree）上找到，您可以在我们的 GitHub 页面上找到代码示例。祝您探索愉快！

GitHub 链接：https://github.com/mljar/supertreeGitHubGitHub - mljar/supertree：使用 Python 可视化决策树使用 Python 可视化决策树。在 GitHub 上创建帐户，为 mljar/supertree 开发做出贡献。]]></description>
      <guid>https://t.me/hn_summary/105830</guid>
      <pubDate>Wed, 28 Aug 2024 00:23:49 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Tenstorrent 在 Hot Chips 上推出了其 Blackhole AI 加速器，声称其性能优于 [...]</title>
      <link>https://t.me/hn_summary/105829</link>
      <description><![CDATA[Tenstorrent 的 Blackhole 芯片拥有 768 个 RISC-V 核心和几乎同样多的 FLOPS
Tenstorrent 在 Hot Chips 上推出了其 Blackhole AI 加速器，声称它们在原始计算和可扩展性方面优于 Nvidia 的 A100。每个 Blackhole 芯片都具有 745 teraFLOPS 的 FP8 性能、32GB 的 GDDR6 内存和 1TBps 的以太网互连。Blackhole Galaxy 系统结合了 32 个加速器，承诺提供近 24 petaFLOPS 的 FP8 性能，大大超过 Nvidia 最密集的系统。 Blackhole 的独特之处在于它使用了 16 个“Big RISC-V”和 752 个“Baby RISC-V”核心，使其能够作为一台独立的 AI 计算机运行。Tenstorrent 的 TT-Metalium 编程模型支持各种 AI 运行时，简化了部署。争议在于 Tenstorrent 对 Nvidia 既定主导地位的大胆主张。]]></description>
      <guid>https://t.me/hn_summary/105829</guid>
      <pubDate>Wed, 28 Aug 2024 00:06:39 GMT</pubDate>
    </item>
    <item>
      <title>今天我学习了（TIL） git bisect 命令，它是 Git 中的一个强大工具，它使用二进制[...]</title>
      <link>https://t.me/hn_summary/105828</link>
      <description><![CDATA[TIL 关于 Git Bisect
今天我了解了 (TIL) git bisect 命令，这是 Git 中的一个强大工具，它使用二分搜索算法来识别引入错误或项目历史记录中任何其他更改的提交。该过程包括标记已知的“坏”提交和已知的“好”提交，然后 git bisect 通过检查中间的提交并要求用户将其分类为“好”或“坏”来迭代缩小范围。这一直持续到找到确切的问题提交。 

有趣的是，git bisect 还可用于查找引入积极变化（例如性能改进）的提交，方法是使用自定义术语，如“旧”和“新”，而不是“好”和“坏”。这种灵活性允许广泛的用例，使 git bisect 成为开发人员的多功能工具。

一个巧妙的功能是能够使用脚本自动执行二分法过程，这可以确定代码的状态并相应地标记提交。这可以大大加快调试过程。

此外，该命令还提供各种选项来处理无法测试提交的情况，例如跳过提交或指定 pathspec 参数以缩小搜索空间。

总体而言，git bisect 是一个强大而灵活的工具，可以在开发人员追踪项目历史记录中有问题的提交时节省大量时间。 （根据 93% 的故事文本进行总结。）]]></description>
      <guid>https://t.me/hn_summary/105828</guid>
      <pubDate>Wed, 28 Aug 2024 00:02:35 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 物联网为何失败了？</title>
      <link>https://t.me/hn_summary/105827</link>
      <description><![CDATA[物联网为何失败？
尽管投入了数十亿美元和多年的投资，物联网 (IoT) 在很大程度上未能获得消费者的认可。调查显示，只有不到 50% 的可上网设备实现了联网，一些制造商报告的数字甚至更低。物联网的核心理念——将日常设备连接到网络——并没有给用户带来令人信服的好处。设置过程繁琐，需要多个步骤，每个设备都需要不同的应用程序，导致设置疲劳。此外，许多物联网功能（如远程启动洗碗机）几乎没有实用价值。网络连接的能耗也是一个重大障碍，尤其是对于电池供电的设备。不应专注于互联网连接，而应努力解决真正的用户烦恼，例如简化远程控制和提高设备响应能力。作者对嵌入式技术仍然持乐观态度，但主张真正增强用户体验的解决方案。]]></description>
      <guid>https://t.me/hn_summary/105827</guid>
      <pubDate>Wed, 28 Aug 2024 00:00:25 GMT</pubDate>
    </item>
    </channel>
</rss>
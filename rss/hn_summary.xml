<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Sun, 06 Oct 2024 18:28:22 GMT</lastBuildDate>
    <item>
      <title>《美国的命名》一文探讨了美国这个名称的复杂且经常引起争议的起源 [...]</title>
      <link>https://t.me/hn_summary/111402</link>
      <description><![CDATA[美洲的命名 (2001)
《美洲的命名》一文探讨了“美洲”这个名字的复杂且经常引起争议的起源。传统上，人们认为美洲是以 Amerigo Vespucci 的名字命名的，他认为新大陆与亚洲不同。然而，这种说法受到各种理论的质疑，每种理论都有文化和政治含义。一种有争议的理论认为，美洲是以尼加拉瓜的 Amerrique 地区命名的，据称 Vespucci 曾访问过该地区，后来他采用了这个名字。这一理论得到了 19 世纪地质学家 Jules Marcou 的支持，有人批评它试图消除旧神话，同时又创造了新的神话。文章还谈到了对韦斯普奇的诽谤，认为他被不公正地描绘成篡夺哥伦布荣耀的人。这篇文章强调了命名和身份的更广泛含义，强调了仔细审视历史叙述的必要性。（根据 37% 的故事文本总结。）]]></description>
      <guid>https://t.me/hn_summary/111402</guid>
      <pubDate>Sun, 06 Oct 2024 18:28:22 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在我对函数式编程的探索中，我发现 Haskell 和 OCaml 都很吸引人 [...]</title>
      <link>https://t.me/hn_summary/111401</link>
      <description><![CDATA[Gleam 是务实的
在我探索函数式编程的过程中，我发现 Haskell 和 OCaml 既令人着迷又令人沮丧。Haskell 的优雅性因其隐式性和惰性求值而受损，而 OCaml 的显式性则令人精疲力尽。最近，我一直在尝试使用 Gleam，这是一种巧妙地结合了两者最佳方面的语言。Gleam 的设计选择，例如使用表达式来表示回调样式的 API、所有类型的结构相等性以及不存在临时多态性，提供了务实的平衡。Gleam 针对 BEAM 和 JavaScript，其语法清晰且富有表现力，使其成为一种令人耳目一新的替代方案。然而，“回调地狱”问题仍然是一个挑战，Gleam 用其 use 结构解决了这个问题，将嵌套回调扁平化为更易读的形式。这种创新方法凸显了 Gleam 简化函数式编程的潜力。（摘要基于 67% 的故事文本。）]]></description>
      <guid>https://t.me/hn_summary/111401</guid>
      <pubDate>Sun, 06 Oct 2024 18:23:16 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 《大众科学》杂志档案可查阅自 1872 年 5 月至 2009 年 3 月的 [...]</title>
      <link>https://t.me/hn_summary/111400</link>
      <description><![CDATA[《大众科学》杂志档案 1872 年 5 月 - 2009 年 3 月
《大众科学》杂志档案涵盖了 1872 年 5 月至 2009 年 3 月的期刊，可在 Google 图书上查阅。该杂志的庞大藏品反映了该杂志致力于为读者提供知识和工具，以增强技术和他们周围的世界。《大众科学》及其读者的核心是共同的乐观主义：相信未来充满希望，科学和技术是推动这一进步的关键力量。该档案证明了创新和科学进步是实现更美好明天的关键这一持久愿景。]]></description>
      <guid>https://t.me/hn_summary/111400</guid>
      <pubDate>Sun, 06 Oct 2024 18:13:09 GMT</pubDate>
    </item>
    <item>
      <title>在低端仅有 CPU 的机器上进行零样本文本分类？</title>
      <link>https://t.me/hn_summary/111399</link>
      <description><![CDATA[在低端 CPU 机器上进行零样本文本分类？
我正在探索在低端 CPU 机器上执行零样本文本分类的可行性，特别是使用 Hetzner 价格合理且可靠的硬件选项，但不幸的是这些选项缺乏 GPU 支持。我的目标是使用类似 Hugging Face 的 711 MB 模型实现每秒分类请求的高吞吐量。挑战在于为该设置选择最有效的部署框架，选项包括 lmdeploy、text-generation-inference、TensorRT-LLM 和 vllm。框架数量的增加使决策变得复杂，我正在寻求有关在非 GPU 硬件上部署大型语言模型的最佳方法的建议。]]></description>
      <guid>https://t.me/hn_summary/111399</guid>
      <pubDate>Sun, 06 Oct 2024 18:11:03 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在“我们正在进入数学的未知领域”一文中，加州大学洛杉矶分校著名数学家陶哲轩 [...]</title>
      <link>https://t.me/hn_summary/111398</link>
      <description><![CDATA[我们正在进入数学的未知领域
在“我们正在进入数学的未知领域”一文中，著名加州大学洛杉矶分校数学教授陶哲轩讨论了人工智能在数学中不断演变的角色。虽然目前的人工智能模型（如 OpenAI 的 o1 系列）尚未与人类数学家相提并论，但它们具有作为研究助理的潜力，能够处理日常任务和计算。陶哲轩将这些模型比作“平庸但并非完全无能”的研究生，强调了他们在创造力和持续学习方面的局限性。他设想未来人工智能将促进“工业规模数学”，从而实现更广泛的协作项目。这种方法可能会彻底改变通用代数等领域，类似于基因测序技术在遗传学方面的进步。文章强调了人类和人工智能的互补优势，建议转向协作解决问题，而不是取代人类的聪明才智。人工智能改变数学协作和探索的潜力既令人兴奋又充满争议，因为它挑战了传统方法和人类创造力在该领域的作用。]]></description>
      <guid>https://t.me/hn_summary/111398</guid>
      <pubDate>Sun, 06 Oct 2024 18:09:00 GMT</pubDate>
    </item>
    <item>
      <title>作为塔夫茨大学 JumboCode 的工程主管，我观察到，虽然人工智能和 [...]</title>
      <link>https://t.me/hn_summary/111397</link>
      <description><![CDATA[AI 阻碍了学习 Web 开发
作为塔夫茨大学 JumboCode 的工程主管，我发现虽然 AI 和 LLM 在我们的俱乐部中很普遍，但它们可能不利于学习 Web 开发。我们的开发人员大多是初学者，他们经常依赖 LLM 来生成代码，这导致他们对工具和平台存在根本性的误解。例如，我遇到了一个 Next.js 项目，其中存在严重的误用，例如在 React 系统之外使用原生 JavaScript 并进行低效的 API 调用。这些不是典型的初学者错误，而是缺乏基础知识。LLM 提供了快速解决方案，但没有培养理解所需的心理模型。虽然它们对那些具有现有知识的人有益，但它们阻碍了新手的真正学习。我主张向真人寻求指导，因为他们能提供 LLM 无法比拟的具体解释。尽管 LLM 很方便，但我相信真正的学习需要努力和人际互动。有趣的是，我自己也使用 LLM，但我很庆幸自己事先学过基础知识。]]></description>
      <guid>https://t.me/hn_summary/111397</guid>
      <pubDate>Sun, 06 Oct 2024 18:06:56 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在这篇博文中，作者探讨了一种扩展 GNU 风格命令的复杂方法 [...]</title>
      <link>https://t.me/hn_summary/111396</link>
      <description><![CDATA[滥用 ZSH 参数扩展来扩展 GNU 样式的参数
在这篇博文中，作者探讨了一种使用 ZSH 参数扩展来扩展 GNU 样式命令行参数的复杂方法。他们承认，虽然这种方法非常规且过于复杂，但有必要解决 Windows 下 mingw 平台上的性能问题，因为在 Windows 下创建子 shell 的成本很高。作者坦率地承认，该解决方案虽然有效，但很难解释，不建议用于一般用途。他们反思了由于个人优先事项和技术挫折（例如由于硬盘故障而丢失代码）而中断博客的经历。该博客是个人存储库，用于存放不常用但有价值的编码解决方案，也是他们的孩子了解软件开发工作的潜在资源。作者还分享了他们的职业生涯，重点介绍了物联网、3D 工具、联合身份和生成式人工智能方面的项目，并承认由于职业兴趣的不断发展，他们在博客中存在差距。]]></description>
      <guid>https://t.me/hn_summary/111396</guid>
      <pubDate>Sun, 06 Oct 2024 18:03:51 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在对 AM 广播的不确定未来进行真诚探索时，尼曼实验室的文章 [...]</title>
      <link>https://t.me/hn_summary/111395</link>
      <description><![CDATA[国会努力让 AM 收音机留在汽车中
在对 AM 收音机不确定的未来进行真诚探索时，尼曼实验室的这篇文章强调了国会为保留汽车中的 AM 收音机而进行的持续斗争，特别是由于电动汽车的干扰问题，特斯拉和福特等汽车制造商正在逐步淘汰 AM 收音机。此举威胁到 4,000 多个 AM 电台的生存，而这些电台对许多司机来说至关重要。参议员埃德·马基倡导的《每辆车都配备 AM 收音机法案》强调了 AM 收音机作为公共事业的作用，对于紧急情况和多样化媒体至关重要。这篇文章追溯了 AM 收音机的历史意义及其演变，哀叹它转向企业驱动的党派内容。它主张恢复类似于低功率 FM 社区广播的公共利益标准，以确保 AM 收音机有效地服务于社区。争议在于如何平衡企业利益与公共服务义务，并质疑如果汽车制造商被要求安装 AM 收音机，广播公司是否也应该承担责任。]]></description>
      <guid>https://t.me/hn_summary/111395</guid>
      <pubDate>Sun, 06 Oct 2024 18:03:48 GMT</pubDate>
    </item>
    <item>
      <title>2024 年 10 月初，任天堂成功关闭了 Nintendo Switch 模拟器 Ryujinx，原因是 [...]</title>
      <link>https://t.me/hn_summary/111394</link>
      <description><![CDATA[任天堂在 Yuzu 之后关闭 Ryujinx
2024 年 10 月初，任天堂成功关闭了任天堂 Switch 模拟器 Ryujinx，此前 Yuzu 在今年早些时候也遭遇了类似的命运。尽管 Ryujinx 的受欢迎程度较低，但任天堂的法律行动导致其 GitHub 存储库被删除，Patreon 资金被重新定向，这对模拟器社区造成了重大打击。该项目负责人 gdkchan 在任天堂联系后同意停止开发。虽然 Ryujinx 的网站仍然存在，但它的未来尚不确定，可能会有社区驱动的努力来恢复它。此次打击凸显了模拟器开发者面临的风险，尤其是在 Switch 2 即将发布的情况下。这种情况凸显了去中心化平台避免法律漏洞的必要性，这对未来的模拟器项目构成了挑战。争议在于任天堂激进的法律立场，这可能会扼杀模拟器领域的创新和爱好者的贡献。]]></description>
      <guid>https://t.me/hn_summary/111394</guid>
      <pubDate>Sun, 06 Oct 2024 18:02:44 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Ziggy 是一种多功能数据序列化语言，旨在有效地表达 API m [...]</title>
      <link>https://t.me/hn_summary/111393</link>
      <description><![CDATA[Ziggy：用于表达 API 消息、配置文件的数据序列化语言
Ziggy 是一种多功能的数据序列化语言，旨在高效地表达 API 消息和配置文件。该语言的语法既直观又强大，允许用户轻松定义复杂的数据结构。例如，Ziggy 可以使用唯一标识符、时间戳和详细命令操作等属性来表示命令有效负载。这包括指定发送者、他们的角色以及其他元数据，例如用户的代理和操作系统。Ziggy 的方法在简单性和灵活性方面独树一帜，对于希望简化数据序列化任务的开发人员来说，它是一种有吸引力的选择。它的设计和应用没有明显的争议。]]></description>
      <guid>https://t.me/hn_summary/111393</guid>
      <pubDate>Sun, 06 Oct 2024 18:01:37 GMT</pubDate>
    </item>
    </channel>
</rss>
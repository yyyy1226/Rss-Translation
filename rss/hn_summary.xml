<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Mon, 30 Sep 2024 02:53:21 GMT</lastBuildDate>
    <item>
      <title>[媒体] 国际码头工人协会 (ILA) 宣布将于 [...] 开始罢工。</title>
      <link>https://t.me/hn_summary/110458</link>
      <description><![CDATA[工会宣布罢工意向，美国东部和墨西哥湾沿岸港口面临关闭
国际码头工人协会 (ILA) 宣布将于 2024 年 10 月 1 日凌晨 12:01 开始罢工，影响所有大西洋和墨西哥湾沿岸港口。由于 ILA-USMX 合同将在 36 小时后到期，谈判陷入停滞，影响了 85,000 名 ILA 成员和 36 个港口的 45,000 名港口工人。ILA 指责美国海事联盟 (USMX) 无视工资停滞，尽管远洋运输公司的利润飙升。此次罢工可能会扰乱 40% 以上的美国集装箱货物，加剧现有的供应链问题。值得注意的是，拜登政府不打算援引《塔夫脱-哈特利法案》进行干预。国际船运管理局将在罢工期间继续处理军用货船和客船。]]></description>
      <guid>https://t.me/hn_summary/110458</guid>
      <pubDate>Mon, 30 Sep 2024 02:53:21 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在 Fediverse 上，我对“承诺”模式有了迟来的认识，它 [...]</title>
      <link>https://t.me/hn_summary/110457</link>
      <description><![CDATA[Go 和我对“承诺”模式的认识
在 Fediverse 上，我对“承诺”模式及其在 Go 中的应用有了迟来的认识。我需要异步执行并按顺序报告结果，但 Go 缺乏内置承诺，需要手动实现。通常，异步工作池使用通道以任何顺序处理完成。但是，我需要对执行 DNS 查找的 Go 程序进行有序报告。在有承诺的环境中，这很简单，但在 Go 中，存在两种替代方案：使用带有序列号的公共通道或为每个请求使用单独的回复通道。我发现后者更简单，尽管创建了许多通道。这种方法可确保有序处理而无需复杂的重组。]]></description>
      <guid>https://t.me/hn_summary/110457</guid>
      <pubDate>Mon, 30 Sep 2024 02:39:14 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：pixvify.com</title>
      <link>https://t.me/hn_summary/110456</link>
      <description><![CDATA[显示 HN：我找到了一个 100% 免费的 AI 换脸网站
标题：显示 HN：我找到了一个 100% 免费的 AI 换脸网站
网站：pixvify.com

发现 Pixvify，一个完全免费的 AI 换脸网站，允许用户创建自定义的 AI 生成照片。只需输入所需照片的描述，并包含与面部特征相关的提示，例如“头像”、“面部焦点”或“棕色头发”。为了提高质量，建议使用“4k”和“照片写实”等术语。用户还可以指定有关身体或姿势的其他细节，以实现他们想要的结果。这款独特的工具提供了一种无需任何费用即可生成高质量、个性化图像的便捷方式。]]></description>
      <guid>https://t.me/hn_summary/110456</guid>
      <pubDate>Mon, 30 Sep 2024 02:12:03 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在 ghuntley.com 上的博客文章“Visual Studio Code 旨在分裂”中，aut [...]</title>
      <link>https://t.me/hn_summary/110455</link>
      <description><![CDATA[Visual Studio Code 的设计初衷是分裂
在 ghuntley.com 上的博客文章“Visual Studio Code 的设计初衷是分裂”，作者深入探讨了围绕 Visual Studio Code (VSCode) 的复杂性和争议。尽管 VSCode 是根据 MIT 许可开源的，但使其得到广泛使用的增值功能是专有的，并由 Microsoft 控制。这为选择 VSCodium 和 OpenVSCodeServer 等开源分支的用户带来了法律风险，因为这些分支无法访问 Microsoft 的市场和遥测数据。作者认为，微软的策略故意破坏生态系统，以保持控制权并推动用户使用其服务，例如 GitHub Codespaces。这种设计引发了人们对开源软件的未来以及使用这些替代方案的公司的法律影响的担忧。该帖子还强调了从产品到服务的更广泛行业趋势，微软引领了这一趋势。（基于 61% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/110455</guid>
      <pubDate>Mon, 30 Sep 2024 01:44:51 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在本期有关在 Rails 中加载代码的系列文章中，我们深入探讨了 Rails 的演变 [...]</title>
      <link>https://t.me/hn_summary/110454</link>
      <description><![CDATA[寻找 Gems：Ruby 的包管理系统如何演变
在本期关于在 Rails 中加载代码的系列文章中，我们将深入探讨 Ruby 包管理系统的演变，重点介绍 gems（Ruby 的库术语）。最初，在 90 年代共享 Ruby 代码很麻烦，需要手动下载和管理 $LOAD_PATH。这种情况在 2003 年随着 RubyGems 的推出而发生了变化，它通过轻松托管、下载和管理 gem 版本简化了流程。RubyGems 还允许指定 gem 版本，从而更容易处理跨多个项目的依赖关系。然而，尽管 RubyGems 有好处，但它也有局限性，为 Ruby 依赖管理的进一步发展铺平了道路，我们将在本系列的下一篇中探讨这一点。 

令人惊讶/巧妙的方面：Ruby 巧妙地将控制权传递给 RubyGems，以动态管理 $LOAD_PATH。

争议：在 RubyGems 出现之前，管理 Ruby 代码的手动且容易出错的过程是开发人员的一大痛点。]]></description>
      <guid>https://t.me/hn_summary/110454</guid>
      <pubDate>Mon, 30 Sep 2024 01:38:47 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在《剥皮代码》一书中，托尔斯滕·鲍尔 (Thorsten Ball) 介绍了“撕碎”代码的概念，这是一种 [...]</title>
      <link>https://t.me/hn_summary/110453</link>
      <description><![CDATA[Skin-Shedding Code – 作者 Thorsten Ball – Register Spill
在“Skin-Shedding Code”中，Thorsten Ball 介绍了“Shredding”代码的概念，这是他在 Zed 学到的一种做法。与涉及细致、渐进式更改的传统重构不同，Shredding 包括代码组件的破坏和完全重写。这种方法涉及删除大量代码并从头开始重建它们，通常会带来更高效、更有效的解决方案。Ball 强调了 Zed 中 Shredding 的惊人频率和文化接受度，并指出其在维护健康、适应性强的代码库方面发挥的作用。这种做法需要信心和经验，因为它涉及打破功能性代码，并保证创建更好的代码。尽管 Zed 的粉碎过程看似混乱，但其实是一个受控的过程，类似于一把精心瞄准的大锤，并且被认为有利于长期的代码质量和创新。]]></description>
      <guid>https://t.me/hn_summary/110453</guid>
      <pubDate>Mon, 30 Sep 2024 01:26:39 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在首席执行官安迪·贾西 (Andy Jassy) 重返亚马逊后，亚马逊员工“愤怒地申请”新工作 [...]</title>
      <link>https://t.me/hn_summary/110452</link>
      <description><![CDATA[亚马逊员工在 RTO 规定后“愤怒地申请”新工作
亚马逊员工在首席执行官安迪·贾西 (Andy Jassy) 颁布“重返办公室 (RTO)”规定后“愤怒地申请”新工作，该规定要求员工每周至少在办公室工作三天。许多员工，比如劳拉，在被聘用时就已经知道远程工作是永久性的。这一突然的政策转变，通过媒体传达不力，导致人们对亚马逊领导层普遍感到沮丧和不信任。员工们认为这项规定是一次不加掩饰的裁员尝试。尽管贾西发出了警告，但许多人仍在寻求其他更灵活的职位，其中一些人已经收到了工作邀请。亚马逊没有回应置评请求。]]></description>
      <guid>https://t.me/hn_summary/110452</guid>
      <pubDate>Mon, 30 Sep 2024 01:16:33 GMT</pubDate>
    </item>
    <item>
      <title>一个国际研究小组对 1,50 个国家进行了首次全面的全球评估 [...]</title>
      <link>https://t.me/hn_summary/110451</link>
      <description><![CDATA[1998 年以来 96% 的气候政策失败
一个国际研究小组对 1998 年至 2022 年期间来自 41 个国家的 1,500 项气候政策措施进行了首次全面的全球评估，结果显示 96% 的政策未能实现有意义的减排。该研究发表在《科学》杂志上，强调只有 4% 的政策导致排放量显著减少 19%，这主要是由于在精心设计的政策组合中加入了税收和价格激励措施。这项研究由波茨坦气候影响研究所和牛津大学等机构领导，强调有效的气候政策需要多种措施的组合，而不是独立的举措。显著的成功包括中国的排放交易体系、英国的煤炭淘汰以及挪威的电动汽车补贴。该研究表明，关注有效的政策可以显著缩小巴黎排放差距。牛津史密斯学院的 Anupama Sen 博士强调，英国​​的政策必须考虑长期利益才能实现零排放目标。建议使用随附的气候政策探索工具来制定有效的转型。

争议：该研究断言 96% 的气候政策失败，这可能被视为有争议的，挑战了过去二十年全球气候努力的有效性。

独特见解：该研究强调，更多的政策并不一定会带来更好的结果；相反，正确的措施组合对于大幅减少排放至关重要。]]></description>
      <guid>https://t.me/hn_summary/110451</guid>
      <pubDate>Mon, 30 Sep 2024 01:01:26 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：nik.art</title>
      <link>https://t.me/hn_summary/110450</link>
      <description><![CDATA[故意犯错的老师
标题：故意犯错的老师
网站：nik.art

Edwards 先生一直努力让三年级学生掌握 100 以内的乘法。有一天，他在黑板上不小心写了“3 x 4 = 16”，促使一名学生 Marvin 纠正了他。这引发了一个想法：如果故意犯错可以鼓励参与，那会怎样？第二天，他故意写了“20 / 5 = 5”，另一名学生 Anna 纠正了他。这种策略彻底改变了他的课堂；学生们积极参与，纠正错误，协作学习。校长也对他印象深刻。Edwards 先生意识到，教学就是要接受错误，共同寻找答案，营造一种支持性的学习环境。]]></description>
      <guid>https://t.me/hn_summary/110450</guid>
      <pubDate>Mon, 30 Sep 2024 01:00:21 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在 brandur.org 上的博客文章“总有一个事件表”中，作者讨论了 [...]</title>
      <link>https://t.me/hn_summary/110449</link>
      <description><![CDATA[事件表永远存在（2022 年）
在 brandur.org 上的博客文章“事件表永远存在”中，作者讨论了 SaaS 产品中事件（或审计日志）表的普遍存在。该文章重点介绍了这些表如何经常成为数据库中最大的表，如 Retool 的 2 TB 表和 Heroku 的 1 TB 表。作者讲述了这些表造成的操作挑战的个人经历，例如 Postgres DELETE 查询超时并导致作业队列不稳定。 Stripe 的事件日志保留的数据远远超过其记录的 30 天，这被认为是另一个效率低下的例子。作者承认在自己的产品中实现了事件日志，但强调高效设计和定期清理的重要性，以避免类似的陷阱。他们主张使用 ULID 进行快速插入、使用适当的数据类型以最小化存储以及自动删除旧事件。该帖子提供了用于批量删除的 SQL 代码，并建议对较大的数据集进行表分区以确保高效的数据管理。

争议：作者批评 Stripe 和 Heroku 早期的设计决策没有实施适当的清理机制，导致运营效率严重低下。

独特/巧妙：使用 ULID 进行快速插入和高效批量删除的详细策略（包括 SQL 代码）展示了一种管理大型事件表的周到方法。]]></description>
      <guid>https://t.me/hn_summary/110449</guid>
      <pubDate>Mon, 30 Sep 2024 00:54:16 GMT</pubDate>
    </item>
    </channel>
</rss>
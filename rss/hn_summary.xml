<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Sat, 31 Aug 2024 09:16:22 GMT</lastBuildDate>
    <item>
      <title>[媒体] 在“构建 Bubbletea 程序”中，作者深入探讨了使用 Bubb [...] 的复杂性。</title>
      <link>https://t.me/hn_summary/106346</link>
      <description><![CDATA[构建 Bubbletea 程序
在“构建 Bubbletea 程序”中，作者深入探讨了使用 Go 的 TUI 框架 Bubble Tea 的复杂性。尽管 Bubble Tea 规模很小，但学习难度很高，作者在开发 Terraform 的终端界面 PUG 时亲身体验了这一点。该博客提供了高效开发、调试和测试 TUI 的实用技巧。关键建议包括通过卸载昂贵的操作来保持事件循环快速运行、将消息转储到文件进行调试、使用实时重新加载进行代码更改以及明智地在模型上使用接收器方法。作者还强调，在并发 Go 例程中无法保证消息顺序，这可能会影响程序行为。该帖子来自 Bubble Tea GitHub 项目的社区讨论和问题，为开发人员提供了丰富的资源。 

令人惊讶/巧妙：作者使用实时重新加载脚本来处理 TUI，类似于 Web 开发实践，这是一种巧妙的改编，可以提高开发效率。（基于 37% 的故事文本的总结。）]]></description>
      <guid>https://t.me/hn_summary/106346</guid>
      <pubDate>Sat, 31 Aug 2024 09:16:22 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 我从事专业程序员近 22 年，我喜欢探索新的工具 [...]</title>
      <link>https://t.me/hn_summary/106345</link>
      <description><![CDATA[闪耀光芒
我从事专业程序员近 22 年，喜欢探索新工具和新语言。随着时间的推移，我逐渐偏爱编程中的“黄金路径”，强调函数式编程、不变性和清晰、小巧的函数。面向对象编程 (OOP) 通常会导致复杂的依赖关系和难以跟踪的错误，因此我更喜欢具有不可变数据和丰富集合库（如 Clojure）的函数式风格。

我还重视结构化并发、强类型支持、良好的构建工具、模式匹配和对 JSON/HTTP 的内置支持。我想使用 VSCode、Emacs 或 NeoVim 等多功能编辑器，并且我欣赏用于内存管理的垃圾收集。

鉴于这些偏好，我发现 TypeScript、Kotlin、Go、Ruby 和 Python 有些不足。然而，Gleam 引起了我的注意，因为它符合我的大部分要求。我在 Gleam 中构建了一个小项目来演示其功能，包括文件解析、并发和 HTTP 使用。代码干净、富有表现力且可测试，尽管它有一些粗糙之处，例如由于 Gleam 处理结果的方式而导致的不必要的“扁平化”。

Gleam 在 Erlang 或 JavaScript 后端上运行，但选择其中一个可能会受到限制。尽管我不是 Erlang 专家，但我发现 Gleam 令人兴奋，值得进一步探索。]]></description>
      <guid>https://t.me/hn_summary/106345</guid>
      <pubDate>Sat, 31 Aug 2024 09:06:14 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 万事达卡公司</title>
      <link>https://t.me/hn_summary/106344</link>
      <description><![CDATA[万事达卡希望消除网上购物中的卡号
万事达卡公司正在加强其消除网上购物中使用信用卡号的举措，以打击欺诈行为。据首席执行官迈克尔·米巴赫 (Michael Miebach) 称，在推出用代币替代卡号的技术十年后，该公司现在每周处理 10 亿笔代币化交易。值得注意的是，万事达卡用了三年时间才实现其第一个 10 亿笔代币化交易，凸显了这项技术的快速采用和成功。此举凸显了万事达卡致力于增强安全性和减少数字支付欺诈的承诺。代币化交易的大幅加速既令人惊讶，也表明人们对这种创新方法的信任度不断提高。]]></description>
      <guid>https://t.me/hn_summary/106344</guid>
      <pubDate>Sat, 31 Aug 2024 08:42:02 GMT</pubDate>
    </item>
    <item>
      <title>C-EDIT 项目是一个适用于 GNU/Linux 的复古风格的终端文本编辑器，用 C 编写，无需 [...]</title>
      <link>https://t.me/hn_summary/106343</link>
      <description><![CDATA[Show HN：使用 C 语言编写的适用于 GNU/Linux 的复古终端文本编辑器 (C-edit)
C-EDIT 项目是一个适用于 GNU/Linux 的复古式终端文本编辑器，使用 C 语言编写，不使用 ncurses 库。它旨在模拟经典 MSDOS EDIT 的外观和感觉，提供简单但实用的文本编辑体验。该项目目前处于 alpha 阶段，包括双屏缓冲区、基本文本用户界面、自动显示大小调整和基本语法突出显示等功能。作者强调，由于该编辑器处于开发状态，因此不应用于编辑重要文件。独特之处包括其动态缓冲区，可实现高效的屏幕处理，并专注于最小化 CPU 使用率。未来计划包括代码清理、附加功能和增强的菜单选项。]]></description>
      <guid>https://t.me/hn_summary/106343</guid>
      <pubDate>Sat, 31 Aug 2024 07:34:40 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 数据库先驱 Mike Stonebraker 在一次突破性的转变中推出了 DBOS（数据库 [...]</title>
      <link>https://t.me/hn_summary/106342</link>
      <description><![CDATA[Stonebraker 试图通过 DBOS 颠覆计算范式
在一次突破性的转变中，数据库先驱 Mike Stonebraker 推出了 DBOS（面向数据库的操作系统），通过在数据库之上运行操作系统来颠覆传统的技术堆栈。DBOS 在 AWS 上推出，获得了 850 万美元的资金，旨在通过消除 Linux、Kubernetes 和其他传统组件来简化系统管理、增强安全性和改进调试。Stonebraker 以其反向观点而闻名，他认为现代 OLTP 数据库的速度足以处理操作系统任务，这受到 Databricks 在管理操作系统状态方面面临的挑战的启发。DBOS 为应用程序提供了独特的“时间旅行”功能，允许用户恢复到以前的状态以进行调试和安全性目的。该项目由麻省理工学院和斯坦福大学开发，有商业版本和开源版本。]]></description>
      <guid>https://t.me/hn_summary/106342</guid>
      <pubDate>Sat, 31 Aug 2024 06:06:15 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 预计到 2050 年，光伏发电将供应瑞士 40% 以上的电力， [...]</title>
      <link>https://t.me/hn_summary/106341</link>
      <description><![CDATA[铁作为氢的廉价存储介质

预计到 2050 年，光伏将供应瑞士 40% 以上的电力，但季节性不平衡带来了挑战。冬季，太阳能不足，需要进口和其他能源。一个有希望的解决方案是从夏季过剩的太阳能中生产氢气，并在冬季将其转换回电能。然而，由于氢气的易燃性和挥发性，氢气的储存存在问题，需要昂贵且耗能的压力容器。苏黎世联邦理工学院的研究人员在 Wendelin Stark 教授的带领下，开发了一种更安全、更便宜的铁储存方法。利用蒸汽熨斗工艺，氢气以铁和水的形式储存，然后在需要时转换回来，类似于给电池充电。这种创新方法最大限度地减少了能源损失并充分利用了废热，使其成为季节性能源储存的独特而巧妙的解决方案。]]></description>
      <guid>https://t.me/hn_summary/106341</guid>
      <pubDate>Sat, 31 Aug 2024 06:01:10 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 伊隆·马斯克的 Boring Company 正在努力实现特斯拉的全自动驾驶 (FSD) [...]</title>
      <link>https://t.me/hn_summary/106340</link>
      <description><![CDATA[埃隆·马斯克的 Boring Company 无法让特斯拉 FSD 在隧道中发挥作用
埃隆·马斯克的 Boring Company 正在努力在其拉斯维加斯隧道中实施特斯拉的全自动驾驶 (FSD) 技术。尽管马斯克大胆宣称自动驾驶对特斯拉的高估值至关重要，但现实世界的表现却明显滞后。Boring Company 的隧道最初设想使用自动电动载人交通工具，目前依靠人工驾驶的特斯拉汽车。考虑到受控的隧道环境缺乏天气和行人等外部变量，这令人惊讶。拉斯维加斯会议中心和游客管理局首席执行官史蒂夫·希尔证实，无人驾驶操作或计划的 68 英里网络扩展没有时间表，但新站正在建设中。]]></description>
      <guid>https://t.me/hn_summary/106340</guid>
      <pubDate>Sat, 31 Aug 2024 06:00:06 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 您是否曾经梦想过骑车沿着蜿蜒的碎石路行驶而不接触路面？</title>
      <link>https://t.me/hn_summary/106339</link>
      <description><![CDATA[大维克碎石路：在未铺砌的道路上穿越维多利亚
您是否曾梦想过骑车沿着蜿蜒的碎石路骑行，而无需接触路面？在澳大利亚维多利亚州，您几乎可以实现这个梦想。使用 OpenStreetMap 数据，我们探索了您可以在未铺砌的道路上穿越该州多远。虽然您无法完全避开铺砌的道路，但您可以从西向东穿越维多利亚，并且只需很少的柏油路。大维克碎石路将带您穿越马利、默里和阿尔卑斯山，全长 1,728 公里，其中只有 30 公里是铺砌的道路。这条路线从未有人骑行过，这对喜欢冒险的骑行者来说是一项诱人的挑战。下载 gpx 文件并尝试一下！]]></description>
      <guid>https://t.me/hn_summary/106339</guid>
      <pubDate>Sat, 31 Aug 2024 06:00:03 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 本月，Servo 推出了一系列新功能和改进。</title>
      <link>https://t.me/hn_summary/106338</link>
      <description><![CDATA[本月 Servo：选项卡式浏览、Windows 爱好者、开发者工具等
本月，Servo 推出了一系列新功能和改进。主要更新包括支持 HTMLDialogElement 的 show()、HTMLFieldSetElement 的 type 属性、 中的文本渲染、border-image 属性和 WAV 音频播放。值得注意的是，Servo 现在支持 structuredClone()、Web Audio 中的 IIRFilterNode、跨源重定向和 crypto.randomUUID() API。已实现对 SpiderMonkey 128、WebRender 0.65、wgpu 22.0 和 Rust 1.80.1 的升级。 Flexbox 增强功能包括“gap”属性、“align-content: stretch”和“flex-direction: column”。Servo-the-browser 现在具有重新设计的工具栏和选项卡式浏览功能。重大错误修复提高了引擎的可靠性，尤其是在 Windows 上。捐款已增加到每月 3077 美元，通过技术指导委员会透明地支持持续开发。

争议：无。

独特/巧妙：引入选项卡式浏览和漂亮的新标签页，以及 Servo 嵌入器注册自定义协议处理程序的能力，显得特别巧妙。]]></description>
      <guid>https://t.me/hn_summary/106338</guid>
      <pubDate>Sat, 31 Aug 2024 05:59:00 GMT</pubDate>
    </item>
    <item>
      <title>在这篇文章中，我讲述了一次技术编程挑战，当时我的任务是编写一个fu [...]</title>
      <link>https://t.me/hn_summary/106337</link>
      <description><![CDATA[Bresenham 的圆绘制算法 (2021)
在这篇文章中，我讲述了一个技术编程挑战，当时我的任务是编写一个函数，使用给定的 draw_pixel(x, y) 方法绘制一个圆。我探索了几种解决方案，最终专注于 Bresenham 的圆绘制算法，如《计算机图形学：原理与实践 (1996)》一书中所述。我将书中的参考实现翻译成 Rust 和 Python，通过使用 Rust 在 HTML5  元素上绘制来解决等宽字体的非正方形纵横比等问题。这篇文章深入探讨了数学基础、对称性考虑和简单的解决方案，强调了效率低下和改进。值得注意的是，算法中采用的8向对称性既巧妙又高效，减少了冗余计算。（根据24%的故事文本总结。）]]></description>
      <guid>https://t.me/hn_summary/106337</guid>
      <pubDate>Sat, 31 Aug 2024 05:36:50 GMT</pubDate>
    </item>
    </channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Tue, 11 Jun 2024 08:36:37 GMT</lastBuildDate>
    <item>
      <title>[媒体] 埃隆·马斯克威胁说，如果苹果整合 O [...]，他将禁止他的公司使用苹果设备。</title>
      <link>https://t.me/hn_summary/94340</link>
      <description><![CDATA[埃隆·马斯克威胁称，如果 OpenAI 集成到操作系统中，他将禁止其设备
埃隆·马斯克威胁称，如果苹果在操作系统层面集成 OpenAI，他将禁止其公司使用苹果设备，称这是“不可接受的安全违规行为”。马斯克表示，如果禁令实施，游客需要将他们的苹果设备存放在法拉第笼中。此前，苹果宣布了新的人工智能功能，并与 OpenAI 合作整合 ChatGPT 技术。马斯克批评苹果没有开发自己的人工智能，并质疑其能否通过 OpenAI 确保安全和隐私。值得注意的是，马斯克与 OpenAI 有着渊源，他于 2015 年共同创立了 OpenAI，后来起诉该公司偏离了最初的使命。此后，他创立了 xAI 与 OpenAI 竞争。]]></description>
      <guid>https://t.me/hn_summary/94340</guid>
      <pubDate>Tue, 11 Jun 2024 08:36:37 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] “死亡互联网理论”认为，互联网上的大部分内容和活动 [...]</title>
      <link>https://t.me/hn_summary/94339</link>
      <description><![CDATA[“互联网死亡理论”
“互联网死亡理论”认为，互联网的大部分内容和活动（包括社交媒体互动）主要由人工智能 (AI) 和机器人生成。该理论认为，人工智能代理创建帖子和图片以在 Facebook、Instagram 和 TikTok 等平台上吸引用户参与。一个奇怪的例子是病毒式传播的“虾耶稣”图片，将甲壳类动物与耶稣基督的刻板描绘融合在一起。虽然这似乎无害，但该理论引发了人们对复杂的宣传和虚假宣传活动的担忧。研究表明，机器人通过传播不可靠的信息显著影响公众舆论，尤其是在关键事件期间。社交媒体巨头正试图解决这种滥用问题，但该理论提醒人们要以怀疑和批判性思维对待在线互动。]]></description>
      <guid>https://t.me/hn_summary/94339</guid>
      <pubDate>Tue, 11 Jun 2024 08:25:29 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在 Meta 的最新公告中，Stefano Fratta 概述了 AI 技术尾部的愿景 [...]</title>
      <link>https://t.me/hn_summary/94338</link>
      <description><![CDATA[Meta 表示，欧洲数据对于文化相关的 AI 至关重要
在 Meta 的最新公告中，Stefano Fratta 概述了专门为欧洲人量身定制的 AI 技术愿景，强调需要使用欧洲用户数据来训练 AI。最初，此公告是通过应用内通知谨慎分享的，没有向用户发送电子邮件，新的隐私政策将于 2024 年 6 月 26 日实施。Meta 旨在开发能够理解欧洲文化、语言和幽默的 AI，但在未经明确同意的情况下使用公开共享的数据是有争议的。选择退出过程很复杂且不方便用户使用，引发了隐私问题。Meta 依赖 GDPR 下的“合法利益”条款来处理 AI 训练的公共数据，这引起了争议，因为它往往偏向于企业利益而不是个人权利。 Meta 认为，这种数据使用对于文化相关的人工智能至关重要，但批评者认为这是数据利用。真正的创新不应该损害基本权利，Meta 需要优先考虑用户赋权和透明的同意流程。将隐私倡导者框定为反对技术进步是有问题的，这造成了隐私和创新之间的虚假二分法。]]></description>
      <guid>https://t.me/hn_summary/94338</guid>
      <pubDate>Tue, 11 Jun 2024 08:21:23 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 苹果 WWDC 2024 拉开帷幕，其 AI 战略获得重大披露，展示了 [...]</title>
      <link>https://t.me/hn_summary/94337</link>
      <description><![CDATA[Apple 的 AI 战略概述
Apple 的 WWDC 2024 以其 AI 战略的重大披露拉开帷幕，展示了 Apple 在 AI 方面的实力，这与怀疑论者的看法相反。Apple 推出了最好的设备模型和自己的数据中心，这些数据中心是从头开始构建的，能够使用 Apple 芯片进行大规模推理。这种垂直整合提高了 Apple 的估值，并对 Nvidia 构成了看跌理由，尤其是如果 Apple 掌握了 Apple 芯片的训练。与 OpenAI 的合作让 OpenAI 爱好者感到失望，独立应用程序发布者面临挑战。Siri 的新功能可能会引发 AI 的另一个“ChatGPT 时刻”。Apple 将其 AI 工作负载分为设备、私有云计算和第三方模型推理，由其操作系统决定执行位置。这一策略让 Apple 能够控制成本、隐私和未来的 AI 发展，从而有可能加速收入和市场定位。值得注意的是，Apple 的服务器端模型几乎与内部训练的 GPT-4o 相当，这表明 Apple 有能力与主要参与者竞争，同时选择保持低调。Siri 的代理功能有望带来免提体验，提高语音输入的使用率，并使 AI 更容易访问，尽管以牺牲应用程序的可发现性和货币化为代价。]]></description>
      <guid>https://t.me/hn_summary/94337</guid>
      <pubDate>Tue, 11 Jun 2024 08:16:12 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 如果你了解我，你可能会说，“天哪克里斯，又是一种新语言？！！！”。</title>
      <link>https://t.me/hn_summary/94336</link>
      <description><![CDATA[探索 Gleam，一种在 BEAM 上的类型安全语言

如果你了解我，你可能会说，“天哪，克里斯，又是一种新语言？！！！”。事实是，这是我发现的唯一一种保持软件工程师动力的方法。一种新的语言意味着一种新的构建和思考方式。在谈到我的手艺时，我试图保持开放的心态。我只想从这次新的体验中获得最大的收获，然后继续前进。在本文中，我将讨论 Gleam，我是如何找到它的，以及为什么我已经爱上了它。


Gleam V1 于 2024 年 3 月 4 日发布。作为一名不同的工程师，我在 2023 年 11 月发现了它，当时我开始对 Elixir 产生了浓厚的兴趣。 Elixir 总是让我有点反感的是它的动态类型。我是一个静态类型人；它解决了我日常工作中很多常见问题，并提供了很酷的好处，例如：

运行时错误更少，因为当你的代码结构出现问题时，编译器会向你大喊大叫。
信任投入生产的东西，因为它得到了老板（编译器）的批准。
带有类型指示的代码通常（并非总是，但仍然经常）更清晰、更容易理解。如果文档不完整或不存在，你仍然可以参考，新工程师可以更快地开始做出贡献。
首先考虑数据结构进行编码，然后实现符合我的思维过程。

无论如何，你明白了，我是一个类型迷。所以，有一天，我在谷歌上搜索“静态类型灵丹妙药”，我在搜索结果中看到了 Gleam。我做了什么？我只是忽略了这件事，继续前进。

为什么？
因为我比以往任何时候都成熟。就像看一样，我对 Gleam 做了尽职调查：采用、用例、版本（它在 v0.something 上），但我并不满意。我认为 Gleam 非常早期，是一个很酷的噱头，一个实验性的玩具，但它留在我的大脑的某个地方，在我放置我可能会接触到的东西的盒子里，但不是现在。

Gleam 带来了什么
快进，现在是 2024 年 3 月 1 日：Gleam 正式推出 V1。我阅读了变更日志，我得到了 SDK 来使用语言和伙计们……氛围是完美的。我开始后悔我有机会在很早的时候参与其中（我知道这很愚蠢），但正如他们（我不知道“他们”是谁）所说，迟做总比不做好。我将介绍我最喜欢的功能，并告诉您我喜欢什么，以及哪些可以改进。

类型和结构
我认为它很漂亮，例如：
类型 Vehicle {
汽车（制造商：字符串，品牌：字符串）
滑板（品牌：字符串）
宇宙飞船（年份：整数）
&gt;


您在这里看到的是 Gleam 自定义类型或记录，其中 Vehicle 是类型的名称，Car、Skateboard 和 Spaceship 是此类型可用的构造函数。这基本上是一个标记联合，或者如果您愿意，也可以是某种枚举，其中每个成员都有自己的一组属性。它的用法如下：
let mycar = Car(&quot;Honda&quot;, &quot;Civic&quot;)

它允许非常酷的结构，例如这种可爱的模式匹配：
fn getdrivingrequirements(vehicule: Vehicle) -&gt; String {
case vehicule {
Car(make, brand) -&gt;
&quot;要驾驶汽车 &quot;
 make
 &quot; &quot;
 brand
 &quot;，您需要驾照。&quot;
Skateboard(brand) -&gt; &quot;任何人都可以骑 &quot;  brand  &quot;滑板！&quot;
Spaceship() -&gt; &quot;您需要成为 NASA 宇航员！&quot;
&gt;
&gt;

让我们花点时间研究一下上面的函数：

getdrivingrequirements 只接受一个 Vehicle 类型参数并返回一个字符串。Gleam 的编译器和 LSP 都会让您知道是否不遵守任何这些条件。在 Gleam 中指定函数返回的内容是可选的；由于类型推断，Gleam 无论如何都会理解它。在函数主体中，您可以看到案例结构。这就是您执行模式匹配的方式，它本质上是一种类固醇上的开关控制。使用案例，如果特定模式与给定变量匹配，则可以执行代码路径。您利用这种技术的深度真是太疯狂了。在我的例子中，我检查了 vehicle 变量的每个可能的构造函数。再一次，太]]></description>
      <guid>https://t.me/hn_summary/94336</guid>
      <pubDate>Tue, 11 Jun 2024 08:15:00 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 埃瓦里斯特·伽罗瓦在与数学家致命决斗前夕写下的最后数学遗嘱 [...]</title>
      <link>https://t.me/hn_summary/94335</link>
      <description><![CDATA[伽罗瓦的最后数学遗嘱
埃瓦里斯特·伽罗瓦的最后数学遗嘱写于 1832 年 5 月 29 日致命决斗前夕，本文以英文翻译形式呈现。伽罗瓦预见到了自己的死亡，在写给他的朋友奥古斯特·谢瓦利埃的一封信中详细描述了他关于自由基方程可解性的开创性工作。尽管谢瓦利埃于 1832 年 9 月努力发表这封信，但最初并未引起注意。直到 1843 年，刘维尔才向数学界强调了伽罗瓦的解决方案，伽罗瓦论文的完整发表一直推迟到 1846 年。伽罗瓦的工作后来被柯西等人澄清，最终因其对群论和方程论的深远影响而获得认可。遗嘱包括伽罗瓦对群的正确分解和方程可用根式解的条件的探索，以及他对椭圆函数的积分函数和模方程的见解。他的思想虽然最初被忽视，但已成为现代数学的基础。（基于 76% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/94335</guid>
      <pubDate>Tue, 11 Jun 2024 08:12:51 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在墨西哥米却肯州的山区高地，切兰镇已经成为一个独特的 [...]</title>
      <link>https://t.me/hn_summary/94334</link>
      <description><![CDATA[墨西哥反鳄梨民兵组织内部
在墨西哥米却肯州的山区高地，切兰镇已成为激进环保主义的独特堡垒，抵制利润丰厚但破坏生态的鳄梨产业。十三年前，居民驱逐了腐败官员和卡特尔组织，以保护他们的本土松树林不被砍伐用于种植鳄梨。他们成立了一个自治委员会，禁止政党，并启动了重新造林和先进的水资源管理计划。尽管鳄梨贸易蓬勃发展，导致该地区出现暴力和环境恶化，但切兰仍然是一个独立地区，坚决保护其自然资源。这种激进的生态民主是当地抵抗强大农业利益的有争议且令人惊讶的典范。 （根据 53% 的故事文本进行总结。）]]></description>
      <guid>https://t.me/hn_summary/94334</guid>
      <pubDate>Tue, 11 Jun 2024 08:04:38 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] DuckDB 是一个针对数据分析进行优化的单文件 SQL 数据库，通常经过量化评估 [...]</title>
      <link>https://t.me/hn_summary/94333</link>
      <description><![CDATA[DuckDB 不仅仅是快
DuckDB 是一个针对数据分析进行了优化的单文件 SQL 数据库，通常对其速度进行定量评估。然而，作者认为，可用性对于生产力来说同样重要，甚至更重要。DuckDB 在开发人员人体工程学、处理大型数据集以及易于安装和使用方面表现出色。它支持直接从 Web 上的 Parquet 和 CSV 文件查询数据，而无需先创建表，并且它提供广泛的 SQL 支持，包括窗口函数。独特的功能包括用于慢速查询的进度条以及与 Python 集成以进行数据框样式编程。与许多数据框库不同，DuckDB 还支持大于内存的数据集。此外，它可以通过 WebAssembly (WASM) 直接在浏览器中运行，提供功能齐全的 SQL 环境，而无需依赖服务器。虽然它不能像 Apache Spark 那样扩展到数千台机器，但它对于单个数据分析任务非常有效，使其成为许多用例的理想替代方案。

令人惊讶/聪明：DuckDB 能够使用 WASM 在浏览器中完全运行，并且其进度条功能可用于慢速查询。

有争议：作者认为可用性改进应该优先于性能优化，并且批评使用 Apache Spark 等工具进行扩展所涉及的复杂性。（基于 91% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/94333</guid>
      <pubDate>Tue, 11 Jun 2024 07:49:17 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] lcamt​​uf.substack.com 最近发布了一篇题为“Spotify：放弃一些假节拍”的文章，[...]</title>
      <link>https://t.me/hn_summary/94332</link>
      <description><![CDATA[Spotify：消除一些假节拍
在lcamt​​uf.substack.com上最近发表的一篇题​​为“Spotify：消除一些假节拍”的文章中，作者回顾了之前的预测，即大多数互联网交流将在十年或二十年内变成假的。这不是悲观主义，而是对人类互动的局限性与机器生成内容的无限可扩展性的认识。作者讲述了在 ChatGPT 发布之前在亚马逊上发现一本机器生成的书，并指出随后网上出现了大量人工智能生成的书籍、文章和图片。令人惊讶的是，生成音乐正在兴起，Suno 等平台可以根据简单的提示创作歌曲。作者在 Spotify 上遇到了这种人工智能生成的音乐，觉得它们平淡无奇。经过调查，该乐队的 YouTube 个人资料显示了库存镜头和人工智能生成的图像，证实了其非人类来源。尽管 Spotify 的摘要中简要提到了人工智能，但作者强调了秘密人工智能音乐的日益存在，它们比以往任何时候都更有效地将我们的感官货币化。]]></description>
      <guid>https://t.me/hn_summary/94332</guid>
      <pubDate>Tue, 11 Jun 2024 07:34:05 GMT</pubDate>
    </item>
    <item>
      <title>在我的最新文章中，我深入探讨了 Obsidian 如何彻底改变了我的生产力并带来了 [...]</title>
      <link>https://t.me/hn_summary/94331</link>
      <description><![CDATA[从混乱到清晰：我与 Obsidian 的旅程
在我的最新文章中，我深入探讨了 Obsidian 如何彻底改变了我的工作效率，并为我混乱的工作流程带来了结构。作为一个由内向型转变为外向型的企业家，我很难应对上下文切换和不断涌入的信息。我需要一个能够提供清晰度、第二个大脑和强大任务系统的工具。在尝试了 Notion、Evernote 和 Google Keep 等众多工具后，我发现 Obsidian 与 SyncThing 和 NeuraCache 相结合是完美的解决方案。我的工作流程包括使用 i3wm 的便笺簿进行快速访问、维护任务列表、每日笔记、每周评论以及利用抽认卡进行间隔重复。Obsidian 的 Canvas 中的有向无环图 (DAG) 可帮助我有效地可视化和管理我的任务。这种设置大大减轻了我的压力，提高了我的注意力。

令人惊讶/巧妙的元素：在 Obsidian 的 Canvas 中使用 DAG 来可视化任务和依赖关系是一种管理复杂工作流程的独特而巧妙的方法。

有争议的元素：这篇文章巧妙地批评了 Notion 和 Evernote 等流行的生产力工具的重大缺点，这可能会引发忠实用户的争论。]]></description>
      <guid>https://t.me/hn_summary/94331</guid>
      <pubDate>Tue, 11 Jun 2024 07:24:56 GMT</pubDate>
    </item>
    </channel>
</rss>
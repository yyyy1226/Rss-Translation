<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Tue, 02 Jul 2024 15:18:11 GMT</lastBuildDate>
    <item>
      <title>[媒体] 特斯拉 (NASDAQ: TSLA) 公布了其 2024 年第二季度的交付和生产数据，超过了 [...]</title>
      <link>https://t.me/hn_summary/97708</link>
      <description><![CDATA[特斯拉公布第二季度交付和生产数据，超出预期
特斯拉 (NASDAQ: TSLA) 公布了其 2024 年第二季度的交付和生产数据，超过了华尔街的预期。市场普遍预期交付量约为 438,019 辆汽车，但特斯拉交付了 443,956 辆汽车。这比 2023 年第二季度的 466,000 辆有所下降。特斯拉本季度生产了 410,831 辆汽车，并实现了有史以来最高的季度储能产品部署量，达到 9.4 GWh，大大超过了第一季度 4.053 MWh 的纪录。尽管取得了这些成就，但实现今年 200 万辆汽车的交付目标仍然雄心勃勃。特斯拉股价在盘前交易中上涨 9.71%，达到每股近 220 美元。第二季度的财务数据将于 2024 年 7 月 23 日公布。如有意见或疑问，请联系 joey@teslarati.com 或 Twitter 上的 @KlenderJoey。]]></description>
      <guid>https://t.me/hn_summary/97708</guid>
      <pubDate>Tue, 02 Jul 2024 15:18:11 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Ant Design 是一种企业级 UI 设计语言和 React UI 库，专为 [...]</title>
      <link>https://t.me/hn_summary/97707</link>
      <description><![CDATA[Ant Design – 第二受欢迎的 React UI 框架
Ant Design 是一种企业级 UI 设计语言和 React UI 库，专为 Web 应用程序设计。它提供了一套全面的高质量 React 组件，以 TypeScript 编写，用于可预测的静态类型，并支持多种语言的国际化。主要功能包括强大的主题自定义、服务器端渲染以及与现代浏览器和 Electron 的兼容性。该项目以其广泛的设计资源、开发工具和基于 CSS-in-JS 的主题自定义而脱颖而出。通过 npm、yarn 或 pnpm 即可轻松安装。该项目鼓励社区贡献，并为合作者提供详细的开发说明和支持。]]></description>
      <guid>https://t.me/hn_summary/97707</guid>
      <pubDate>Tue, 02 Jul 2024 15:18:07 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在我的博客上，我探索了复制常见的漫画和动画效果——从 [...] 辐射出线条。</title>
      <link>https://t.me/hn_summary/97706</link>
      <description><![CDATA[CSS 惊喜漫画线
在我的博客上，我探索了如何仅使用 CSS 复制常见的漫画和动画效果——从角色的脸上放射出线条以表示惊讶或震惊。虽然通常使用  或 SVG 实现，但我确认使用 CSS 也可以实现，尽管对于生产使用来说效率不高。该效果涉及两个元素：图像及其容器，使用 ::before 和 ::after 伪元素绘制线条。我利用重复圆锥渐变和 CSS 自定义属性来控制线条分离、厚度和渐变的中心点。尽管效率低下，但这个项目是 CSS 背景、自定义属性和动画方面的有趣练习。对于更优化的方法，使用 GIF 可能会更好。查看我在 CodePen 上的演示和另一篇关于使用 CSS 创建旧照片效果的文章。]]></description>
      <guid>https://t.me/hn_summary/97706</guid>
      <pubDate>Tue, 02 Jul 2024 15:15:03 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在文章“利用第五个忙碌的海狸，研究人员接近计算的极限”中[...]</title>
      <link>https://t.me/hn_summary/97705</link>
      <description><![CDATA[借助第五个 busy beaver，研究人员接近计算的极限
在《Quanta Magazine》上发表的文章《借助第五个 busy beaver，研究人员接近计算的极限》中，作者记录了研究人员解决 Busy Beaver Challenge 的历程，这是一个突破计算界限的问题。故事从 Ligocki 在柏林的一次难忘的遭遇开始，他在那里与 Marxen 讨论了“封闭磁带语言方法”，这项技术后来被社区复兴和改进。这项挑战得到了不同个人的贡献，包括自学成才的程序员 Maja Kądziołka，他使用 Coq 来验证证明，以及一位名叫 mxdys 的神秘贡献者，他最终完成了 BB(5) 的 Coq 证明。文章强调了该项目的合作性质以及 BB(6) 的潜在不可逾越性，类似于 Collat​​z 猜想。这个故事强调了驱动这些研究人员的不可预测性和热情，其中一些人转向新的追求，而其他人则继续致力于挑战。]]></description>
      <guid>https://t.me/hn_summary/97705</guid>
      <pubDate>Tue, 02 Jul 2024 15:08:54 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 用于 AI 和 HPC 应用的现代 GPU 受到高带宽计算资源量的限制 [...]</title>
      <link>https://t.me/hn_summary/97704</link>
      <description><![CDATA[GPU 现在可以使用 PCIe 连接内存或 SSD 来提升 VRAM 容量
用于 AI 和 HPC 应用的现代 GPU 受到设备内置高带宽内存 (HBM) 数量限制，从而限制了其性能。但是，新技术现在允许通过 PCIe 总线扩展 GPU 内存容量，包括使用 SSD。在韩国 KAIST 的支持下，Pamnesia 开发了一种低延迟 CXL IP，可使用 CXL 内存扩展器实现这种扩展。这一点至关重要，因为 AI 数据集变得越来越复杂，需要更多的内存。Pamnesia 的解决方案 CXL-Opt 比现有方法表现出显着的性能改进，减少了执行时间和延迟。然而，AMD 和 Nvidia 等大公司是否采用 CXL 仍不确定。争议在于这些行业巨头是否会采用Pamnesia的技术还是开发自己的解决方案。]]></description>
      <guid>https://t.me/hn_summary/97704</guid>
      <pubDate>Tue, 02 Jul 2024 15:05:48 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Karpor 是一个开源项目，旨在通过高级搜索增强 Kubernetes，[...]</title>
      <link>https://t.me/hn_summary/97703</link>
      <description><![CDATA[显示 HN：Karpor – Kubernetes 智能
Karpor 是一个开源项目，旨在通过高级搜索、洞察和 AI 功能增强 Kubernetes。它充当 Kubernetes Explorer/Dashboard，提供跨多个云的 Kubernetes 集群的可见性，从而使开发人员能够更快地部署。主要功能包括自动资源同步、强大的查询功能、合规性治理、资源拓扑视图和即将推出的成本优化工具。Karpor 的独特之处包括用于直观 Kubernetes 交互的自然语言操作和用于管理优化的 AI 驱动洞察。使用 Helm 安装非常简单，该项目鼓励社区贡献以扩展其功能。提供详细的文档和贡献指南。]]></description>
      <guid>https://t.me/hn_summary/97703</guid>
      <pubDate>Tue, 02 Jul 2024 15:04:43 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 项目“8cc.vim：纯 Vim 脚本 C 编译器”是 8cc C 编译器的 Vim 脚本端口 [...]</title>
      <link>https://t.me/hn_summary/97702</link>
      <description><![CDATA[8cc.vim：纯 Vim 脚本 C 编译器
“8cc.vim：纯 Vim 脚本 C 编译器”项目是 8cc C 编译器的 Vim 脚本端口，基于 ELVM（Eso Lang 虚拟机）架构构建。其目的是将 C 代码编译成 Vim 脚本，让 Vim 评估生成的代码。这个项目的独特之处在于它使用定制的 8cc 前端和 ELVM 后端将 C 代码转换为 Vim 脚本。虽然它比传统编译器慢得多，但它展示了在 Vim 中完全运行 C 编译器的能力。该项目是跨平台的，可在 Linux、OS X 和可能的 Windows 上运行。它主要是一个玩具项目，并根据 MIT 许可证获得许可。]]></description>
      <guid>https://t.me/hn_summary/97702</guid>
      <pubDate>Tue, 02 Jul 2024 15:02:39 GMT</pubDate>
    </item>
    <item>
      <title>问 HN：您使用什么工具来快速构建网站/应用程序？</title>
      <link>https://t.me/hn_summary/97701</link>
      <description><![CDATA[问 HN：您使用什么工具快速构建网站/应用程序？
标题：问 HN：您使用什么工具快速构建网站/应用程序？
网站：news.ycombinator.com

我正在编制一份用于快速创建网站、Web 应用程序、移动应用程序和桌面应用程序的工具列表。请分享您当前使用或推荐的工具，以便我可以探索它们。谢谢！]]></description>
      <guid>https://t.me/hn_summary/97701</guid>
      <pubDate>Tue, 02 Jul 2024 14:57:33 GMT</pubDate>
    </item>
    <item>
      <title>Meetup.com 宣布大幅提价，将六个月的订阅费提高 [...]</title>
      <link>https://t.me/hn_summary/97700</link>
      <description><![CDATA[Meetup 在不到一个月的通知时间内将订阅价格提高三倍
Meetup.com 宣布大幅涨价，在不到一个月的通知时间内将六个月的订阅费从 29 美元提高到 99 美元。这一突然变化让包括我在内的许多社区组织者陷入了困境。我的非营利社区拥有两千多名成员，其蓬勃发展的部分原因是 Meetup.com 的受欢迎程度。然而，如此大幅的价格上涨威胁到我们继续使用该平台的能力。突然大幅涨价引发了用户的争议，他们觉得新的定价结构出乎意料，经济压力很大。]]></description>
      <guid>https://t.me/hn_summary/97700</guid>
      <pubDate>Tue, 02 Jul 2024 14:56:30 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 标题：我们使用 WebCodecs API 将渲染速度提高了 70 倍</title>
      <link>https://t.me/hn_summary/97699</link>
      <description><![CDATA[我们使用 WebCodecs API 将渲染速度提高了 70 倍
标题：我们使用 WebCodecs API 将渲染速度提高了 70 倍

网站：re.video

工程

我们开始探索 WebCodecs API 以实现更快的渲染 - 在一周内发布两个版本，我们能够将速度提高 70 倍！💡 Revideo 是一个用于程序化视频编辑的开源 TypeScript 框架。它允许您使用代码创建视频模板并通过 API 渲染它们。

两周前，渲染速度是 Revideo 面临的最大问题之一。如果不跨无服务器函数并行执行渲染作业，渲染视频所需的时间通常太长而无法投入生产。幸运的是，我们的 Show HN 上的一条评论鼓励我们更深入地研究 WebCodecs API。这样做，我们能够实现高达 70 倍的渲染速度！

我们的渲染管道中的瓶颈是什么？

Revideo 基于 Motion Canvas，它允许人们使用生成器函数和 HTML Canvas API 定义动画。生成器函数中的每个收益都对应于视频中的一帧。以前，该管道的两个部分占用了大部分时间：

1. 解码  标签中使用的视频：我们最初使用 HTMLVideoElements，速度很慢。切换到 Ffmpeg 提取器可以提高速度，但对于大文件仍然存在问题。
2. 通过 canvas.toBlob() 将帧传递给 Ffmpeg 编码器：此过程很慢，尤其是对于 4K 帧，每帧最多需要 500 毫秒。

加速 1 (v0.4.3)：使用 WebCodecs API 解码视频 💨

将我们的 Ffmpeg 帧提取器替换为基于 WebCodecs API 和 mp4box.js 的提取器，可使速度提高 10 倍。通过移除 websocket 连接并将更多工作转移到浏览器，这也简化了我们的项目结构。

Speedup 2 (v0.4.4)：使用 WASM 🏎️ 编码视频

我们通过使用 WebAssembly 实现直接在浏览器中编码视频来解决缓慢的 toBlob() 操作。WebCodecs API 允许我们直接从画布元素创建 VideoFrame 对象，我们将其与 VideoEncoder 类一起使用。这消除了 toBlob() 的漫长等待时间，为我们带来了另一次巨大的加速。

我们能实现完全客户端渲染吗？

虽然这些变化将许多操作转移到了浏览器，但由于两个原因，完全客户端渲染目前还无法实现：
1. 音频处理仍然由 Ffmpeg 处理：这不会影响渲染速度，但需要转移到浏览器。
2. 浏览器兼容性：WebCodecs API 仅在 Chrome 中得到完全支持，这对 Safari 或 Firefox 用户来说是一个问题。

争议：依赖 Chrome 获得完整的 WebCodecs API 支持可能会被视为有争议的，因为它限制了跨浏览器兼容性。

独特/巧妙：使用 WebAssembly 和 WebCodecs API 绕过视频渲染中的传统瓶颈是一种聪明而创新的方法。]]></description>
      <guid>https://t.me/hn_summary/97699</guid>
      <pubDate>Tue, 02 Jul 2024 14:53:26 GMT</pubDate>
    </item>
    </channel>
</rss>
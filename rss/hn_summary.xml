<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Fri, 04 Oct 2024 03:28:19 GMT</lastBuildDate>
    <item>
      <title>[媒体] Nim 团队很高兴地宣布发布 Nim 版本 2.2.0 和 2.0.10。</title>
      <link>https://t.me/hn_summary/111081</link>
      <description><![CDATA[Nim 2.2.0 和 2.0.10 版发布
Nim 团队很高兴地宣布发布 Nim 2.2.0 和 2.0.10 版。2.2.0 版是我们最新的稳定版本，包含近 1000 个新提交，增强了 ORC 内存管理、语言功能和编译器稳定性。值得注意的是，它解决了泛型和静态类型的长期问题，并改进了 C++ 互操作和 JS 后端功能。该版本还引入了 --experimental:vtables 和 --experimental:openSym 等实验性功能。同时，2.0.10 版作为企业用户的补丁，解决了许多错误。 2.2.0 的一个独特之处在于它包含 Nimble 0.16.1 和可选的 SAT 求解器。安装时，请确保您的 choosenim 已更新至 0.8.5 或更高版本。（基于 27% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/111081</guid>
      <pubDate>Fri, 04 Oct 2024 03:28:19 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在这篇博文中，Aqua Nautilus 的研究人员揭露了“perfctl”恶意软件，这是一种复杂的 [...]</title>
      <link>https://t.me/hn_summary/111080</link>
      <description><![CDATA[Perfctl：一种针对 Linux 服务器的隐秘恶意软件
在这篇博文中，Aqua Nautilus 的研究人员发现了“perfctl”恶意软件，这是一种针对 Linux 服务器的复杂威胁，利用了超过 20,000 个错误配置。这种恶意软件活跃了 3-4 年，难以捉摸且持久，使用 rootkit、Unix 套接字和 TOR 进行隐秘通信。它巧妙地伪装成合法进程，使检测变得复杂。值得注意的是，它利用 Polkit 漏洞 (CVE-2021-4043) 进行特权提升。该恶意软件的主要影响是资源劫持、运行 Monero 加密货币矿工，有时还会运行代理劫持软件。令人惊讶的是，尽管论坛讨论广泛，但直到最近才有正式报告。该恶意软件的欺骗性命名和逃避策略凸显了其复杂性以及它对 Linux 服务器安全带来的挑战。（基于 32% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/111080</guid>
      <pubDate>Fri, 04 Oct 2024 03:28:16 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在正在发生的 H5N1 禽流感疫情中，废水测序成为关键的战略举措 [...]</title>
      <link>https://t.me/hn_summary/111079</link>
      <description><![CDATA[对废水进行测序可能是控制 H5N1 禽流感疫情的关键
在持续的 H5N1 禽流感疫情中，废水测序成为追踪和控制病毒的关键策略，尤其是在奶牛场中。尽管没有确认人际传播，但最近密苏里州发生的一起病例凸显了潜在的危险。由于经济和移民问题，农场检测有限，加剧了病毒的传播。科罗拉多州对奶牛群的强制性检测发现了感染，但其他州因行业反对而犹豫不决。对农场附近的废水进行测序可以确定病毒的存在和突变，为直接检测提供了一种非侵入性替代方法。德克萨斯州流行病公共卫生研究所的成功试点证明了这种方法的潜力。然而，挑战包括成本高、需要制定协议以及了解废水检测的局限性。疫情的紧迫性要求采取创新方法来预防可能发生的人类流行病。]]></description>
      <guid>https://t.me/hn_summary/111079</guid>
      <pubDate>Fri, 04 Oct 2024 03:27:12 GMT</pubDate>
    </item>
    <item>
      <title>Go 并发与……</title>
      <link>https://t.me/hn_summary/111078</link>
      <description><![CDATA[Go 并发与 RxJS
在本文中，我们探讨了 Go 和 RxJS 中并发的实现，重点是通过管道处理图像。Go 版本利用 goroutines 和通道来处理图像解码，根据设置有效地过滤和重用解码器。这种方法凸显了 Go 在以最小开销处理并发任务方面的优势。另一方面，RxJS 实现利用可观察对象和运算符（如 mergeMap 和 scan）来实现类似的功能。RxJS 管道强调函数式编程范式，展示了其优雅处理异步数据流的能力。一个值得注意的方面是两种实现中解码器的巧妙重用，通过避免冗余操作来优化性能。文章巧妙地强调了 Go 的命令式并发模型与 RxJS 的声明式方法之间的对比，并深入了解了它们各自的优势。]]></description>
      <guid>https://t.me/hn_summary/111078</guid>
      <pubDate>Fri, 04 Oct 2024 03:24:07 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] SiteOne Crawler 是一个功能强大的工具，旨在生成网页的静态离线版本 [...]</title>
      <link>https://t.me/hn_summary/111077</link>
      <description><![CDATA[SiteOne Crawler – 没有用户的强大工具
SiteOne Crawler 是一款功能强大的工具，旨在生成网站的静态离线版本，让用户无需互联网连接或网络服务器即可存储和浏览网站。此工具对于存档目的和高可用性场景特别有用，其中定期更新的静态版本可以集成到灾难恢复计划中。用户可以查看 docs.astro.build、netlify.com 和 nextjs.org 等网站的实际导出结果，结果显示导出结果中包含所有元素（包括第三方资产）。尽管该工具功能强大，但令人惊讶的是缺乏用户群，这引发了人们对其采用和实用性的质疑。]]></description>
      <guid>https://t.me/hn_summary/111077</guid>
      <pubDate>Fri, 04 Oct 2024 03:23:04 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 自 2021 年以来，一种隐秘的恶意软件已经感染了数千个 Linux 系统，主要 [...]</title>
      <link>https://t.me/hn_summary/111076</link>
      <description><![CDATA[自 2021 年以来，数千个 Linux 系统被隐秘的恶意软件感染
自 2021 年以来，一种隐秘的恶意软件已经感染了数千个 Linux 系统，主要针对服务器以劫持其资源进行加密货币挖掘。 CentOS subreddit 上的一位管理员分享了他们的经验，指出这种被识别为 perfcc 和 perfctl 的恶意软件巧妙地通过在通过 SSH 或控制台访问时停止活动来逃避检测，只有在用户注销后才会恢复。 尽管尝试将其删除，但该恶意软件仍然存在，通常在重新启动后重生。 该恶意软件利用漏洞或错误配置来下载其有效负载，将其伪装成合法的 Linux 进程。值得注意的是，它利用了 Gpac 框架中已知的特权提升漏洞 CVE-2021-4043，这凸显了及时修补的重要性。这一广泛存在的问题在全球各个论坛上引发了讨论，凸显了对抗这种复杂威胁的挑战。]]></description>
      <guid>https://t.me/hn_summary/111076</guid>
      <pubDate>Fri, 04 Oct 2024 03:22:01 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在本文中，科学史学家 John van Wyhe 解答了人们常见的误解 [...]</title>
      <link>https://t.me/hn_summary/111075</link>
      <description><![CDATA[达尔文不是无神论者，他没有说人类是从猴子进化而来的
在本文中，科学史学家约翰·范·怀赫 (John van Wyhe) 解答了人们对查尔斯·达尔文的常见误解。与普遍看法相反，达尔文在访问加拉帕戈斯群岛期间并没有成为进化论者；他对进化的理解是在他回来后逐渐形成的。他的开创性著作的标题经常被误称为“物种起源”，但实际上是“物种起源”，关注的是所有物种的进化，而不仅仅是人类。达尔文从未声称人类是从猴子进化而来的；相反，他认为人类、猿和猴子有一个共同的祖先。此外，达尔文不是无神论者；他是不可知论者，随着时间的推移，他已经远离了基督教。关于他临终皈依的错误引述和神话也被揭穿。文章强调了查阅达尔文原著的重要性，可从 darwin-online.org.uk 获取，以避免延续这些神话。]]></description>
      <guid>https://t.me/hn_summary/111075</guid>
      <pubDate>Fri, 04 Oct 2024 03:21:58 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在“证据面试”中，我讨论了公司在招聘方面面临的挑战[...]</title>
      <link>https://t.me/hn_summary/111074</link>
      <description><![CDATA[面试以寻找证据
在“面试以寻找证据”一文中，我讨论了公司在招聘优秀候选人时面临的挑战以及面试流程的不一致。凭借我在各个岗位上的丰富经验，我强调了基于证据的面试对于做出明智的招聘决策的重要性。这种方法涉及收集四种类型的证据：经验证据、假设证据、意见证据和资历证据。通过关注事实观察而不是主观印象，我们可以确保公平且合理的招聘流程。我主张配对面试，以增强观察和互动动态。最终，为候选人创造一个真实且支持性的环境至关重要。值得注意的是，我感谢 John Hundreiser 和 Suzi Edwards-Alexander 对我的方法的影响。]]></description>
      <guid>https://t.me/hn_summary/111074</guid>
      <pubDate>Fri, 04 Oct 2024 03:15:53 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 如果你像我一样是一个 Vim 爱好者，你可能会花费无数的时间来调整你的 c [...]</title>
      <link>https://t.me/hn_summary/111073</link>
      <description><![CDATA[我为 Vim 添加了有趣的随机 ASCII 艺术欢迎屏幕
如果您和我一样是 Vim 爱好者，您可能会花费无数个小时调整配置文件以完善您的设置。今天，我将分享一种有趣的方法，通过随机 ASCII 艺术欢迎屏幕增强您的 Vim（或 Neovim）体验。每次打开 Vim 时，您都会看到由随机 ASCII 字符传递的新励志名言。本指南将引导您使用 vim-plug 安装和自定义 vim-startify 插件。该过程涉及将 ASCII 艺术和引号添加到您的配置中，确保每次都有独特的启动体验。无论您使用的是 Linux、macOS 还是使用适用于 Linux 的 Windows 子系统，这些说明都将帮助您入门。巧妙的部分是随机选择 ASCII 艺术，为您的编码程序增添了令人愉快的惊喜。使用书签和快捷方式进一步自定义 Vim 设置，以便快速访问配置文件。感谢您加入我的自定义之旅！]]></description>
      <guid>https://t.me/hn_summary/111073</guid>
      <pubDate>Fri, 04 Oct 2024 03:14:48 GMT</pubDate>
    </item>
    <item>
      <title>为什么 Lisp 使用 cons 单元？</title>
      <link>https://t.me/hn_summary/111072</link>
      <description><![CDATA[Lisp 为什么使用 cons 单元？（1998 年）
在 1998 年的这次讨论中，Erik Naggum 热情地捍卫了 Lisp 中 cons 单元的使用，强调了它们作为成功的抽象数据类型 (ADT) 的作用。他认为 cons 单元提供了一个简单的接口和复杂但高效的实现，允许灵活的列表操作。Naggum 批评其他语言由于目光短浅的用户和过于专注于强类型的设计者而错误处理列表。他赞扬了 John McCarthy 的创新设计，该设计允许列表是异构的并且可以高效地操作。Naggum 驳斥了对是多余的观点，强调了 Lisp 列表抽象的出色之处，并批评了那些低估它的人。争议在于他对其他编程语言及其用户的强烈批评，以及他对过于简单的实现的蔑视。]]></description>
      <guid>https://t.me/hn_summary/111072</guid>
      <pubDate>Fri, 04 Oct 2024 03:14:45 GMT</pubDate>
    </item>
    </channel>
</rss>
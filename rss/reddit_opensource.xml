<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Fri, 31 Jan 2025 15:21:02 GMT</lastBuildDate>
    <item>
      <title>美国阻止这些国家提供开源“帮助”</title>
      <link>https://www.reddit.com/r/opensource/comments/1iedkur/us_blocks_open_source_help_from_these_countries/</link>
      <description><![CDATA[        提交人    /u/CrankyBear   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1iedkur/us_blocks_open_source_help_from_these_countries/</guid>
      <pubDate>Fri, 31 Jan 2025 12:23:11 GMT</pubDate>
    </item>
    <item>
      <title>哪种开源模型/方法适合我？</title>
      <link>https://www.reddit.com/r/opensource/comments/1iecdmy/which_opensource_modelapproach_is_right_for_me/</link>
      <description><![CDATA[我目前正在开发一款消费产品。我一直是开源运动的粉丝（并从中受益），所以我想让这款产品的某些方面保持开源和对黑客友好。 在我看来，这看起来像是发布带有黑客友好许可证的固件，并发布一些细节，如引脚分布等。而且，可能启用通过 USB 端口侧载程序的简单方法。 我有两个主要担忧：  产品责任和安全会发生什么？这款产品有一个高功率（1kW）加热器，如果使用不当可能会有潜在危险。如果用户修改固件并陷入不安全的情况，谁来承担责任？这是我反对开源的最大障碍。 虽然我确实希望黑客能够破解这款产品供个人使用，但我也想防止廉价的仿制品蚕食已经存在的小众市场。当然，物理硬件不是开源的，但逆向工程却很容易。是否有开源许可证可以防止已发布的固件被商业重复使用？  你对此有何看法？你能给我什么建议吗？ 有没有产品或公司在硬件商业环境中成功平衡开源软件生态系统的例子？    提交人    /u/WEkigai   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1iecdmy/which_opensource_modelapproach_is_right_for_me/</guid>
      <pubDate>Fri, 31 Jan 2025 11:06:17 GMT</pubDate>
    </item>
    <item>
      <title>YC 想要开源 AI 公司，这让我开始思考——为什么开源对 VC 来说有意义？</title>
      <link>https://www.reddit.com/r/opensource/comments/1iec9ed/yc_wants_opensource_ai_companies_and_it_got_me/</link>
      <description><![CDATA[        由    /u/omnisvosscio  提交  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1iec9ed/yc_wants_opensource_ai_companies_and_it_got_me/</guid>
      <pubDate>Fri, 31 Jan 2025 10:58:35 GMT</pubDate>
    </item>
    <item>
      <title>寻找用于将 MQTT 与通知服务集成的开源工具或 Golang 库</title>
      <link>https://www.reddit.com/r/opensource/comments/1iec4uu/looking_for_open_source_tools_or_golang_libraries/</link>
      <description><![CDATA[大家好， 我有一个用例，我之前在集群中运行了一个 MQTT 服务。Telegraf 连接到 MQTT，Prometheus 连接到 Telegraf，Alertmanager 连接到 Prometheus。根据 Prometheus 中定义的规则，警报被发送到 Alertmanager，然后 Alertmanager 根据配置的接收器发送通知。 现在，服务本身正在向 MQTT 主题发送警报。我需要一个可以订阅 MQTT 警报主题并发送通知的开源工具。这个工具应该是高度可配置的。 如果没有可以监听 MQTT 主题并直接发送通知的开源工具，我可以运行一个 Golang 服务来监听 MQTT 主题并向通知服务发送警报。有没有能够监听 MQTT 主题和可以发送通知的库的 Golang 库？如果没有一个库，我可以使用两个库：一个用于监听 MQTT，另一个用于发送通知。 如有任何建议或意见，我们将不胜感激！    提交人    /u/West_Ad7170   [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1iec4uu/looking_for_open_source_tools_or_golang_libraries/</guid>
      <pubDate>Fri, 31 Jan 2025 10:49:07 GMT</pubDate>
    </item>
    <item>
      <title>Flowkeeper - 一款遵循原始技术的桌面番茄工作法计时器</title>
      <link>https://www.reddit.com/r/opensource/comments/1ieb3r4/flowkeeper_a_desktop_pomodoro_timer_that_sticks/</link>
      <description><![CDATA[我想与大家分享Flowkeeper——一个具有“经典”跨平台 UI 范例（Qt6、Python）的番茄工作法计时器，它设计得功能强大、简单但外观美观。它  完全按照原著中的描述实现番茄工作法， 在本地存储您的数据并且不会跟踪您， 支持多种桌面操作系统， 具有便携版本并且不需要管理员权限即可安装， 针对高级用户进行了优化（键盘快捷键和丰富的设置）。  我从 2023 年开始积极开发它。 您的反馈和评论很有帮助！如果您尝试 Flowkeeper，请告诉我您想改进什么，我会尽我所能实现它。 带有屏幕截图和下载的网站：https://flowkeeper.org/ GitHub repo： https://github.com/flowkeeper-org/fk-desktop/    由   提交  /u/setwindowtext   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ieb3r4/flowkeeper_a_desktop_pomodoro_timer_that_sticks/</guid>
      <pubDate>Fri, 31 Jan 2025 09:30:47 GMT</pubDate>
    </item>
    <item>
      <title>使用 Vue.js 构建的极简开源习惯跟踪应用程序，通过 NuxtHub 由高性能数据库提供支持</title>
      <link>https://www.reddit.com/r/opensource/comments/1ieai2z/minimalist_opensource_habittracking_application/</link>
      <description><![CDATA[  由    /u/sefabulak  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ieai2z/minimalist_opensource_habittracking_application/</guid>
      <pubDate>Fri, 31 Jan 2025 08:42:32 GMT</pubDate>
    </item>
    <item>
      <title>使用个人电子邮件地址进行开源项目</title>
      <link>https://www.reddit.com/r/opensource/comments/1iea1yh/using_personal_email_address_for_open_source/</link>
      <description><![CDATA[我正在做一个小项目，目前我使用我的私人邮件签署所有提交。但是，这会将我的电子邮件暴露给互联网上的任何人，我正在考虑这对垃圾邮件和诈骗意味着什么。 你们做什么？你只为 github 使用一次性邮件还是使用你的真实地址？    提交人    /u/theChaosBeast   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1iea1yh/using_personal_email_address_for_open_source/</guid>
      <pubDate>Fri, 31 Jan 2025 08:07:27 GMT</pubDate>
    </item>
    <item>
      <title>我需要帮助。</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie9onp/i_need_help/</link>
      <description><![CDATA[有人能介绍一个好的适用于 Android 的开源 pdf 和其他文档创建器编辑器应用程序吗？    提交人    /u/AnimeOtaku426   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie9onp/i_need_help/</guid>
      <pubDate>Fri, 31 Jan 2025 07:39:42 GMT</pubDate>
    </item>
    <item>
      <title>Markdrop：一个 Python 包，用于在提取图像和表格的同时将 PDF 转换为 Markdown，使用多个 LLM 客户端为提取的表格/图像生成描述性文本描述。还有更多功能。Markdrop 可在 PyPI 上使用</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie5221/markdrop_a_python_package_for_converting_pdfs_to/</link>
      <description><![CDATA[我很高兴与大家分享我的 Python 包 Markdrop，它在短短一个月内下载量已达到 5.81k+，所以我刚刚更新了它！🚀 它是一个强大的工具，可以将 PDF 文档转换为 Markdown (.md) 和 HTML (.html) 等结构化格式，同时自动将图像和表格处理为描述以供下游使用。以下是 Markdrop 的功能： 主要功能：  PDF 到 Markdown/HTML 转换：将 PDF 转换为干净、结构化的 Markdown 文件 (.md) 或 HTML 输出，同时保留内容布局。 AI 驱动的描述：用 LLM 生成的描述性摘要替换表格和图像，使内容完全文本化且易于分析。之前，我添加了对 6 种不同 LLM 客户端的支持，但为了缩短推理时间，仅限于 Gemini 和 GPT。 可下载表格：可以在 HTML 中为表格添加准确的下载按钮，允许用户将其下载为 Excel 文件。 无缝表格和图像处理：提取表格和图像，为每个表格和图像生成详细摘要，然后嵌入到最终的 Markdown 文档中。  最后，可以得到一个仅包含文本数据的 .md 文件，包括 AI 生成的表格、图像、图形等摘要。这会产生一种高度可移植的格式，可直接用于多个下游任务，例如：  可以直接集成到 RAG 管道中，以增强对包含有用图像和表格数据的文档的内容理解和查询。 非常适合自动内容摘要和报告生成。 有助于从表格和图像中提取关键数据点以供进一步分析。 .md 文件可以作为机器学习任务或数据驱动项目的输入。 非常适合数据提取，简化了从表格和图像中收集关键数据的任务。 可下载的表格功能非常适合分析师，减少了将表格复制到 Excel 的手动任务。  Markdrop 简化了文档处理的工作流程，节省了时间并提高了工作效率。您可以通过以下方式轻松安装它： pip install markdrop  还有一个 Colab 演示可供直接试用：在 Colab 中打开。 Github Repo 如果您使用过 Markdrop 或计划使用，我很乐意听到您的反馈！分享您的经验、任何改进或它如何帮助您的工作流程。 在 PyPI 上查看并告诉我您的想法！   由    /u/Willing-Ear-8271  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie5221/markdrop_a_python_package_for_converting_pdfs_to/</guid>
      <pubDate>Fri, 31 Jan 2025 02:54:39 GMT</pubDate>
    </item>
    <item>
      <title>我最近建立了一个客户端新闻文章查看器，不再有广告或导航链接或付费墙阻挡所有文本。</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie0r7q/i_recently_built_a_clientside_news_article_viewer/</link>
      <description><![CDATA[最近，我受够了一篇新闻文章，整页都是广告和指向其他文章的链接，我滚动浏览这些文章只是为了点击付费墙，所以我建立了一个网站，从档案中获取文章内容，然后使用 Mozilla 令人难以置信的 readability 包来获取文章内容并很好地显示它们。由于它全部是客户端的，因此没有维护成本，而且由于它是开源的，您可以轻松地自行托管。 https://pressifythis.com 这是我第一次在浏览器中构建如此有用的东西，我真的发现这不仅是一个有趣的挑战，而且对于开源来说它非常有效，因为它变得非常容易分叉和托管。我知道其他人已经承担了使用 WebGPU 在浏览器中运行 LLM 模型等项目，但你们中有人在客户端构建过任何相当复杂的程序吗？我很想听听你们的项目，并了解更多关于如何实现这一点的信息。如果它能让你免于部署大量基础设施或维护一些复杂的代码库，那就更好了。    提交人    /u/omccarth333   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie0r7q/i_recently_built_a_clientside_news_article_viewer/</guid>
      <pubDate>Thu, 30 Jan 2025 23:24:48 GMT</pubDate>
    </item>
    <item>
      <title>领域敲门者</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie0jm7/realm_knocker/</link>
      <description><![CDATA[大家好，我是 tabby，我是 realm knocker 的一名开发人员，正在进行中期开发，这是一个很酷的项目，我做的是一款受 born again 启发的角色扮演游戏，我的笔记本电脑坏了，如果有人能资助我，那将真正帮助我继续开发，我用我的手机编写了此代码，因为旧代码和每种游戏模式都丢失了，遗憾的是我将我的东西存储在硬盘 hdd 中，现在它甚至不起作用，我使用 acer aspire 5920 G 和我的游戏代码，我甚至无法测试，希望你们告诉我弹出了什么错误，以便我可以修复！ VISUAL STUDIO 代码版本！ 使用系统；使用 System.Threading； 类程序 { static int playerX = 0; static int playerY = 0; static int rockCooldown = 0; static int teleportCooldown = 0; static void Main(string[] args) { Console.WriteLine(&quot;欢迎来到 Realm Knocker RGB！&quot;); Console.WriteLine(&quot;控制：WASD 移动，Q 投掷石头，E 传送跳跃。&quot;); while (true) { DrawGame(); HandleInput(); UpdateCooldowns(); Thread.Sleep(100); // 减慢游戏循环 } } static void DrawGame() { Console.Clear(); Console.WriteLine($&quot;玩家位置：({playerX}, {playerY})&quot;); Console.WriteLine($&quot;岩石冷却时间：{rockCooldown} 秒&quot;); Console.WriteLine($&quot;传送冷却时间：{teleportCooldown} 秒&quot;); Console.WriteLine(&quot;按 Q 扔石头，按 E 传送跳跃。&quot;); } static void HandleInput() { if (Console.KeyAvailable) { var key = Console.ReadKey(true).Key; switch (key) { case ConsoleKey.W: // 向上移动 playerY++; break; case ConsoleKey.S: // 向下移动 playerY--; break; case ConsoleKey.A: // 向左移动 playerX--; break; case ConsoleKey.D: // 向右移动 playerX++; break; case ConsoleKey.Q: // 扔石头 if (rockCooldown &lt;= 0) { ThrowRocks(); rockCooldown = 5; // 5 秒冷却 } break; case ConsoleKey.E: // 传送跳跃 if (teleportCooldown &lt;=  UNITY 版本!!!! 使用 UnityEngine; public class PlayerController : MonoBehaviour { // 运动 public float moveSpeed = 5f; public Rigidbody rb; // 投掷石头 public GameObject rockPrefab; // 在检查器中分配一个立方体预制件 public Transform rockSpawnPoint; public float rockForce = 10f; public float rockCooldown = 5f; private float nextRockTime = 0f; // 传送跳跃 public float teleportRadius = 3f; public float teleportCooldown = 15f; private float nextTeleportTime = 0f; void Update() { // WASD 运动 float moveX = Input.GetAxis(&quot;Horizo​​ntal&quot;); float moveZ = Input.GetAxis(&quot;Vertical&quot;); Vector3 movement = new Vector3(moveX, 0f, moveZ) * moveSpeed * Time.deltaTime; rb.MovePosition(transform.position + movement); // 投掷岩石能力（Q 键） if (Input.GetKeyDown(KeyCode.Q) &amp;&amp; Time.time &gt;= nextRockTime) { ThrowRocks(); nextRockTime = Time.time + rockCooldown; } // 传送跳跃能力（E 键） if (Input.GetKeyDown(KeyCode.E) &amp;&amp; Time.time &gt;= nextTeleportTime) { TeleportJump(); nextTeleportTime = Time.time + teleportCooldown; } } void ThrowRocks() { // 以倒三角形模式扔出 3 块石头 Vector3[] directions = { new Vector3(-0.5f, 0.5f, 1f), // 左上 new Vector3(0f, 1f, 1f), // 直线向上 new Vector3(0.5f, 0.5f, 1f) // 右上 }; foreach (var dir in directions) { GameObject rock = Instantiate(rockPrefab, rockSpawnPoint.position, Quaternion.identity); Rigidbody rockRb = rock.GetComponent&lt;Rigidbody&gt;(); if (rockRb != null) { rockRb.AddForce(dir.normalized * rockForce, ForceMode.Impulse); } } } void TeleportJump() { // 将玩家传送到小半径内的随机点 Vector3 randomDirection = Random.insideUnitSphere * teleportRadius; randomDirection.y = 0f; // 让玩家保持在地面上 rb.MovePosition(transform.position + randomDirection); }  &gt; 祝大家在 reddit 上度过美好而精彩的一天！     提交人    /u/Rip_PotatoBloxFruits   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie0jm7/realm_knocker/</guid>
      <pubDate>Thu, 30 Jan 2025 23:15:04 GMT</pubDate>
    </item>
    <item>
      <title>Hyperbook：针对教育工作者的 Retype 或 Gitbook 开源替代品</title>
      <link>https://www.reddit.com/r/opensource/comments/1idzl8z/hyperbook_an_opensource_alternative_to_retype_or/</link>
      <description><![CDATA[Hyperbook 是一个基于 markdown 的创建交互式工作簿的工具。与 Retype 或 GitBook 类似，它将 markdown 转换为 HTML、CSS 和 JavaScript，同时扩展 markdown 语法以支持交互元素。 特点： ✅ 基于 Markdown – 使用 markdown 编写和格式化内容。 🎨 交互元素 – 支持 P5.js 草图、ABC 音乐符号、音频、书签等。 🔄 导入/导出 – 允许将工作簿状态保存和恢复为 JSON 文件。 📱 响应式设计 – 适应窗口大小调整、滚动和用户交互。 💻 VS Code 集成 – 提供在 Visual Studio Code 中渲染 Hyperbook markdown 的扩展。 🚀 实时预览 – 支持实时预览 markdown 文件。 目前，它最常被计算机科学和数学教师用来创建动态教育材料。 以下是一些公开示例：  Scratch4j：https://scratch4j.openpatch.org/ 软件挑战：https://docs.software-challenge.de/ Hyperbook：https://hyperbook.openpatch.org/ 信息：https://informatik.openpatch.org/web/grundlagen/html/02-ueberschriften-und-paragraphen  有关更多详细信息，请访问 GitHub 存储库（https://github.com/openpatch/hyperbook）或查看文档（https://hyperbook.openpatch.org）。    提交人    /u/bamigolang   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idzl8z/hyperbook_an_opensource_alternative_to_retype_or/</guid>
      <pubDate>Thu, 30 Jan 2025 22:33:40 GMT</pubDate>
    </item>
    <item>
      <title>提升您的提交水平：将 Quake 和 UT 怀旧风格带入您的编码中！</title>
      <link>https://www.reddit.com/r/opensource/comments/1idwz1c/level_up_your_commits_bring_quake_ut_nostalgia_to/</link>
      <description><![CDATA[大家好！ 如果您曾经花太多时间玩 Quake 或 Unreal Tournament，这里有一个有趣的方式将怀旧之情带入您的编码程序中。我整理了“unreal-git-hook”，这是一组自定义 Git 钩子，每当您提交或合并时，它们都会播放那些标志性的游戏内感叹号！ - 当您提交 (git commit) 时，您会听到史诗般的台词，如“Godlike”、“Monster Kill”或“Rampage”，具体取决于您当天提交的次数。计数器每天早上重置 - 有点像重生！ - 当您合并 (git merge) 时，您会随机听到“Impressive”或“Perfect”。 总共有 15 种不同的声音，在不同的提交计数时触发。把它当作是那些马拉松式编码过程中让您保持精力充沛的小礼物 — — 也是对我们都喜爱的那些老式竞技场射击游戏的甜蜜致敬。 编码愉快！ https://github.com/dmayboroda/unreal-git-hook    提交人    /u/davidvroda   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idwz1c/level_up_your_commits_bring_quake_ut_nostalgia_to/</guid>
      <pubDate>Thu, 30 Jan 2025 20:42:44 GMT</pubDate>
    </item>
    <item>
      <title>微软正在通过 PorstgreSQL 开发开源 NoSQL DB，我不知道我现在在读什么...那是多元宇宙材料吗？</title>
      <link>https://www.reddit.com/r/opensource/comments/1idv47p/microsoft_doing_an_open_source_nosql_db_over/</link>
      <description><![CDATA[Linuxiac @linuxiac · 1 月 28 日。 微软推出 DocumentDB - 一个基于 #PostgreSQL 构建的开源 #NoSQL 数据存储，现在可在 MIT 许可下使用 https://github.com/microsoft/documentdb    提交人    /u/EstaticNollan   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idv47p/microsoft_doing_an_open_source_nosql_db_over/</guid>
      <pubDate>Thu, 30 Jan 2025 19:24:56 GMT</pubDate>
    </item>
    <item>
      <title>敢于发布我的 IPTV 模板（48 小时内建成，轻轻地嘲笑我）</title>
      <link>https://www.reddit.com/r/opensource/comments/1idsj28/dared_to_release_my_iptv_template_built_in_48h/</link>
      <description><![CDATA[嘿！ 长期潜水员在这里，一直对您的技能感到惊讶……“我永远不会发布我的意大利面条式代码”，我说道。但我们在这里。👀 项目：用于“类似 Netflix”流媒体界面的 Nuxt 3 IPTV 模板。“但是为什么呢？”因为我痴迷于华丽的用户界面、滚动播放列表，而且......好吧，我有 48 小时可以消磨。 🫠 我拼凑起来的东西：  一个崩溃概率为 30％ 的视频播放器（但很美观）（开玩笑） “动态”主题（阅读：Tailwind CSS 滥用）  GitHub（做好准备）： https://github.com/florianjs/iptv-template 为什么要分享这个烂摊子？  需要你的残酷诚实（特别是如果你比我聪明）😅 低调希望贡献者在 PR 中写下“天哪，这段代码太烂了”。成长心态，对吧？  作为回报，您将获得：  如果您为该 repo 加注星标，则可获得一只小猫 GIF 🐱 允许称我为“Nuxt 3 睡眠不足的小精灵&#39;     提交人    /u/f01k3n   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idsj28/dared_to_release_my_iptv_template_built_in_48h/</guid>
      <pubDate>Thu, 30 Jan 2025 17:38:02 GMT</pubDate>
    </item>
    </channel>
</rss>
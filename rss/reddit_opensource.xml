<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Thu, 03 Oct 2024 03:28:46 GMT</lastBuildDate>
    <item>
      <title>PyTraceToIX - 用于调试 lambda、列表推导、方法链和表达式的 Python 表达式跟踪器。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fuvvgg/pytracetoix_a_python_expression_tracer_for/</link>
      <description><![CDATA[PyTraceToIX 是一个表达式跟踪器，用于调试 lambda、列表推导、方法链和表达式。 代码编辑器无法在表达式、lambda 函数、列表推导和链式方法内设置断点，从而迫使进行重大代码更改才能调试此类代码。 PyTraceToIX 为这个问题提供了一个简单的解决方案。 它的设计很简单，具有易于识别的函数，一旦发现错误就可以将其删除。 PyTraceToIX 有 2 个主要功能：  c__ 捕获表达式输入的输入。例如：c__(x) d__ 显示表达式的结果和所有捕获的输入。例如：d__(c__(x) + c__(y))  以及 2 个可选函数：  init__ 初始化显示格式、输出流和多线程。 t__ 为当前线程定义一个名称。  特点  多线程支持。 简单、简短的极简函数名称。 带有输入跟踪的结果。 可在全局级别和函数级别配置格式。 可配置结果和输入命名。 输出到 stdout 或流。 多个级别。 使用 allow 和 name 回调捕获输入方法。  ​ #!/usr/bin/env python3 from pytracetoix import d__, c__ [x, y, w, k, u] = [1, 2, 3, 4 + 4, lambda x:x] # 表达式 z = x + y * w + (k * u(5)) # 显示没有输入的表达式 z = d__(x + y * w + (k * u(5))) # 输出：# _:`47` # 显示有输入的表达式结果 z = d__(c__(x) + y * c__(w) + (k * u(5))) # 输出：# i0:`1` | i1:`3` | _:`47` # 显示表达式内带有输入的表达式结果 z = d__(c__(x) + y * c__(w) + d__(k * c__(u(5), level=1))) # 输出：# i0:`5` | _:`40` # i0:`1` | i1:`3` | _:`47` # lambda 函数 f = lambda x, y: x + (y + 1) f(5, 6) # 显示 lambda 函数结果和输入 f = lambda x, y: d__(c__(x) + c__(y + 1)) f(5, 6) # 输出：# i0:`5` | i1:`7` | _:`12` # 显示 lambda 函数输入和结果，以及输入和结果名称 f = lambda x, y: d__(c__(x, name=&#39;x&#39;) + c__(y + 1, name=&#39;y+1&#39;), name=&#39;f&#39;) f(5, 6) # 输出：# x:`5` | y+1:`7` | f:`12` # 列表推导式 l = [5 * y * x for x, y in [(10, 20), (30, 40)]] # 显示列表推导式，以及输入和结果名称 l = d__([5 * c__(y, name=f&quot;y{y}&quot;) * c__(x, name=lambda index, _, __: f&#39;v{index}&#39;) for x, y in [(10, 20), (30, 40)]]) # 输出：# y20:`20` | v1:`10` | y40:`40` | v3:`30` | _:`[1000, 6000]` # 如果 `input count` 为 2，则显示表达式 d__(c__(x) + c__(y), allow=lambda data: data[&#39;input_count__&#39;] == 2) # 如果第一个输入值为 10.0，则显示表达式 d__(c__(x) + c__(y), allow=lambda data: data[&#39;i0&#39;] == 10.0) # 如果 `allow_input_count` 为 2，则显示表达式，在这种情况下，如果 `x &gt; 10` d__(c__(x, allow=lambda index, name, value: value &gt; 10) + c__(y), allow=lambda data: data[&#39;allow_input_count__&#39;] == 2) # 如果生成的输出包含文本 10，则显示表达式 d__([c__(x) for x in [&#39;10&#39;, &#39;20&#39;]], before=lambda data: &#39;10&#39; in data[&#39;output__&#39;]) # 如果允许显示，则显示表达式和调用后 `call_after` d__([c__(x) for x in [&#39;10&#39;, &#39;20&#39;]], allow=lambda data: data[&#39;allow_input_count__&#39;] == 2, after=lambda data: call_after(data) if data[&#39;allow__&#39;] else &quot;&quot;) class Chain: def __init__(self, data): self.data = data def map(self, func): self.data = list(map(func, self.data)) return self def filter(self, func): self.data = list(filter(func, self.data)) return self # 具有链式方法的类 Chain([10, 20, 30, 40, 50]).map(lambda x: x * 2).filter(lambda x: x &gt; 70) # 显示结果并捕获映射和过滤输入 d__(Chain([10, 20, 30, 40, 50]).map(lambda x: c__(x * 2)).filter(lambda x: c__(x &gt; 70)).data) # 输出： # i0:`20` | i1:`40` | i2:`60` | i3:`80` | i4:`1​​00` | i5:`False` | i6:`False` | i7:`False` | i8:`True` | i9:`True` | _:`[80, 100]`     提交人    /u/abentofreire   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fuvvgg/pytracetoix_a_python_expression_tracer_for/</guid>
      <pubDate>Thu, 03 Oct 2024 00:58:18 GMT</pubDate>
    </item>
    <item>
      <title>对 AGPL 的常见误解</title>
      <link>https://www.reddit.com/r/opensource/comments/1fuq6ls/common_misconceptions_of_the_agpl/</link>
      <description><![CDATA[  由    /u/ssddanbrown  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fuq6ls/common_misconceptions_of_the_agpl/</guid>
      <pubDate>Wed, 02 Oct 2024 20:28:25 GMT</pubDate>
    </item>
    <item>
      <title>这可能是我收到过措辞最严厉的邮件之一。我现在还浑身发抖。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fupgrn/probably_one_of_the_most_harshly_worded_issues/</link>
      <description><![CDATA[        由    /u/AmruthPillai 提交   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fupgrn/probably_one_of_the_most_harshly_worded_issues/</guid>
      <pubDate>Wed, 02 Oct 2024 19:57:57 GMT</pubDate>
    </item>
    <item>
      <title>支持互联网档案馆保存的民间努力</title>
      <link>https://www.reddit.com/r/opensource/comments/1fumh8y/grassroots_efforts_to_support_the_internet/</link>
      <description><![CDATA[草根努力可以通过满足网站的存档需求来支持互联网档案馆。这可以通过将他们与具有专业知识的律师联系起来，以建立与音乐、视频游戏和电影行业的共同点来实现。这种合作确保我们不会失去软件开发历史的宝贵进步，并有助于保存记录各自艺术形式演变的历史音乐和电影。否则，该网站可能会永久关闭，这将是毁灭性的。此外，我们必须加强与企鹅等主要出版商和其他可能试图关闭 Archive.org 的公司的谈判。失去对如此庞大的知识和文化库（尤其是稀有书籍和文本）的访问权，对人类来说将是重大损失。我们必须保护这些资源（其中一些资源已不再印刷），因为限制对知识的访问会阻碍进步。让我们团结起来，为子孙后代保护这个重要的档案馆。    提交人    /u/MisterTTS   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fumh8y/grassroots_efforts_to_support_the_internet/</guid>
      <pubDate>Wed, 02 Oct 2024 17:52:42 GMT</pubDate>
    </item>
    <item>
      <title>我创建了一个基于 Flask 的博客应用程序，它具有大量功能！🔥</title>
      <link>https://www.reddit.com/r/opensource/comments/1fulh2j/i_created_a_flaskbased_blog_app_with_tons_of/</link>
      <description><![CDATA[大家好！ 我只是想分享一个我一直在做的有趣的小项目 - FlaskBlog！这是一个用 Flask 构建的简单但功能强大的博客应用程序。 📝 它有什么酷的地方？  用于管理帖子的管理面板 明暗模式（因为谁不喜欢暗模式？） 带有个人资料图片的自定义用户个人资料 Google reCAPTCHA v3 可防止机器人入侵 Docker 支持，可轻松部署 多语言支持：🇬🇧 英语、🇹🇷 土耳其语、🇩🇪 德语、🇪🇸 西班牙语、🇵🇱 波兰语、🇫🇷 法语、🇵🇹 葡萄牙语、🇺🇦 Українська、🇷🇺 使用 TailwindCSS 进行移动友好设计 帖子类别、创建、编辑等等！ 通过 X（以前称为 Twitter）直接分享帖子 使用 Playwright 自动进行基本测试 所有帖子和评论的时区感知 发布横幅以获取更具吸引力的内容 在主页上轻松对帖子进行排序 具有多级日志的详细日志记录系统 安全的 SQL 连接和防 SQL 注入保护 包含示例数据（用户、帖子、评论）以便于测试  您只需几个步骤即可查看、克隆并运行它。我在构建过程中学到了很多东西，我为它的结果感到非常自豪！如果您喜欢 Flask 或只是在寻找一个简单的博客模板，请随意尝试一下。 很高兴收到您的反馈，如果您喜欢它，请不要忘记在 GitHub 上放一个 ⭐。😊 🔗 GitHub Repo 📽️ 预览视频 感谢您的关注！    提交人    /u/dogukanurker   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fulh2j/i_created_a_flaskbased_blog_app_with_tons_of/</guid>
      <pubDate>Wed, 02 Oct 2024 17:11:24 GMT</pubDate>
    </item>
    <item>
      <title>Hexabot - 具有多渠道、多语言和 AI 功能的开源可视化聊天机器人构建器</title>
      <link>https://www.reddit.com/r/opensource/comments/1fuj214/hexabot_opensource_visual_chatbot_builder_with/</link>
      <description><![CDATA[大家好！👋 我很高兴介绍我们的开源、低代码聊天机器人构建器 Hexabot！Hexabot 允许您通过直观的拖放界面创建自定义对话式 AI 流程，旨在使聊天机器人构建变得简单而强大。 我们的使命是发展我们的项目，并希望得到您的支持！⭐ 在 GitHub 上为我们加星标：https://github.com/hexastack/hexabot 期待收到您的反馈！🌱💻    提交人    /u/flesmih   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fuj214/hexabot_opensource_visual_chatbot_builder_with/</guid>
      <pubDate>Wed, 02 Oct 2024 15:33:17 GMT</pubDate>
    </item>
    <item>
      <title>MathMod-12.0</title>
      <link>https://www.reddit.com/r/opensource/comments/1fugqlu/mathmod120/</link>
      <description><![CDATA[MathMod-12.0 支持 Android 和 IOS 平台（MathMod 在 Google PlayStore 和 Apple AppStore），现可从 SourceForge 和 GitHub 下载。 MathMod-12.0 的变更日志： 1) 改进 GUI 以支持小屏幕格式： 2) 支持 Mandelbrot 和 Julia 分形函数 3) 新脚本：“Noids”、“k_Noids”、“Riemann_Minimal_Surface”、“MandelBulb”， &quot;MandelTemple&quot;、&quot;JuliaFractal&quot;、&quot;MandelbrotTorus&quot;、&quot;MandelbrotIsoSpheres&quot;、&quot;MandelbrotSphere&quot;、&quot;Mandelbrot&quot;、&quot;Spherical_Harmonics&quot;  玩得开心！    提交人    /u/parisolab   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fugqlu/mathmod120/</guid>
      <pubDate>Wed, 02 Oct 2024 13:54:06 GMT</pubDate>
    </item>
    <item>
      <title>一个音频库，适用于您的下一个音频项目。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fug18o/an_audio_library_for_your_next_audio_project/</link>
      <description><![CDATA[      我制作了一个用于播放音频的小型 JS 库。支持各种格式，并支持 Mediasession 队列、均衡器等。    提交人    /u/ashish_feels   [link] [comments] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fug18o/an_audio_library_for_your_next_audio_project/</guid>
      <pubDate>Wed, 02 Oct 2024 13:20:47 GMT</pubDate>
    </item>
    <item>
      <title>有任何 FOSS 音乐下载管道/API/库吗？</title>
      <link>https://www.reddit.com/r/opensource/comments/1fucgm7/are_there_any_foss_music_download/</link>
      <description><![CDATA[我正在考虑任何可用于我的项目的此类 API、库或管道。谢谢。     提交人    /u/SkywalkerPadawan512   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fucgm7/are_there_any_foss_music_download/</guid>
      <pubDate>Wed, 02 Oct 2024 09:54:52 GMT</pubDate>
    </item>
    <item>
      <title>深入浏览器开发：我对 Ladybird 的首次贡献</title>
      <link>https://www.reddit.com/r/opensource/comments/1fuc49p/diving_into_browser_development_my_first/</link>
      <description><![CDATA[通过为 Ladybird 做贡献重新回到开源的经历 :) https://kostyafarber.com/blog/first-contribution-to-ladybird    提交人    /u/Patrick_Ripley   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fuc49p/diving_into_browser_development_my_first/</guid>
      <pubDate>Wed, 02 Oct 2024 09:28:56 GMT</pubDate>
    </item>
    <item>
      <title>我开发了一个开源的每日益智游戏</title>
      <link>https://www.reddit.com/r/opensource/comments/1fu8352/i_built_a_open_source_daily_puzzle_game/</link>
      <description><![CDATA[  由    /u/OiaOrca  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fu8352/i_built_a_open_source_daily_puzzle_game/</guid>
      <pubDate>Wed, 02 Oct 2024 04:33:14 GMT</pubDate>
    </item>
    <item>
      <title>[DnsTrace] 使用 eBPF 调查 DNS 查询！</title>
      <link>https://www.reddit.com/r/opensource/comments/1fu1z2w/dnstrace_investigate_dns_queries_with_ebpf/</link>
      <description><![CDATA[       由    /u/scroll_down0  提交  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fu1z2w/dnstrace_investigate_dns_queries_with_ebpf/</guid>
      <pubDate>Tue, 01 Oct 2024 23:12:32 GMT</pubDate>
    </item>
    <item>
      <title>Fast-Music-Remover：加入我们，打造一款人人都能从中受益的 FOSS 工具！人声提取器；噪音消除器</title>
      <link>https://www.reddit.com/r/opensource/comments/1ftxfdb/fastmusicremover_join_us_in_building_a_foss_tool/</link>
      <description><![CDATA[大家好， 我很高兴地说，我们每天都有更多的贡献者加入到构建一个完全免费和开放的工具的行列，该工具可以非常高效地清除视频中的噪音、音效和背景音乐 - 一分钟长的视频只需不到 5 秒！ 无论您喜欢后端还是前端；python 还是 C++，我们都有适合您的产品！ 感兴趣吗？只需找到 YT 视频，克隆 repo 并运行 docker 即可查看结果！ 希望见到你： https://github.com/omeryusufyagci/fast-music-remover    提交人    /u/Apart-Status9082   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ftxfdb/fastmusicremover_join_us_in_building_a_foss_tool/</guid>
      <pubDate>Tue, 01 Oct 2024 19:56:17 GMT</pubDate>
    </item>
    <item>
      <title>我们花了几个月的时间构建 oss.gg 来实现 OS 贡献的游戏化和自动化 - wdyt？</title>
      <link>https://www.reddit.com/r/opensource/comments/1ftwbl9/weve_spent_a_few_months_building_ossgg_to_gamify/</link>
      <description><![CDATA[大家好！ 几个月前，我在 Reddit 上就我们将开源贡献游戏化的想法征求了大家的意见。 现在我们已经重新设计并发布了它，并且非常高兴能在 hacktoberfest 期间推出（因为这个想法是去年在这里提出的）。 我们成功赢得了 7 个 oss repos 来参与（dub、formbricks、hanko、openbb、papermark、twenty 和 unkey) 我们将在为期一个月的黑客马拉松中启动它，以测试它的扩展能力🤓 很想听听你的看法！我们对激励非代码贡献也特别好奇！ 看一看👉 oss.gg 很高兴听到您的反馈！    提交人    /u/jobenjada   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ftwbl9/weve_spent_a_few_months_building_ossgg_to_gamify/</guid>
      <pubDate>Tue, 01 Oct 2024 19:10:46 GMT</pubDate>
    </item>
    <item>
      <title>介绍门，一款免费、开源且无广告的壁纸应用。随附橙色壁纸。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fttl7m/introducing_doors_a_free_open_source_wallpaper/</link>
      <description><![CDATA[https://github.com/kennethnym/doors-wallpaper Doors 是 MKBHD 的 [panels.art] 壁纸应用的免费开源替代品。 鸣谢：推特上的 kennethnym Appstore：https://apps.apple.com/gb/app/doors-wallpaper/id6727012222 由于正在审核中，该应用尚未在 Google Play Store 上线。    提交人    /u/wdxo   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fttl7m/introducing_doors_a_free_open_source_wallpaper/</guid>
      <pubDate>Tue, 01 Oct 2024 17:20:09 GMT</pubDate>
    </item>
    </channel>
</rss>
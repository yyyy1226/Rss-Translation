<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Fri, 31 Jan 2025 01:43:41 GMT</lastBuildDate>
    <item>
      <title>寻求建议：ISO认证和培训公司你们使用什么平台？</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie3bpd/seeking_advice_what_platforms_do_you_use_for_iso/</link>
      <description><![CDATA[大家好， 我在一家提供 ISO 认证和培训课程的公司工作，我想从类似行业的人那里了解你们如何实现运营数字化。 我对各种平台都感兴趣——任何有助于简化流程的平台，从自动化到 LMS、CRM、电子商务和认证跟踪。具体来说，我很想了解：  用于管理课程的学习管理系统 (LMS) 用于处理客户和培训记录的 CRM 减少手动工作的自动化工具 用于颁发和跟踪认证的平台 用于销售课程或相关服务的电子商务解决方案  无论您使用开源还是付费解决方案，我都想了解哪些方法对您有用（或无用）。任何建议或经验都将不胜感激！ 提前致谢！    提交人    /u/cristake007   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie3bpd/seeking_advice_what_platforms_do_you_use_for_iso/</guid>
      <pubDate>Fri, 31 Jan 2025 01:27:32 GMT</pubDate>
    </item>
    <item>
      <title>Shiloh 正在寻找一位开源微影响者</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie2xft/shiloh_is_looking_for_an_open_source/</link>
      <description><![CDATA[https://www.christiantechjobs.io/christian-jobs/remote-micro-influencer-shiloh-776    由   提交  /u/Hustle4better   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie2xft/shiloh_is_looking_for_an_open_source/</guid>
      <pubDate>Fri, 31 Jan 2025 01:08:02 GMT</pubDate>
    </item>
    <item>
      <title>我最近建立了一个客户端新闻文章查看器，不再有广告或导航链接或付费墙阻挡所有文本。</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie0r7q/i_recently_built_a_clientside_news_article_viewer/</link>
      <description><![CDATA[最近，我受够了一篇新闻文章，整页都是广告和指向其他文章的链接，我滚动浏览这些文章只是为了点击付费墙，所以我建立了一个网站，从档案中获取文章内容，然后使用 Mozilla 令人难以置信的 readability 包来获取文章内容并很好地显示它们。由于它全部是客户端的，因此没有维护成本，而且由于它是开源的，您可以轻松地自行托管。 https://pressifythis.com 这是我第一次在浏览器中构建如此有用的东西，我真的发现这不仅是一个有趣的挑战，而且对于开源来说它非常有效，因为它变得非常容易分叉和托管。我知道其他人已经承担了使用 WebGPU 在浏览器中运行 LLM 模型等项目，但你们中有人在客户端构建过任何相当复杂的程序吗？我很想听听你们的项目，并了解更多关于如何实现这一点的信息。如果它能让你免于部署大量基础设施或维护一些复杂的代码库，那就更好了。    提交人    /u/omccarth333   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie0r7q/i_recently_built_a_clientside_news_article_viewer/</guid>
      <pubDate>Thu, 30 Jan 2025 23:24:48 GMT</pubDate>
    </item>
    <item>
      <title>领域敲门者</title>
      <link>https://www.reddit.com/r/opensource/comments/1ie0jm7/realm_knocker/</link>
      <description><![CDATA[大家好，我是 tabby，我是 realm knocker 的一名开发人员，正在进行中期开发，这是一个很酷的项目，我做的是一款受 born again 启发的角色扮演游戏，我的笔记本电脑坏了，如果有人能资助我，那将真正帮助我继续开发，我用我的手机编写了此代码，因为旧代码和每种游戏模式都丢失了，遗憾的是我将我的东西存储在硬盘 hdd 中，现在它甚至不起作用，我使用 acer aspire 5920 G 和我的游戏代码，我甚至无法测试，希望你们告诉我弹出了什么错误，以便我可以修复！ VISUAL STUDIO 代码版本！ 使用系统；使用 System.Threading； 类程序 { static int playerX = 0; static int playerY = 0; static int rockCooldown = 0; static int teleportCooldown = 0; static void Main(string[] args) { Console.WriteLine(&quot;欢迎来到 Realm Knocker RGB！&quot;); Console.WriteLine(&quot;控制：WASD 移动，Q 投掷石头，E 传送跳跃。&quot;); while (true) { DrawGame(); HandleInput(); UpdateCooldowns(); Thread.Sleep(100); // 减慢游戏循环 } } static void DrawGame() { Console.Clear(); Console.WriteLine($&quot;玩家位置：({playerX}, {playerY})&quot;); Console.WriteLine($&quot;岩石冷却时间：{rockCooldown} 秒&quot;); Console.WriteLine($&quot;传送冷却时间：{teleportCooldown} 秒&quot;); Console.WriteLine(&quot;按 Q 扔石头，按 E 传送跳跃。&quot;); } static void HandleInput() { if (Console.KeyAvailable) { var key = Console.ReadKey(true).Key; switch (key) { case ConsoleKey.W: // 向上移动 playerY++; break; case ConsoleKey.S: // 向下移动 playerY--; break; case ConsoleKey.A: // 向左移动 playerX--; break; case ConsoleKey.D: // 向右移动 playerX++; break; case ConsoleKey.Q: // 扔石头 if (rockCooldown &lt;= 0) { ThrowRocks(); rockCooldown = 5; // 5 秒冷却 } break; case ConsoleKey.E: // 传送跳跃 if (teleportCooldown &lt;=  UNITY 版本!!!! 使用 UnityEngine; public class PlayerController : MonoBehaviour { // 运动 public float moveSpeed = 5f; public Rigidbody rb; // 投掷石头 public GameObject rockPrefab; // 在检查器中分配一个立方体预制件 public Transform rockSpawnPoint; public float rockForce = 10f; public float rockCooldown = 5f; private float nextRockTime = 0f; // 传送跳跃 public float teleportRadius = 3f; public float teleportCooldown = 15f; private float nextTeleportTime = 0f; void Update() { // WASD 运动 float moveX = Input.GetAxis(&quot;Horizo​​ntal&quot;); float moveZ = Input.GetAxis(&quot;Vertical&quot;); Vector3 movement = new Vector3(moveX, 0f, moveZ) * moveSpeed * Time.deltaTime; rb.MovePosition(transform.position + movement); // 投掷岩石能力（Q 键） if (Input.GetKeyDown(KeyCode.Q) &amp;&amp; Time.time &gt;= nextRockTime) { ThrowRocks(); nextRockTime = Time.time + rockCooldown; } // 传送跳跃能力（E 键） if (Input.GetKeyDown(KeyCode.E) &amp;&amp; Time.time &gt;= nextTeleportTime) { TeleportJump(); nextTeleportTime = Time.time + teleportCooldown; } } void ThrowRocks() { // 以倒三角形模式扔出 3 块石头 Vector3[] directions = { new Vector3(-0.5f, 0.5f, 1f), // 左上 new Vector3(0f, 1f, 1f), // 直线向上 new Vector3(0.5f, 0.5f, 1f) // 右上 }; foreach (var dir in directions) { GameObject rock = Instantiate(rockPrefab, rockSpawnPoint.position, Quaternion.identity); Rigidbody rockRb = rock.GetComponent&lt;Rigidbody&gt;(); if (rockRb != null) { rockRb.AddForce(dir.normalized * rockForce, ForceMode.Impulse); } } } void TeleportJump() { // 将玩家传送到小半径内的随机点 Vector3 randomDirection = Random.insideUnitSphere * teleportRadius; randomDirection.y = 0f; // 让玩家保持在地面上 rb.MovePosition(transform.position + randomDirection); }  &gt; 祝大家在 reddit 上度过美好而精彩的一天！     提交人    /u/Rip_PotatoBloxFruits   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ie0jm7/realm_knocker/</guid>
      <pubDate>Thu, 30 Jan 2025 23:15:04 GMT</pubDate>
    </item>
    <item>
      <title>Hyperbook：针对教育工作者的 Retype 或 Gitbook 开源替代品</title>
      <link>https://www.reddit.com/r/opensource/comments/1idzl8z/hyperbook_an_opensource_alternative_to_retype_or/</link>
      <description><![CDATA[Hyperbook 是一个基于 markdown 的创建交互式工作簿的工具。与 Retype 或 GitBook 类似，它将 markdown 转换为 HTML、CSS 和 JavaScript，同时扩展 markdown 语法以支持交互元素。 特点： ✅ 基于 Markdown – 使用 markdown 编写和格式化内容。 🎨 交互元素 – 支持 P5.js 草图、ABC 音乐符号、音频、书签等。 🔄 导入/导出 – 允许将工作簿状态保存和恢复为 JSON 文件。 📱 响应式设计 – 适应窗口大小调整、滚动和用户交互。 💻 VS Code 集成 – 提供在 Visual Studio Code 中渲染 Hyperbook markdown 的扩展。 🚀 实时预览 – 支持实时预览 markdown 文件。 目前，它最常被计算机科学和数学教师用来创建动态教育材料。 以下是一些公开示例：  Scratch4j：https://scratch4j.openpatch.org/ 软件挑战：https://docs.software-challenge.de/ Hyperbook：https://hyperbook.openpatch.org/ 信息：https://informatik.openpatch.org/web/grundlagen/html/02-ueberschriften-und-paragraphen  有关更多详细信息，请访问 GitHub 存储库（https://github.com/openpatch/hyperbook）或查看文档（https://hyperbook.openpatch.org）。    提交人    /u/bamigolang   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idzl8z/hyperbook_an_opensource_alternative_to_retype_or/</guid>
      <pubDate>Thu, 30 Jan 2025 22:33:40 GMT</pubDate>
    </item>
    <item>
      <title>提升您的提交水平：将 Quake 和 UT 怀旧风格带入您的编码中！</title>
      <link>https://www.reddit.com/r/opensource/comments/1idwz1c/level_up_your_commits_bring_quake_ut_nostalgia_to/</link>
      <description><![CDATA[大家好！ 如果您曾经花太多时间玩 Quake 或 Unreal Tournament，这里有一个有趣的方式将怀旧之情带入您的编码程序中。我整理了“unreal-git-hook”，这是一组自定义 Git 钩子，每当您提交或合并时，它们都会播放那些标志性的游戏内感叹号！ - 当您提交 (git commit) 时，您会听到史诗般的台词，如“Godlike”、“Monster Kill”或“Rampage”，具体取决于您当天提交的次数。计数器每天早上重置 - 有点像重生！ - 当您合并 (git merge) 时，您会随机听到“Impressive”或“Perfect”。 总共有 15 种不同的声音，在不同的提交计数时触发。把它当作是那些马拉松式编码过程中让您保持精力充沛的小礼物 — — 也是对我们都喜爱的那些老式竞技场射击游戏的甜蜜致敬。 编码愉快！ https://github.com/dmayboroda/unreal-git-hook    提交人    /u/davidvroda   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idwz1c/level_up_your_commits_bring_quake_ut_nostalgia_to/</guid>
      <pubDate>Thu, 30 Jan 2025 20:42:44 GMT</pubDate>
    </item>
    <item>
      <title>微软正在通过 PorstgreSQL 开发开源 NoSQL DB，我不知道我现在在读什么...那是多元宇宙材料吗？</title>
      <link>https://www.reddit.com/r/opensource/comments/1idv47p/microsoft_doing_an_open_source_nosql_db_over/</link>
      <description><![CDATA[Linuxiac @linuxiac · 1 月 28 日。 微软推出 DocumentDB - 一个基于 #PostgreSQL 构建的开源 #NoSQL 数据存储，现在可在 MIT 许可下使用 https://github.com/microsoft/documentdb    提交人    /u/EstaticNollan   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idv47p/microsoft_doing_an_open_source_nosql_db_over/</guid>
      <pubDate>Thu, 30 Jan 2025 19:24:56 GMT</pubDate>
    </item>
    <item>
      <title>敢于发布我的 IPTV 模板（48 小时内建成，轻轻地嘲笑我）</title>
      <link>https://www.reddit.com/r/opensource/comments/1idsj28/dared_to_release_my_iptv_template_built_in_48h/</link>
      <description><![CDATA[嘿！ 长期潜水员在这里，一直对您的技能感到惊讶……“我永远不会发布我的意大利面条式代码”，我说道。但我们在这里。👀 项目：用于“类似 Netflix”流媒体界面的 Nuxt 3 IPTV 模板。“但是为什么呢？”因为我痴迷于华丽的用户界面、滚动播放列表，而且......好吧，我有 48 小时可以消磨。 🫠 我拼凑起来的东西：  一个崩溃概率为 30％ 的视频播放器（但很美观）（开玩笑） “动态”主题（阅读：Tailwind CSS 滥用）  GitHub（做好准备）： https://github.com/florianjs/iptv-template 为什么要分享这个烂摊子？  需要你的残酷诚实（特别是如果你比我聪明）😅 低调希望贡献者在 PR 中写下“天哪，这段代码太烂了”。成长心态，对吧？  作为回报，您将获得：  如果您为该 repo 加注星标，则可获得一只小猫 GIF 🐱 允许称我为“Nuxt 3 睡眠不足的小精灵&#39;     提交人    /u/f01k3n   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idsj28/dared_to_release_my_iptv_template_built_in_48h/</guid>
      <pubDate>Thu, 30 Jan 2025 17:38:02 GMT</pubDate>
    </item>
    <item>
      <title>erugo - 专注于隐私的单二进制 WeTransfer 替代方案</title>
      <link>https://www.reddit.com/r/opensource/comments/1idqdbk/erugo_a_privacyfocused_singlebinary_wetransfer/</link>
      <description><![CDATA[我想分享一个我一直在研究的工具，叫做 erugo - 这是一个尊重隐私的文件共享解决方案，你可以自己托管。 我为什么创建它： 我想通过构建一些我实际会用到的实用工具来学习 Go。我需要一种简单的方法与客户和家人共享大文件，但不想依赖跟踪使用情况或收集数据的服务。最重要的是，我想要一些不需要复杂设置或依赖项就能工作的东西。 主要特点：  单一二进制部署（后端 + 前端捆绑在一起） 无跟踪，无指标收集，完全私密 共享创建的本地身份验证 人性化的共享 URL 简单易用的 SQLite（无需外部数据库） 干净、现代的用户界面 可配置的存储路径和文件大小限制 MIT 许可且完全开源  技术栈： 使用 Go 后端和 Vue.js 前端构建，打包成一个二进制文件。使用 SQLite 进行元数据存储并使用本地文件系统存储文件。 入门：  下载二进制文件 运行它 按照交互式首次运行设置进行操作 开始共享文件！  该项目完全开源，可从以下位置获取：https://github.com/DeanWard/erugo 我正在积极开发 erugo，希望听到您的反馈和功能请求。目前正致力于通过 UI 添加 Docker 支持和白标选项。 如果您有任何问题，请告诉我！由于这是我的第一个 Go 项目，因此我对经验丰富的 Go 开发人员的反馈特别感兴趣，因为我希望有很多方法可以改进代码。    提交人    /u/PromaneX   [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idqdbk/erugo_a_privacyfocused_singlebinary_wetransfer/</guid>
      <pubDate>Thu, 30 Jan 2025 16:07:52 GMT</pubDate>
    </item>
    <item>
      <title>探索动态、记忆驱动的神经结构——想法和反馈？</title>
      <link>https://www.reddit.com/r/opensource/comments/1idnqqu/exploring_a_dynamic_memorydriven_neural/</link>
      <description><![CDATA[大家好，我一直在探索一种具有一些非常规特征的自定义神经架构，我很想听听你们的想法。目标是创建一个更具适应性和记忆驱动性的模型，该模型可以随着时间的推移而动态发展。 主要功能和推理： - 分层记忆系统：网络不再仅仅依赖于权重更新，而是将其记忆构建为短期、中期和长期集群。这有助于保留相关信息，同时允许不太重要的数据随着时间的推移而衰减。 - 动态适应和神经元进化：根据性能（状态历史、执行时间、权重变化）不断评估神经元。表现不佳的会被修剪，而成功的则会得到强化或复制，从而形成一种无需手动再训练即可发展的架构。 - 记忆驱动学习和反向传播增强：系统采用记忆机制来存储和组织过去的神经元状态，让过去的经验影响学习，而不是仅仅依靠基于梯度的更新。 - 预测编码和未来状态预测：该模型不只是对输入数据做出反应；它根据存储的记忆模式主动预测未来状态，提高响应效率并降低错误率。 - 自组织结构和自主管理：不是采用固定架构，而是基于性能指标动态地添加、删除或重新组织神经元，从而使网络既可扩展又具有计算效率。 - 长期知识保留：与由于权重覆盖而忘记过去数据的传统模型不同，这种方法保留了结构化的分层记忆以供长期学习。 - 实时适应和稳定性控制：学习参数（例如学习率、记忆衰减因素）是动态调整的，而不是固定的，有助于无需手动调整即可保持稳定性。 基本概述： 每个神经元都维持一个状态和输出，形成相互连接的层。  训练循环更新神经元状态并计算输出：  输出 = tanh（状态 * 尺度 + 偏差）  每次迭代都会计算错误和性能指标。神经元会动态更新，记忆用于反向传播和梯度计算。 神经元管理系统会根据状态历史、执行时间和权重变化定期移除表现不佳的神经元。 结构化记忆系统会在未来运行中保存并重新加载，从而提供跨会话的连续性。  希望得到反馈 - 哪些方面可以改进？是否存在不必要的组件？对进一步优化代码有什么想法吗？ 如果您想更好地描述架构，可以访问我的 github 页面，请注意代码使用 metal api，因为我没有 nvidia gpu 但仍然想使用 gpu 功能，而且代码在形式上是相当难以阅读的，但如果您仍想访问这里，它是 https://github.com/Okerew/Neural-Web/tree/main，其当前形式的模型比真正的项目更具实验性。UI    提交人    /u/Okerew   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idnqqu/exploring_a_dynamic_memorydriven_neural/</guid>
      <pubDate>Thu, 30 Jan 2025 14:07:51 GMT</pubDate>
    </item>
    <item>
      <title>首次启动我的开源项目</title>
      <link>https://www.reddit.com/r/opensource/comments/1idmpm0/first_time_launching_my_opensource_project/</link>
      <description><![CDATA[大家好， 我只是想分享一下，我构建了一个开源框架，它允许您通过用简单的语言定义您需要的内容并设置输入/输出模式来自动构建 ML 模型。在底层，它使用图形搜索和 LLM 来探索不同的模型并比较它们的性能。 但它是一个早期 alpha，我还在弄清楚事情。如果这听起来很有趣（或者像是一个坏主意），repo 在这里：https://github.com/plexe-ai/smolmodels。很想听听你的想法 ❤️     提交人    /u/Pale-Show-2469   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idmpm0/first_time_launching_my_opensource_project/</guid>
      <pubDate>Thu, 30 Jan 2025 13:16:15 GMT</pubDate>
    </item>
    <item>
      <title>具有垂直切片架构和事件驱动架构的实用 java spring boot 微服务</title>
      <link>https://www.reddit.com/r/opensource/comments/1idk2vf/practical_java_spring_boot_microservices_with/</link>
      <description><![CDATA[您可以在以下位置找到 booking-microservices-java-spring-boot 项目的源代码： https://github.com/meysamhadeli/booking-microservices-java-spring-boot 💡我构建了一个具有垂直切片和事件驱动架构的微服务，以在 Spring Boot 中创建一个微服务应用程序。 在这里我列出了它的一些功能： ❇️ 使用垂直切片架构进行架构级别。 ❇️ 使用 Spring MVC 作为 Web 框架。 ❇️ 使用领域驱动设计（DDD）在微服务中实现所有业务流程。 ❇️ 在 Rabbitmq 之上使用 Spring AMQP 进行事件我们的微服务之间的驱动架构。 ❇️ 使用 gRPC 在我们的微服务之间进行内部通信。 ❇️ 使用带有 Mediator 库的 CQRS 实现。 ❇️ 使用 Spring Data JPA 进行数据持久化，并在写入端使用 Postgres 进行 ORM。 ❇️ 使用 Spring Data MongoDB 进行数据持久化，并在读取端使用 MongoDB 进行 ORM。 ❇️ 使用收件箱模式确保接收方的消息幂等性和精确一次传递。 ❇️ 使用发件箱模式确保没有消息丢失并且至少有一次传递。 ❇️ 使用单元测试来测试小单元并使用 Mockito 模拟我们的依赖关系。 ❇️ 使用端到端测试和集成测试，使用测试容器测试所有依赖项的功能。 ❇️ 使用 Spring在 Mediator 之上的验证器和验证管道行为。 ❇️ 使用 Springdoc Openapi 在 Spring Boot 中生成 OpenAPI 文档。 ❇️ 使用 OpenTelemetry Collector 收集指标、跟踪和结构化日志。 ❇️ 使用 Kibana 在 OpenTelemetry Collector 之上进行日志记录。 ❇️ 使用 Jaeger 在 OpenTelemetry Collector 之上进行分布式跟踪。 ❇️ 使用 OpenTelemetry 在 Prometheus 和 Grafana 之上进行监控。 ❇️ 使用 Keycloak 基于 OpenID-Connect 和 OAuth2 进行身份验证和授权。 ❇️ 使用 Spring Cloud Gateway 作为微服务网关。 🌟 如果觉得有用，别忘了给项目加星标！    由   提交  /u/Spare-Spray6508   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1idk2vf/practical_java_spring_boot_microservices_with/</guid>
      <pubDate>Thu, 30 Jan 2025 10:29:03 GMT</pubDate>
    </item>
    <item>
      <title>介绍出色的开源 AI：追踪优秀开源模型的列表</title>
      <link>https://www.reddit.com/r/opensource/comments/1id9k4a/introducing_awesome_open_source_ai_a_list_for/</link>
      <description><![CDATA[        由    /u/SuccessIsHardWork  提交  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1id9k4a/introducing_awesome_open_source_ai_a_list_for/</guid>
      <pubDate>Thu, 30 Jan 2025 00:41:45 GMT</pubDate>
    </item>
    <item>
      <title>Reddit 抓取工具，用于统计用户在某个 subreddit 中发了多少帖子</title>
      <link>https://www.reddit.com/r/opensource/comments/1id8rba/reddit_scraper_that_counts_how_many_posts_a_user/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1id8rba/reddit_scraper_that_counts_how_many_posts_a_user/</guid>
      <pubDate>Thu, 30 Jan 2025 00:04:09 GMT</pubDate>
    </item>
    <item>
      <title>Mathesar 是一款类似电子表格的 DB 工具，目前处于测试阶段，发布版本为 v0.2.0。</title>
      <link>https://www.reddit.com/r/opensource/comments/1id746f/mathesar_spreadsheetlike_db_tool_is_now_in_beta/</link>
      <description><![CDATA[嗨 /r/opensource，  我从事一个名为 Mathesar 的项目，我们刚刚发布了 0.2.0，这是我们的初始测试版本！这标志着我们从 alpha 过渡到 beta，这意味着该项目现在更加稳定，经过了全面测试，我们可以放心地说它已准备好与生产 PostgreSQL 数据库一起使用。  如果这是您第一次听说 Mathesar：我们是一个直观、开源、类似于电子表格的 PostgreSQL 数据库 UI。Mathesar 使用和操作 Postgres 模式、主键、外键、约束和数据类型。例如：“关系”在我们的 UI 中是数据库中的外键。我们尝试尽可能坚持 Postgres 范例，而不添加我们自己的自定义抽象。  你不应该“学习 Mathesar”；而是应该通过使用 Mathesar 来了解有关 Postgres 的更多信息。 我们的功能包括：  连接到现有的 Postgres 数据库，或从头开始创建一个新的数据库。 使用 Postgres 角色和权限进行访问控制。 与您的数据库以及 Postgres 生态系统中的数千种其他工具和谐地协同工作。 轻松创建和更新 Postgres 模式和表。 使用我们类似电子表格的界面来查看、创建、更新和删除表记录。 过滤、排序和分组 - 以不同的方式切分您的数据。 使用我们的数据资源管理器来构建查询，而无需了解任何有关 SQL 或连接的知识。 轻松将数据导入和导出到 Mathesar 以便在其他地方使用您的数据。 数据建模支持 - 只需两次单击即可在表之间传输列。  此版本添加了基于 Postgres 的访问控制，成倍地提高了 UI 性能，并添加了一些不错的生活质量功能，如导出数据、全面的用户指南等。  以下是一些链接：  发行说明 安装：Docker Compose 安装 和 从头开始安装 GitHub repo 和 文档 网站  我很乐意收到反馈、想法、批评，几乎任何东西。如果您需要安装 Mathesar 方面的帮助，我也很乐意帮助您入门。您还可以加入我们在 Matrix 上的社区，与我们实时聊天。谢谢！ 以下是我们接下来考虑构建的一些功能：  为管理员提供更好的工具，包括 SSO、PostgreSQL 行级安全性的 UI 以及通过外部数据包装器对非 Postgres 数据库的支持。 更多编辑和查询数据的方式，例如用于查询构建和编辑的统一界面、自定义输入表单和内置 SQL 编辑器。 扩展对数据类型的支持，包括位置数据（通过 PostGIS）、长格式/格式化文本（例如 Markdown）以及各种文件和图像类型。  我们的路线图最终将由我们的 beta 用户的反馈决定。如果您想在 Mathesar 中看到什么，请告诉我们！    提交人    /u/zack-krida   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1id746f/mathesar_spreadsheetlike_db_tool_is_now_in_beta/</guid>
      <pubDate>Wed, 29 Jan 2025 22:51:16 GMT</pubDate>
    </item>
    </channel>
</rss>
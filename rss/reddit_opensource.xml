<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Sun, 22 Dec 2024 01:53:22 GMT</lastBuildDate>
    <item>
      <title>crypt.fyi - 开源、短暂、零知识秘密共享，具有端到端加密</title>
      <link>https://www.reddit.com/r/opensource/comments/1hjkbnz/cryptfyi_opensource_ephemeral_zeroknowledge/</link>
      <description><![CDATA[https://github.com/osbytes/crypt.fyi 我建立这个项目是为了获得学习经验，以进一步了解网络安全最佳实践，并改进解决类似问题的现有工具。 渴望收到任何反馈。    提交人    /u/codectl   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hjkbnz/cryptfyi_opensource_ephemeral_zeroknowledge/</guid>
      <pubDate>Sat, 21 Dec 2024 22:02:57 GMT</pubDate>
    </item>
    <item>
      <title>我不明白为什么这么多人对 CLA 双重许可开源有意见</title>
      <link>https://www.reddit.com/r/opensource/comments/1hjf3aq/i_dont_understand_why_so_many_people_have_problem/</link>
      <description><![CDATA[让我们从我们都应该同意的事情开始。如果开源项目的作者希望使其自我维持，这并没有错。 一些开发人员有固定的工作，并在空闲时间开发开源。但这不应该是必需的。应该有可能将开发开源作为全职工作并因此获得报酬。 捐赠是可能的，但并不确定。作者应该有办法出售他们的软件并通过这种方式获得稳定的生计。 但是你如何销售开源？如果你使用一些宽松的许可证，人们就不可能为此付费。那基本上就是捐赠。 唯一现实的方法是使用像 AGPL 这样的限制性许可证，并将专有许可证出售给需要它的企业，因为他们不能使用 AGPL。 如果他们是唯一的开发者和版权持有者，这是完全可以的。但是，如果他们想从社区接受拉取请求怎么办？有些人想要特定的改进，他们可以自己决定实施，而不是等待作者。 但作者不能只是合并这些更改，因为这样就无法向企业提供专有许可。 因此，他们唯一的方法是引入 CLA，赋予原作者重新授权更改的权利。 人们经常对这部分有疑问。我不明白为什么。大多数开源项目主要由单个作者开发，只有少数改进是由社区完成的。 如果您使用这样的开源软件，为什么签署 CLA 会有问题？作者在经济上依赖于销售专有许可版本。这就是开源项目可持续发展的原因。我们同意可持续开源是好的。 作者允许您免费使用该软件。你不必为此付费。你会从他们的工作中受益匪浅。 如果您做出了改进，为什么不允许作者重新授权更改，以便他们能够继续谋生？也许你应该把它看作是一种捐赠。但你捐赠的不是金钱，而是改进。 基本上，如果你支持可持续开源，也许你应该让作者谋生，即使这意味着签署 CLA。    提交人    /u/Simple-Minute-5331   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hjf3aq/i_dont_understand_why_so_many_people_have_problem/</guid>
      <pubDate>Sat, 21 Dec 2024 17:51:26 GMT</pubDate>
    </item>
    <item>
      <title>这里有没有人推广他们的烹饪书？如果有，哪些平台/内容效果最好？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj7a6v/does_anyone_here_promote_their_cookbooks_if_so/</link>
      <description><![CDATA[我想发展一些开源项目。 提前致谢！    提交人    /u/omnisvosscio   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj7a6v/does_anyone_here_promote_their_cookbooks_if_so/</guid>
      <pubDate>Sat, 21 Dec 2024 10:34:10 GMT</pubDate>
    </item>
    <item>
      <title>在我的专有软件中使用多许可代码作为库</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj52ca/using_multilicensed_code_as_a_library_in_my/</link>
      <description><![CDATA[我想要将双重许可的 git-filter-repo 用作我的专有和商业应用程序中的库，我的意思是：1) 我想要将应用程序作为二进制文件、可执行文件或包出售，但不披露其源代码。2) 我想要通过这个应用程序赚钱。3) 我想要根据用户选择的各种支持计划为这个应用程序提供保修和支持。 git-filter-repo 具有双重许可，具体如下：1) 主许可文件，指出 repo 下的大多数文件均遵循 MIT 许可。我对 git-filter-repo 文件 感兴趣，我认为它是在 MIT 许可证下提供的。2) MIT 许可证文件。 3）GPL 许可证文件。 该项目仍处于规划阶段，因此我在实际实施之前正在进行实验，并且我不想破坏任何许可证合规性。 我计划使用 git-filter-repo 软件的主要方式有三种：1）从我的应用程序中作为子进程调用： ```python subprocess.run([&#39;git-filter-repo&#39;, *args], check=True) ```  2）作为库： ```python import git_filter_repo as gfr ```  3）将 git_filter_repo 文件（这是我唯一感兴趣的文件）复制到我的项目中，然后导入it: ```python import git_filter_repo as gfr ```  我需要澄清：1) 如果我使用了上述任何一种用法，即子进程、库、源，我是否需要开源我的应用程序？2) 如果要求我开源我的项目，那么我应该使用哪种许可证，以便允许我且只有我将我的应用程序作为商业和专有产品出售，从而从中获利？3) 如果除了子进程或库调用之外还有其他方法可以使用 git-filter-repo，我还能保持我的源代码封闭吗？ 4) 如果我如上所述在内部使用 git-filter-repo，我是否可以获得应用程序设计和/或代码的专利？ 我已经经历过：1) 在我的项目中使用 MIT 许可库。这个问题只谈到 MIT 许可证，而不是双重许可证，我不明白我是否需要开源/链接 git-filter-repo 的源代码以及我的代码文档或用户手册。 2) 将 GPL 代码放入单独的独立程序中，在专有闭源程序中使用 GPL 代码是否合法？。 2.a) 如果我使用 git-filter-repo 作为库或 python 导入，是否需要开源我自己的应用程序？2.b) 我的义务是什么？ 3) 如何管理项目中的多许可组件。由于 git-filter-repo 是双重许可的，根据上述问题的答案，我可以假设 MIT 许可证吗，因为它看起来比 GPL 更宽容闭源专有商业软件？ 任何帮助都值得赞赏。    提交人    /u/Low_Calligrapher_290   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj52ca/using_multilicensed_code_as_a_library_in_my/</guid>
      <pubDate>Sat, 21 Dec 2024 07:43:44 GMT</pubDate>
    </item>
    <item>
      <title>闭源软件中的 BSD 2 条款许可证</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj4ldz/bsd_2clause_license_in_closedsource_software/</link>
      <description><![CDATA[我正在构建一个闭源 Web 应用程序，它将使用 BSD 2-Clause 许可证下的库。 我对许可证的理解是，版权的副本必须包含在重新分发中，但不清楚的是重新分发的定义。 我必须在网站上公开版权吗？还是我应该将版权与源代码一起包含？    提交人    /u/dotnet_ninja   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj4ldz/bsd_2clause_license_in_closedsource_software/</guid>
      <pubDate>Sat, 21 Dec 2024 07:07:37 GMT</pubDate>
    </item>
    <item>
      <title>谷歌输入工具的替代品</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj466i/alternative_for_google_input_tool/</link>
      <description><![CDATA[我正在使用适用于 Windows 的谷歌输入工具（ms word），但谷歌停止了桌面输入工具（现在仅适用于网络）所以有没有开源替代品（用于桌面）    提交人    /u/GJ747   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj466i/alternative_for_google_input_tool/</guid>
      <pubDate>Sat, 21 Dec 2024 06:37:34 GMT</pubDate>
    </item>
    <item>
      <title>LTX Video 的最新更新</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj296v/ltx_videos_latest_update/</link>
      <description><![CDATA[终于在开源视频生成中看到了真正的竞争 - LTX Video 的最新更新 一直在关注开源视频生成的发展，刚刚遇到了 LTX Video 0.9.1。对于那些不熟悉的人来说，这是一个高效的视频生成框架，试图解决我们经常看到的资源瓶颈。这次更新引起了我的注意： 团队设法消除了困扰大多数开放框架的那些可怕的频闪纹理。任何玩过视频生成的人都知道我在说什么 - 那些让一切看起来都像坏了的电视机的奇怪的闪烁伪影。消失了。 资源使用率仍然出奇地合理。能够在普通硬件上运行它，而不会出现通常的 VRAM 问题。这可能是大多数开源视频项目进入的最大障碍，所以看到这一点令人耳目一新。 一个有趣的技术选择是他们对 AI 生成的图像的处理。他们实施了一个图像降级系统，似乎可以产生更自然的运动。这是一个解决社区一直感到沮丧的问题的明智方法。 注意事项：如果您想使用新的 VAE 改进（相信我，您会这样做），您现在需要它们特定的 ComfyUI 节点。可在 https://github.com/Lightricks/ComfyUI-LTXVideo 对于想要进行实验的同行：他们的文档（https://github.com/Lightricks/LTX-Video）建议从图像字幕开始作为基本描述，然后手动添加运动元素。经过一些测试，这肯定会比直接跳到运动提示产生更好的效果。 真的很高兴看到它的发展方向。这个领域已经停滞了一段时间，所以拥有可靠的开源替代方案来推动创新正是我们所需要的。    提交人    /u/hadjiprimesx30   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj296v/ltx_videos_latest_update/</guid>
      <pubDate>Sat, 21 Dec 2024 04:33:31 GMT</pubDate>
    </item>
    <item>
      <title>MSTO - 利用新闻情绪以折扣价购买股票的股票算法</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj1vkv/msto_stock_algorithm_for_buying_stocks_at_a/</link>
      <description><![CDATA[MSTO(https://github.com/cenab/MSTO) 是一个由 Python 驱动的交易程序，旨在分析股票价格走势和新闻情绪，以做出明智的交易决策。它利用模块化的类似微服务的架构来实现灵活的策略执行和无缝的可扩展性。 它有什么作用？  实时股票监控：持续跟踪股票价格和市场数据。 新闻情绪分析：阅读和评估新闻文章以获得可行的见解。 突然降价检测：将大幅降价标记为潜在的买入机会。 自动交易决策：根据预定义的策略执行交易。 与交易平台集成：将交易信号直接发送到 TradingView 或其他平台进行执行。  为什么选择 MSTO？模块化和可扩展的架构 MSTO 在单个服务中使用模块化、受微服务启发的架构。每种交易策略都作为独立的、并发的“服务”运行可以无缝添加或更新而不影响其他策略。  并行策略执行：多个策略可以同时运行，独立分析股票和新闻。 可扩展设计：能够同时处理数百只股票，并高效利用资源。 异步处理：实时分析股票数据和新闻，不会出现延迟或阻塞。 可扩展性：添加或修改交易策略，而不会破坏现有功能。  最酷的部分：编写您自己的策略 MSTO 在构建时考虑了灵活性，可轻松自定义和部署您的交易逻辑。  易于使用的策略模板：预构建的示例可让您快速入门。 回测支持：在部署之前使用历史数据验证您的想法 即时部署：以最少的配置快速启动策略。  示例：仅用几行代码即可实施当股票下跌 5% 且有正面新闻情绪时买入的策略。 主要功能  动态监控和分析  同时监控多只股票并分析相关新闻。 实时处理价格变动、情绪和基本指标。  可立即使用的内置策略  基本事件驱动：评估公司特定事件，如收益、合并或管理层变动。 简单波动：识别突然的价格波动以寻找潜在的交易机会。 根据您的需求创建定制策略。  无缝部署和执行  轻松设置：使用 Docker 在任何平台上进行精简部署。 云就绪：与 AWS 和其他云提供商兼容，可进行大规模操作。 强大的数据库集成：使用 PostgreSQL 进行可靠的数据存储和检索。   技术堆栈  Python 3.10 具有灵活性和高性能。 Docker 可轻松跨环境部署。 PostgreSQL 可实现强大且可扩展的数据管理。 异步框架 用于实时并行处理。  入门  克隆存储库（https://github.com/cenab/MSTO）。 设置您的 API 密钥（例如，新闻、交易平台）。 选择要监控的股票。 选择或创建您的交易策略。 运行 MSTO 并让它处理其余部分。  MSTO 使初学者和经验丰富的交易者都能够轻松地自动化、测试和改进他们的交易想法。其模块化架构确保添加新策略、扩展或部署到新环境简单而高效。无论您是在测试概念还是执行实时交易，MSTO 都能满足您的需求。    提交人    /u/helloitsmebatu   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj1vkv/msto_stock_algorithm_for_buying_stocks_at_a/</guid>
      <pubDate>Sat, 21 Dec 2024 04:09:53 GMT</pubDate>
    </item>
    <item>
      <title>我最好的 roku 替代品是什么？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiyp3y/whats_my_best_option_for_a_roku_alternative/</link>
      <description><![CDATA[我曾经很喜欢我的 roku，但每年都会用广告换取性能。我们主要用它观看流媒体服务：netflix、disney、max、youtube 和 paramount。 我看过 kodi。如果我们有一个媒体库，它看起来会很棒，但我找不到插件来让它支持我们观看的服务。 Mythtv 似乎仍在做 DVR 的东西，但我们不再支付有线电视费了。    提交人    /u/SuperfluousBrain   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiyp3y/whats_my_best_option_for_a_roku_alternative/</guid>
      <pubDate>Sat, 21 Dec 2024 01:08:18 GMT</pubDate>
    </item>
    <item>
      <title>与 MIT 无署名和未授权的双重授权</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiwcqz/duallicensing_with_the_mit_no_attribution_and/</link>
      <description><![CDATA[为了获得最大的自由，我想将我的软件放入公共领域。但是，公共领域的概念并非在每个司法管辖区都存在。因此，我想使用宽松许可证和非许可证双重许可。有趣的是，stb（C/C++ 的单文件公共领域库）在 MIT 和非许可证下获得双重许可。请参阅https://github.com/nothings/stb/blob/master/LICENSE。但是，MIT 许可证要求对软件进行署名。我希望我的软件尽可能宽松，所以我用同样的想法制作了自己的许可证，但使用 MIT 无署名 (MIT-0) 而不是 MIT。以下是许可证文本，从现在起我将在我的开源项目中使用它： ``` 该软件有两种许可证 - 请选择您喜欢的任意一种。  许可证 1 - MIT 无署名 (MIT-0) 版权所有 &lt;YEAR&gt; &lt;版权所有者&gt; 特此授予获得此软件和相关文档文件（“软件”）副本的任何人免费许可，以无限制方式处理软件，包括但不限于使用、复制、修改、合并、发布、分发、再许可和/或销售软件副本的权利，以及允许向其提供软件的人员这样做。 该软件按“原样”提供，不作任何形式的保证，无论明示或暗示，包括但不限于适销性、针对特定目的的适用性和不侵权性的保证。在任何情况下，作者或版权所有者均不对任何索赔、损害或其他责任负责，无论是合同行为、侵权行为还是其他行为，无论是由软件或使用或其他处理软件引起的，还是与之相关的。  许可证 2 - 未授权 https://unlicense.org 这是免费且不受限制的软件，已发布到公共领域。 任何人都可以自由复制、修改、发布、使用、编译、销售或分发此软件，无论是以源代码形式还是编译后的二进制文件形式，用于任何目的，无论是商业还是非商业目的，通过任何方式。 在承认版权法的司法管辖区，本软件的作者或作者们将软件中的所有版权利益奉献给公共领域。我们做出此奉献是为了广大公众的利益，但会损害我们的继承人和继任者的利益。我们打算将此奉献视为永久放弃版权法规定的此软件的所有现有和未来权利的公开行为。 本软件按“原样”提供，不作任何形式的保证，无论明示或暗示，包括但不限于适销性、针对特定目的的适用性和不侵权性的保证。在任何情况下，作者均不对任何索赔、损害或其他责任负责，无论是合同行为、侵权行为还是其他行为，无论是由软件或使用或以其他方式处理软件而引起、由其引起或与之有关。 ```    提交人    /u/SaltyMaybe7887   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiwcqz/duallicensing_with_the_mit_no_attribution_and/</guid>
      <pubDate>Fri, 20 Dec 2024 23:09:04 GMT</pubDate>
    </item>
    <item>
      <title>WordleWacker，每日提供 Wordle 解决方案！</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiu8ap/wordlewacker_wordle_solutions_daily/</link>
      <description><![CDATA[      欢迎试用这款可自动解决 Wordle 问题的 chrome 扩展程序。打开问题以报告错误或提出功能请求。    提交人    /u/GamerG3arYT   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiu8ap/wordlewacker_wordle_solutions_daily/</guid>
      <pubDate>Fri, 20 Dec 2024 21:27:52 GMT</pubDate>
    </item>
    <item>
      <title>寻求项目的早期反馈</title>
      <link>https://www.reddit.com/r/opensource/comments/1hirgpu/looking_for_early_feedback_on_project/</link>
      <description><![CDATA[我目前正在为我制作的一种（严肃的）语言开发编译器。我之前从未开发过编译器或更大规模的开源项目，因此，一些早期的反馈将有助于避免早期出现问题。 欢迎任何贡献！ 链接：https://github.com/BlackFuffey/Polymerizer 请注意，语言规范的链接已损坏，因为该存储库很乱，我决定将其保密，直到编译器达到&quot;可用&quot; 阶段。所有已实现的内容都在 test.kev    提交人    /u/BlackFuffey   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hirgpu/looking_for_early_feedback_on_project/</guid>
      <pubDate>Fri, 20 Dec 2024 19:21:55 GMT</pubDate>
    </item>
    <item>
      <title>在哪里可以找到开源项目？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hinsa5/where_to_find_open_source_projects/</link>
      <description><![CDATA[我是初学者，我想知道在哪里可以找到可以贡献的开源项目     提交人    /u/Historical-Chip-5152   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hinsa5/where_to_find_open_source_projects/</guid>
      <pubDate>Fri, 20 Dec 2024 16:39:54 GMT</pubDate>
    </item>
    <item>
      <title>创建了一个极简的、仅供客户端使用的电子邮件签名生成器</title>
      <link>https://www.reddit.com/r/opensource/comments/1himzfp/created_an_ultraminimal_clientonly_email/</link>
      <description><![CDATA[不想一直被打扰，所以我想我只需创建自己的生成器。  GitHub：https://github.com/activenode/signature-project  页面：signature.activeno.de     由   提交  /u/activenode   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1himzfp/created_an_ultraminimal_clientonly_email/</guid>
      <pubDate>Fri, 20 Dec 2024 16:03:38 GMT</pubDate>
    </item>
    <item>
      <title>开源产品的商业模式</title>
      <link>https://www.reddit.com/r/opensource/comments/1hildeu/business_model_for_open_source_product/</link>
      <description><![CDATA[大家好， 在不伤害社区的情况下，将开源产品货币化的最佳方式是什么。销售插件、限制功能还是其他什么？你对此事有什么经验？    提交人    /u/kalintush   [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hildeu/business_model_for_open_source_product/</guid>
      <pubDate>Fri, 20 Dec 2024 14:48:36 GMT</pubDate>
    </item>
    </channel>
</rss>
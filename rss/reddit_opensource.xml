<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Mon, 30 Dec 2024 03:29:45 GMT</lastBuildDate>
    <item>
      <title>石头剪刀布竞赛网站（开源）</title>
      <link>https://www.reddit.com/r/opensource/comments/1hpc65l/competitive_rockpaperscissors_website_open_source/</link>
      <description><![CDATA[        提交人    /u/tarolling   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hpc65l/competitive_rockpaperscissors_website_open_source/</guid>
      <pubDate>Mon, 30 Dec 2024 01:59:59 GMT</pubDate>
    </item>
    <item>
      <title>TidesDB 🌊——开源高性能存储引擎（v0.6.0b）发布！</title>
      <link>https://www.reddit.com/r/opensource/comments/1hpbumz/tidesdb_opensource_highperformance_storage_engine/</link>
      <description><![CDATA[大家好！希望你们都过得很好。我想分享一下 TidesDB。最近刚刚发布了 v0.6.0 beta 版，我想分享一下。我每天上班前下班后都在研究 TidesDB。这是我发起的一个充满激情的项目。这是一个新的开源存储引擎，可与 RocksDB 相媲美，但设计和实现完全不同。TidesDB 的设计简单、快速、高效、耐用且支持事务。TidesDB 提供了许多简单而实用的功能，让您的嵌入式存储引擎之旅成为一次享受。我希望您查看 TidesDB 并提出您的想法、观点、问题等。我很乐意看到并回答它们！ 功能   ACID 事务是原子的、一致的、隔离的和持久的。事务与各自的列族绑定。  并发多个线程可以读取和写入存储引擎。列族使用读写锁，因此每个列族允许多个读取器和一个写入器。提交和回滚时的事务会阻止其他线程读取或写入列族，直到事务完成为止。事务本身也是线程安全的。  列族将数据存储在单独的键值存储中。每个列族都有自己的内存表和 sstable。  原子事务原子地提交或回滚多个操作。当事务失败时，它会回滚所有已提交的操作。  Cursor向前和向后迭代键值对。  WAL预写日志以确保持久性。列族在启动时重放 WAL。如果列族在关闭之前未达到阈值，则这将重建内存表。  多线程压缩手动多线程配对和合并 sstables 压缩。运行时例如 10 个 sstables 压缩为 5 个配对和合并。每个线程负责一对 - 您可以设置用于压缩的线程数。  后台部分合并压缩可以启动后台合并压缩。如果启动，系统将在后台从最旧到最新逐步合并 sstables。每 n 秒进行一次合并。合并不是并行完成的，而是逐步完成的。  布隆过滤器通过读取 sstables 的初始块来检查密钥的存在，从而减少磁盘读取。  压缩压缩是使用 Snappy、LZ4 或 ZSTD 实现的。 SStable 条目可以像 WAL 条目一样被压缩。  TTL 键值对的生存时间。  可配置 列族可配置 memtable 刷新阈值、数据结构、如果跳过列表最大级别、如果跳过列表概率、压缩和布隆过滤器。  错误处理 API 函数返回错误代码和消息。  简单的 API 简单易用的 api。  多个 Memtable 数据结构 memtable 可以是跳过列表或哈希表。  多平台 Linux、MacOS 和 Windows 支持。  https://github.com/orgs/tidesdb/discussions/244 https://github.com/tidesdb/tidesdb 感谢您查看我的帖子！ - 亚历克斯    由   提交  /u/diagraphic   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hpbumz/tidesdb_opensource_highperformance_storage_engine/</guid>
      <pubDate>Mon, 30 Dec 2024 01:43:56 GMT</pubDate>
    </item>
    <item>
      <title>开源 Sceneri 的标准库——自定义分配器、高级 IO、3D 数学以及更多用于我们的 3D 体验和游戏的功能。</title>
      <link>https://www.reddit.com/r/opensource/comments/1hpagdz/opensourcing_sceneris_standard_librarycustom/</link>
      <description><![CDATA[        提交人    /u/i59   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hpagdz/opensourcing_sceneris_standard_librarycustom/</guid>
      <pubDate>Mon, 30 Dec 2024 00:35:43 GMT</pubDate>
    </item>
    <item>
      <title>新的开源 API 回归 CLI 工具</title>
      <link>https://www.reddit.com/r/opensource/comments/1hp8cnm/new_open_source_api_regression_cli_tool/</link>
      <description><![CDATA[寻求对我的全新 api 回归 cli 工具的反馈。它可以在 https://github.com/thecodinghumans/ApiRegressionCLI 上找到。 该项目的主要目标：支持使用单个命令测试 API 的多种场景和功能。 我发现现有 CLI 的主要问题是它们要么不在本地存储请求的集合/集合，要么它们的格式化方式与源代码控制不兼容。 其他优点 - 不存储在云中（也不打算这样做） - 不需要 GUI 来运行 - 允许对 api 进行比大多数合成物更多的检查 如果有人有任何想法，请告诉我    提交人    /u/metalprogrammer2024   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hp8cnm/new_open_source_api_regression_cli_tool/</guid>
      <pubDate>Sun, 29 Dec 2024 22:57:15 GMT</pubDate>
    </item>
    <item>
      <title>“但是你如何防止别人拿走你的东西呢？”</title>
      <link>https://www.reddit.com/r/opensource/comments/1hp6mzu/but_how_do_you_prevent_someone_from_taking_your/</link>
      <description><![CDATA[我正在开发一个免费软件项目。我父母经常问我一个关于这个项目的问题：“但是你如何防止别人窃取这个？”  我有自己的回答方式，无论是从实践上还是从哲学上，但我想知道其他人怎么说。如果你在一个免费软件和/或开源项目上投入了大量时间，而你生活中的某个人问了这个问题，你是如何回答的？    提交人    /u/AutomaticDoor75   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hp6mzu/but_how_do_you_prevent_someone_from_taking_your/</guid>
      <pubDate>Sun, 29 Dec 2024 21:40:26 GMT</pubDate>
    </item>
    <item>
      <title>[YT-X] 从终端浏览 YouTube；yt-dlp 包装器</title>
      <link>https://www.reddit.com/r/opensource/comments/1hp5oj5/ytx_browse_youtube_from_the_terminal_ytdlp_wrapper/</link>
      <description><![CDATA[    /u/BenX855   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hp5oj5/ytx_browse_youtube_from_the_terminal_ytdlp_wrapper/</guid>
      <pubDate>Sun, 29 Dec 2024 20:59:43 GMT</pubDate>
    </item>
    <item>
      <title>Air Script 是一款可以破解 Wi-Fi 的瑞士军刀，当捕获到握手信息时还可以选择发送电子邮件通知。</title>
      <link>https://www.reddit.com/r/opensource/comments/1hp1pke/air_script_is_wifi_pwning_swiss_army_knife_that/</link>
      <description><![CDATA[      Air Script 是一种自动化工具，旨在促进 Wi-Fi 网络渗透测试。它通过自动执行网络扫描、握手捕获和暴力破解密码等任务，简化了识别和利用 Wi-Fi 网络的过程。主要功能包括： 自动攻击：Air Script 可以自动瞄准范围内的所有 Wi-Fi 网络，无需用户干预即可捕获握手。完成后，它会停用监控模式，并可以发送可选的电子邮件通知来通知用户。Air Script 还通过简化网络扫描、握手捕获和密码破解等任务来自动化 Wi-Fi 渗透测试，以实现有针对性的解除身份验证。 暴力破解功能：捕获握手后，该工具会提示用户提供单词列表以尝试破解 Wi-Fi 密码，或者将捕获的 Wi-Fi 握手上传到 WPA-sec 项目。该网站是一个公共存储库，用户可以在其中贡献和分析 Wi-Fi 握手以识别漏洞。该服务尝试使用其广泛的已知密码和单词表数据库来破解握手。 电子邮件通知：用户可以选择在成功捕获握手后接收电子邮件警报，从而可以远程监控攻击的进度。 附加工具：Air Script 包含各种补充工具，可增强黑客、渗透测试人员和安全研究人员的工作流程。用户可以根据需要选择要安装的工具。 兼容性：该工具与 Raspberry Pi 等设备兼容，可实现谨慎操作。用户可以从移动设备通过 SSH 进入 Pi，而无需越狱或 root 访问权限。    提交人    /u/AFGjkn2r   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hp1pke/air_script_is_wifi_pwning_swiss_army_knife_that/</guid>
      <pubDate>Sun, 29 Dec 2024 18:03:39 GMT</pubDate>
    </item>
    <item>
      <title>开源劫持</title>
      <link>https://www.reddit.com/r/opensource/comments/1hoxjz0/open_source_hijack/</link>
      <description><![CDATA[我一直在使用一些故意限制分发的开源软件。您是否遇到过这种情况或使用过任何分发受限的开源软件？我相信主要的开发人员担心大型公司分叉并扼杀开发。我知道 IBM 和 MS 有一些这样的例子，他们采用了扩展消灭策略。这些人只是偏执吗？    提交人    /u/paulyivgotsomething   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hoxjz0/open_source_hijack/</guid>
      <pubDate>Sun, 29 Dec 2024 14:53:31 GMT</pubDate>
    </item>
    <item>
      <title>IBM 量子计算机上的 Shor 算法实现</title>
      <link>https://www.reddit.com/r/opensource/comments/1how0aa/shors_algorithm_implementation_on_ibm_quantum/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1how0aa/shors_algorithm_implementation_on_ibm_quantum/</guid>
      <pubDate>Sun, 29 Dec 2024 13:28:16 GMT</pubDate>
    </item>
    <item>
      <title>有没有 SmallPDF 的开源替代品？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hoq6wz/is_there_an_opensource_alternative_to_smallpdf/</link>
      <description><![CDATA[大家好， 您知道任何提供 SmallPDF 所有功能和选项的开源应用程序吗？或者，是否有几种工具可以组合以实现类似的功能？ 感谢您的帮助！    提交人    /u/umen   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hoq6wz/is_there_an_opensource_alternative_to_smallpdf/</guid>
      <pubDate>Sun, 29 Dec 2024 06:37:28 GMT</pubDate>
    </item>
    <item>
      <title>我构建了一个库，只需一个 YAML 配置即可将 Kafka 主题转换为高性能 REST API</title>
      <link>https://www.reddit.com/r/opensource/comments/1hok8yg/i_built_a_library_that_turns_kafka_topics_into/</link>
      <description><![CDATA[我已经开源了一个库，它允许您使用简单的配置文件从 Apache Kafka 消息流创建 REST API 端点。 这解决了什么问题？ 在构建现代分布式系统时，通常需要通过 REST API 公开实时流数据。传统方法需要： - 设置消息使用者并维护单独的数据库来存储数据 - 构建和维护 REST API 服务器以查询这些数据库 - 管理具有多个移动部件的复杂基础架构 - 处理由于服务之间的网络延迟而导致的性能下降问题 解决方案：这个库将所有内容简化为基于配置的方法： - 使用基于 OpenAPI 的 YAML 配置直接从消息流创建 REST 端点 - 使用 Kafka Stream 的内置存储和键值查找功能消除数据库 - 支持多种数据格式（Avro、Protobuf、JSON） - 包括使用 Prometheus 指标的内置监控 - 处理“列出全部”和“通过 ID 获取”操作 - 与架构注册表配合使用以进行架构演变 技术细节： - 使用 Kafka Streams 和 RocksDB 实现高效的本地状态存储 - 利用 Kafka 的日志压缩实现数据持久性 - REST API 处理程序由 OpenAPI 规范生成，它们可以直接查询状态存储 性能：在我们的 4 核 CPU 基准测试中： - 以每秒 7,000 个请求的速度处理随机选择的 10M 唯一键（~0.9GB 数据） - 客户端延迟（本地到服务器）：3ms (p50)、5ms (p95)、8ms (p99) 示例用例： - 需要来自许多客户端的高吞吐量微服务 - 具有简单查找的 REST 端点，例如 /users/:id 如果您发现这有用，请考虑： - 给项目加星 ⭐ - 分享反馈或想法 - 提交功能请求或改进 查看：https://github.com/tsuz/microservice-for-kafka 注意：该项目使用 Apache Kafka 作为消息传递主干，但您不需要成为 Kafka 专家即可使用它 - 配置界面设计得简单易懂且易于访问。​​​​​​​​​​​​​​​​    提交人    /u/tak215   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hok8yg/i_built_a_library_that_turns_kafka_topics_into/</guid>
      <pubDate>Sun, 29 Dec 2024 01:01:36 GMT</pubDate>
    </item>
    <item>
      <title>使用 Laravel 和 Livewire 构建的开源 ERP 和 CMS</title>
      <link>https://www.reddit.com/r/opensource/comments/1hojt3v/open_source_erp_plus_cms_being_built_with_laravel/</link>
      <description><![CDATA[大家好， https://github.com/oitcode/samarium 开发这个项目已经有一段时间了。只是想分享一下。任何来自开源社区的反馈都将不胜感激。计划很快达到 v1.0.0，目前是 v0.8.8。 谢谢。    提交人    /u/SouthBaseball7761   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hojt3v/open_source_erp_plus_cms_being_built_with_laravel/</guid>
      <pubDate>Sun, 29 Dec 2024 00:39:47 GMT</pubDate>
    </item>
    <item>
      <title>用于希尔伯特式证明探索的高性能研究软件</title>
      <link>https://www.reddit.com/r/opensource/comments/1hoizq7/highperformance_research_software_for/</link>
      <description><![CDATA[我的免费开源研究软件*工具，用 C++20 编写，旨在协助研究结构证明理论。 我努力在 GitHub 风格的 Markdown 中创建了一个令人印象深刻的 README — — 结果它相当大。我并不担心代码质量，而是担心项目被认为太复杂或混乱。 我感谢 GitHub 上的反馈和每颗星。 在 Codeberg 上还有一个镜像 - 但没有论坛功能。   * 它涉及一个小众主题，但在某些大学也开设了与它相关的逻辑本科课程 - 因此它也是教育软件。   摘要 pmGenerator 可以构建、（详尽地）收集和压缩 形式证明希尔伯特系统中用户可定义的公理集。  当前的 1.2.1 版本支持两种推理规则： D 规则：将树统一（关于公式）与肯定前件 (⊢ψ,⊢ψ→φ ⇒ ⊢φ) 相结合 N 规则：必然性 (⊢ψ ⇒ ⊢□ψ)，可选择启用  该项目的自述文件还重点介绍了我为其生成（可下载）最小证明集合的几个系统。 作为项目的一部分，我发起了证明最小化挑战。对于这个，我目前正在实施改进的证明压缩算法并准备做出大量贡献（希望在几周内发布），从目前的 126171 个证明步骤改进到少于 29000 个证明步骤，这表明对于任何希望在这个数学挑战中永垂不朽的人来说，还有相当大的空间！ :-) 问题、建议和评论可以发布在项目论坛中。我特别乐意支持新的挑战者。  该工具最简单的功能之一是它可以解析 D 证明，并根据公式打印它们。例如，DD2D1D2DD2D1311 是一个基于三个公理的 15 步 D 证明，./pmGenerator -c -n -s CpCqp,CCpCqrCCpqCpr,CCNpNqCqp --parse DD2D1D2DD2D1311 -u 的结果为 [0] DD2D1D2DD2D1311： 1. 0→(¬0→0) (1) 2. ¬0→(¬1→¬0) (1) 3. (¬1→¬0)→(0→1) (3) 4. ((¬1→¬0)→(0→1))→(¬0→((¬1→¬0)→(0→1))) (1) 5. ¬0→((¬1→¬0)→(0→1)) （D）：3,4 6. （¬0→（（¬1→¬0）→（0→1）））→（（¬0→（¬1→¬0））→（¬0→（0→1））） （2） 7. （¬0→（¬1→¬0））→（¬0→（0→1）） （D）：5,6 8. ¬0→（0→1） （D）：2,7 9. （¬0→（0→1））→（（¬0→0）→（¬0→1）） （2） 10. （¬0→0）→（¬0→1） （D）：8,9 11. （（¬0→0）→（¬0→1））→（0→（（¬0→0）→（¬0→1））） （1） 12. 0→（（¬0→0）→（¬0→1）） （D）：10,11 13. (0→((¬0→0)→(¬0→1)))→((0→(¬0→0))→(0→(¬0→1))) (2) 14. (0→(¬0→0))→(0→(¬0→1)) (D):12,13 15. 0→(¬0→1) (D):1,14  其中 -c -n -s CpCqp,CCpCqrCCpqCpr,CCNpNqCqp 表示 (1): 0→(1→0)、(2): (0→(1→2))→((0→1)→(0→2)) 和 (3): (¬0→¬1)→(1→0) 配置为 公理（以普通波兰符号给出）。 还有更多功能，例如生成、搜索、减少、转换、提取数据......自述文件中有一个完整列表。    提交人    /u/xamid   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hoizq7/highperformance_research_software_for/</guid>
      <pubDate>Sat, 28 Dec 2024 23:59:58 GMT</pubDate>
    </item>
    <item>
      <title>在听到大量关于货币化卡路里追踪器的抱怨后，我开发了一个免费的！</title>
      <link>https://www.reddit.com/r/opensource/comments/1hoe67a/after_hearing_a_ton_of_complaints_about_the/</link>
      <description><![CDATA[链接：https://github.com/femiaf13/manatee-fitness 我的很多朋友都使用 Lose it! 或 MyFitnessPal 等卡路里追踪器。我听到过很多抱怨，说它们会锁定订阅后的基本功能。压垮骆驼的最后一根稻草是不允许在没有订阅的情况下扫描条形码。我一直在寻找一个内容丰富、双关语意味十足的副项目，并决定尝试做一些好事，同时为一些人省钱！  使用 Tauri 构建，以便将 Angular 用于 GUI 并获得移动平台支持。 数据使用 SQLite 存储在设备上。 最初我只针对 Android，我也希望针对 iOS，但我没有任何 Apple 设备可以进行开发和测试。 我会说它现在是一个“晚期 alpha”。它具有大多数但不是全部功能，但只有我测试过，所以可能需要发现一些小错误。 我的妻子非常喜欢海牛，因此得名。 我已经委托了一位艺术家设计徽标，所以应该会在二月份完成。  很想听听大家的想法！目前您必须自己构建应用程序，但我的待办事项列表中确实有一项是通过 github 操作生成签名的 APK。我主要只是想现在开始传播这个消息，并希望获得一些好的功能请求或错误报告。如果您已经读到这里，感谢您的时间！    提交人    /u/hessnake   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hoe67a/after_hearing_a_ton_of_complaints_about_the/</guid>
      <pubDate>Sat, 28 Dec 2024 20:13:38 GMT</pubDate>
    </item>
    <item>
      <title>对于具有免费许可的项目来说，使用 CLA 有多普遍？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hoadru/how_common_is_the_use_of_cla_for_projects_with/</link>
      <description><![CDATA[Drew DeVault 在他多年的旧博文中这样开头：  绝大多数开源项目都附带 CLA（贡献者许可协议）...  如今这是否或多或少是事实？是少数、绝大多数项目还是几乎没有项目？ 您知道哪些当前的例子？    提交人    /u/esiy0676   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hoadru/how_common_is_the_use_of_cla_for_projects_with/</guid>
      <pubDate>Sat, 28 Dec 2024 17:23:02 GMT</pubDate>
    </item>
    </channel>
</rss>
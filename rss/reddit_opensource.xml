<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Fri, 04 Oct 2024 06:33:09 GMT</lastBuildDate>
    <item>
      <title>线束设计软件</title>
      <link>https://www.reddit.com/r/opensource/comments/1fvq1b3/harness_design_software/</link>
      <description><![CDATA[你好 我使用 FreeCAD 和 KiCAD 进行设计，我想记录我为这些项目构建的线束。有没有可以制作线束的 FOSS？ 我不是在寻找免费/有限许可的软件，而是寻找可以绘制线束的软件。在工作中我们使用 Visio，但该软件是 PIA，而且我在家只使用 Linux，因此它需要与 Linux 兼容。     提交人    /u/hazeyAnimal   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fvq1b3/harness_design_software/</guid>
      <pubDate>Fri, 04 Oct 2024 03:31:25 GMT</pubDate>
    </item>
    <item>
      <title>为什么人们建立开源项目而不是付费项目？</title>
      <link>https://www.reddit.com/r/opensource/comments/1fvov3g/why_do_people_build_open_source_projects_rather/</link>
      <description><![CDATA[我正在考虑开发一个工具，并且正在考虑是收费还是开源。当我可以为我的工作/时间收费时，开源有什么吸引力？    提交人    /u/metalprogrammer2024   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fvov3g/why_do_people_build_open_source_projects_rather/</guid>
      <pubDate>Fri, 04 Oct 2024 02:26:09 GMT</pubDate>
    </item>
    <item>
      <title>我厌倦了寻找代码片段：制作一个可以容忍拼写错误的本地文件引擎</title>
      <link>https://www.reddit.com/r/opensource/comments/1fvng2o/i_got_tired_of_looking_for_code_snippets_made_a/</link>
      <description><![CDATA[      时不时地，我想重用很久以前写的一些代码。现在我只需搜索就可以了！  使用 Svelte 和 Typesense 构建作为全文搜索引擎。     提交人    /u/mugendee   [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fvng2o/i_got_tired_of_looking_for_code_snippets_made_a/</guid>
      <pubDate>Fri, 04 Oct 2024 01:11:33 GMT</pubDate>
    </item>
    <item>
      <title>Raku 知识库 v1.0（艺术 2.0 许可证）</title>
      <link>https://www.reddit.com/r/opensource/comments/1fvgnxr/the_raku_knowledge_base_v10_artistic_20_license/</link>
      <description><![CDATA[        由    /u/zagap  提交  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fvgnxr/the_raku_knowledge_base_v10_artistic_20_license/</guid>
      <pubDate>Thu, 03 Oct 2024 19:56:39 GMT</pubDate>
    </item>
    <item>
      <title>Al-dente - 极快的目录列表（比 find&fd 快 3 倍！）</title>
      <link>https://www.reddit.com/r/opensource/comments/1fvear5/aldente_an_extremely_fast_directory_listing/</link>
      <description><![CDATA[        由    /u/R3zn1kk 提交   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fvear5/aldente_an_extremely_fast_directory_listing/</guid>
      <pubDate>Thu, 03 Oct 2024 18:15:41 GMT</pubDate>
    </item>
    <item>
      <title>为 B2B 公司提供开源支持</title>
      <link>https://www.reddit.com/r/opensource/comments/1fvdgzj/opensource_support_for_b2b_companies/</link>
      <description><![CDATA[Zyg GitHub 动机  我想要一个专为以工程为中心的 B2B 公司设计的支持工具，这样我就可以为产品驱动的服务提供最好的支持。不是电子商务！  挫折  传统系统已经过时，并且更像为电子商务企业设计的。我想要一个更好的工具来管理 SaaS、科技公司的客户支持，这些公司的最终用户更注重技术和产品驱动。  我意识到最好的方法是将其构建为开源，现在是开源社区构建更多开放系统的时候了。 PS。寻找贡献者，热切寻求反馈。    提交人    /u/sanchitrk   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fvdgzj/opensource_support_for_b2b_companies/</guid>
      <pubDate>Thu, 03 Oct 2024 17:40:36 GMT</pubDate>
    </item>
    <item>
      <title>免费开源 Twitter 书签下载器 🐦💾</title>
      <link>https://www.reddit.com/r/opensource/comments/1fv8q0f/free_and_opensource_twitter_bookmark_downloader/</link>
      <description><![CDATA[大家好。我非常沮丧，因为没有解决方案可以直接下载我的 Twitter 书签，所以我构建了一个开源 chrome 扩展来实现这一点。我有 843 个书签，它可以下载所有书签，但如果你有更多的书签，它可能无法正常工作。我也听说过未经验证的人受到速率限制，所以一定要尝试限制。 代码：https://github.com/sahil-lalani/bookmark-export 介绍代码的操作视频：https://youtu.be/XPI1wjjQ-5U?si=i7B_9GBhUb8vDteX    提交人    /u/Loud-Position-9654   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fv8q0f/free_and_opensource_twitter_bookmark_downloader/</guid>
      <pubDate>Thu, 03 Oct 2024 14:12:53 GMT</pubDate>
    </item>
    <item>
      <title>关于分叉文化的一点思考：自己去分叉 - Documenso 博客</title>
      <link>https://www.reddit.com/r/opensource/comments/1fv6vis/a_small_thought_piece_about_forking_culture_go/</link>
      <description><![CDATA[        由    /u/timurercan31  提交  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fv6vis/a_small_thought_piece_about_forking_culture_go/</guid>
      <pubDate>Thu, 03 Oct 2024 12:46:39 GMT</pubDate>
    </item>
    <item>
      <title>krita 还是 gimp？</title>
      <link>https://www.reddit.com/r/opensource/comments/1fv3cqc/krita_or_gimp/</link>
      <description><![CDATA[  由    /u/Limp_Replacement_596  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fv3cqc/krita_or_gimp/</guid>
      <pubDate>Thu, 03 Oct 2024 08:59:31 GMT</pubDate>
    </item>
    <item>
      <title>一个免费的开源电子邮件编辑器和模板生成器。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fv21n4/a_free_and_open_source_email_editor_and_template/</link>
      <description><![CDATA[演示：https://designer.sendune.com/  代码：https://github.com/SendWithSES/Drag-and-Drop-Email-Designer 电子邮件的 HTML 可能是最难编写的代码。即使是规则的微小偏差也会在操作系统/桌面/移动客户端的无数组合中破坏电子邮件。 现在是 2024 年中期。电子邮件发明已有近 50 年，HTML 诞生已有 35 年。“基本开源 HTML 电子邮件设计器”一定是一个已解决的问题，对吧？我们也这么认为。 遗憾的是，事实并非如此。 有一些不错的开源电子邮件设计器，但它们带有依赖项，这使得它们很难嵌入到您的应用程序中。这就是我们决定开源 HTML 电子邮件设计器的原因。 SENDUNE 电子邮件设计器专注于简单性和易用性。它很轻量。它只处理纯 HTML - 没有像 mjml 这样的中间代码管理器。没有任何形式的锁定。将 HTML 输出保存为模板并与任何电子邮件服务提供商一起使用。 请随意分叉存储库、进行改进和提交拉取请求。    提交人    /u/Karmaseed   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fv21n4/a_free_and_open_source_email_editor_and_template/</guid>
      <pubDate>Thu, 03 Oct 2024 07:12:00 GMT</pubDate>
    </item>
    <item>
      <title>介绍（真正）简单的商务 - 我开源了我多年来使用的商店软件</title>
      <link>https://www.reddit.com/r/opensource/comments/1fv1qun/introducing_really_simple_commerce_i_open_sourced/</link>
      <description><![CDATA[        由    /u/iambillz 提交   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fv1qun/introducing_really_simple_commerce_i_open_sourced/</guid>
      <pubDate>Thu, 03 Oct 2024 06:49:20 GMT</pubDate>
    </item>
    <item>
      <title>PyTraceToIX - 用于调试 lambda、列表推导、方法链和表达式的 Python 表达式跟踪器。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fuvvgg/pytracetoix_a_python_expression_tracer_for/</link>
      <description><![CDATA[PyTraceToIX 是一个表达式跟踪器，用于调试 lambda、列表推导、方法链和表达式。 代码编辑器无法在表达式、lambda 函数、列表推导和链式方法内设置断点，从而迫使进行重大代码更改才能调试此类代码。 PyTraceToIX 为这个问题提供了一个简单的解决方案。 它的设计很简单，具有易于识别的函数，一旦发现错误就可以将其删除。 PyTraceToIX 有 2 个主要功能：  c__ 捕获表达式输入的输入。例如：c__(x) d__ 显示表达式的结果和所有捕获的输入。例如：d__(c__(x) + c__(y))  以及 2 个可选函数：  init__ 初始化显示格式、输出流和多线程。 t__ 为当前线程定义一个名称。  特点  多线程支持。 简单、简短的极简函数名称。 带有输入跟踪的结果。 可在全局级别和函数级别配置格式。 可配置结果和输入命名。 输出到 stdout 或流。 多个级别。 使用 allow 和 name 回调捕获输入方法。  ​ #!/usr/bin/env python3 from pytracetoix import d__, c__ [x, y, w, k, u] = [1, 2, 3, 4 + 4, lambda x:x] # 表达式 z = x + y * w + (k * u(5)) # 显示没有输入的表达式 z = d__(x + y * w + (k * u(5))) # 输出：# _:`47` # 显示有输入的表达式结果 z = d__(c__(x) + y * c__(w) + (k * u(5))) # 输出：# i0:`1` | i1:`3` | _:`47` # 显示表达式内带有输入的表达式结果 z = d__(c__(x) + y * c__(w) + d__(k * c__(u(5), level=1))) # 输出：# i0:`5` | _:`40` # i0:`1` | i1:`3` | _:`47` # lambda 函数 f = lambda x, y: x + (y + 1) f(5, 6) # 显示 lambda 函数结果和输入 f = lambda x, y: d__(c__(x) + c__(y + 1)) f(5, 6) # 输出：# i0:`5` | i1:`7` | _:`12` # 显示 lambda 函数输入和结果，以及输入和结果名称 f = lambda x, y: d__(c__(x, name=&#39;x&#39;) + c__(y + 1, name=&#39;y+1&#39;), name=&#39;f&#39;) f(5, 6) # 输出：# x:`5` | y+1:`7` | f:`12` # 列表推导式 l = [5 * y * x for x, y in [(10, 20), (30, 40)]] # 显示列表推导式，以及输入和结果名称 l = d__([5 * c__(y, name=f&quot;y{y}&quot;) * c__(x, name=lambda index, _, __: f&#39;v{index}&#39;) for x, y in [(10, 20), (30, 40)]]) # 输出：# y20:`20` | v1:`10` | y40:`40` | v3:`30` | _:`[1000, 6000]` # 如果 `input count` 为 2，则显示表达式 d__(c__(x) + c__(y), allow=lambda data: data[&#39;input_count__&#39;] == 2) # 如果第一个输入值为 10.0，则显示表达式 d__(c__(x) + c__(y), allow=lambda data: data[&#39;i0&#39;] == 10.0) # 如果 `allow_input_count` 为 2，则显示表达式，在这种情况下，如果 `x &gt; 10` d__(c__(x, allow=lambda index, name, value: value &gt; 10) + c__(y), allow=lambda data: data[&#39;allow_input_count__&#39;] == 2) # 如果生成的输出包含文本 10，则显示表达式 d__([c__(x) for x in [&#39;10&#39;, &#39;20&#39;]], before=lambda data: &#39;10&#39; in data[&#39;output__&#39;]) # 如果允许显示，则显示表达式和调用后 `call_after` d__([c__(x) for x in [&#39;10&#39;, &#39;20&#39;]], allow=lambda data: data[&#39;allow_input_count__&#39;] == 2, after=lambda data: call_after(data) if data[&#39;allow__&#39;] else &quot;&quot;) class Chain: def __init__(self, data): self.data = data def map(self, func): self.data = list(map(func, self.data)) return self def filter(self, func): self.data = list(filter(func, self.data)) return self # 具有链式方法的类 Chain([10, 20, 30, 40, 50]).map(lambda x: x * 2).filter(lambda x: x &gt; 70) # 显示结果并捕获映射和过滤输入 d__(Chain([10, 20, 30, 40, 50]).map(lambda x: c__(x * 2)).filter(lambda x: c__(x &gt; 70)).data) # 输出： # i0:`20` | i1:`40` | i2:`60` | i3:`80` | i4:`1​​00` | i5:`False` | i6:`False` | i7:`False` | i8:`True` | i9:`True` | _:`[80, 100]`     提交人    /u/abentofreire   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fuvvgg/pytracetoix_a_python_expression_tracer_for/</guid>
      <pubDate>Thu, 03 Oct 2024 00:58:18 GMT</pubDate>
    </item>
    <item>
      <title>对 AGPL 的常见误解</title>
      <link>https://www.reddit.com/r/opensource/comments/1fuq6ls/common_misconceptions_of_the_agpl/</link>
      <description><![CDATA[  由    /u/ssddanbrown  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fuq6ls/common_misconceptions_of_the_agpl/</guid>
      <pubDate>Wed, 02 Oct 2024 20:28:25 GMT</pubDate>
    </item>
    <item>
      <title>这可能是我收到过措辞最严厉的邮件之一。我现在还浑身发抖。</title>
      <link>https://www.reddit.com/r/opensource/comments/1fupgrn/probably_one_of_the_most_harshly_worded_issues/</link>
      <description><![CDATA[        由    /u/AmruthPillai 提交   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fupgrn/probably_one_of_the_most_harshly_worded_issues/</guid>
      <pubDate>Wed, 02 Oct 2024 19:57:57 GMT</pubDate>
    </item>
    <item>
      <title>支持互联网档案馆保存的民间努力</title>
      <link>https://www.reddit.com/r/opensource/comments/1fumh8y/grassroots_efforts_to_support_the_internet/</link>
      <description><![CDATA[草根努力可以通过满足网站的存档需求来支持互联网档案馆。这可以通过将他们与具有专业知识的律师联系起来，以建立与音乐、视频游戏和电影行业的共同点来实现。这种合作确保我们不会失去软件开发历史的宝贵进步，并有助于保存记录各自艺术形式演变的历史音乐和电影。否则，该网站可能会永久关闭，这将是毁灭性的。此外，我们必须加强与企鹅等主要出版商和其他可能试图关闭 Archive.org 的公司的谈判。失去对如此庞大的知识和文化库（尤其是稀有书籍和文本）的访问权，对人类来说将是重大损失。我们必须保护这些资源（其中一些资源已不再印刷），因为限制对知识的访问会阻碍进步。让我们团结起来，为子孙后代保护这个重要的档案馆。    提交人    /u/MisterTTS   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1fumh8y/grassroots_efforts_to_support_the_internet/</guid>
      <pubDate>Wed, 02 Oct 2024 17:52:42 GMT</pubDate>
    </item>
    </channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>所有开源相关的 subreddit（就此而言，我们引用了此处开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Sat, 21 Dec 2024 06:29:39 GMT</lastBuildDate>
    <item>
      <title>LTX Video 的最新更新</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj296v/ltx_videos_latest_update/</link>
      <description><![CDATA[终于在开源视频生成中看到了真正的竞争 - LTX Video 的最新更新 一直在关注开源视频生成的发展，刚刚遇到了 LTX Video 0.9.1。对于那些不熟悉的人来说，这是一个高效的视频生成框架，试图解决我们经常看到的资源瓶颈。这次更新引起了我的注意： 团队设法消除了困扰大多数开放框架的那些可怕的频闪纹理。任何玩过视频生成的人都知道我在说什么 - 那些让一切看起来都像坏了的电视机的奇怪的闪烁伪影。消失了。 资源使用率仍然出奇地合理。能够在普通硬件上运行它，而不会出现通常的 VRAM 问题。这可能是大多数开源视频项目进入的最大障碍，所以看到这一点令人耳目一新。 一个有趣的技术选择是他们对 AI 生成的图像的处理。他们实施了一个图像降级系统，似乎可以产生更自然的运动。这是一个解决社区一直感到沮丧的问题的明智方法。 注意事项：如果您想使用新的 VAE 改进（相信我，您会这样做），您现在需要它们特定的 ComfyUI 节点。可在 https://github.com/Lightricks/ComfyUI-LTXVideo 对于想要进行实验的同行：他们的文档（https://github.com/Lightricks/LTX-Video）建议从图像字幕开始作为基本描述，然后手动添加运动元素。经过一些测试，这肯定会比直接跳到运动提示产生更好的效果。 真的很高兴看到它的发展方向。这个领域已经停滞了一段时间，所以拥有可靠的开源替代方案来推动创新正是我们所需要的。    提交人    /u/hadjiprimesx30   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj296v/ltx_videos_latest_update/</guid>
      <pubDate>Sat, 21 Dec 2024 04:33:31 GMT</pubDate>
    </item>
    <item>
      <title>MSTO - 利用新闻情绪以折扣价购买股票的股票算法</title>
      <link>https://www.reddit.com/r/opensource/comments/1hj1vkv/msto_stock_algorithm_for_buying_stocks_at_a/</link>
      <description><![CDATA[MSTO(https://github.com/cenab/MSTO) 是一个由 Python 驱动的交易程序，旨在分析股票价格走势和新闻情绪，以做出明智的交易决策。它利用模块化的类似微服务的架构来实现灵活的策略执行和无缝的可扩展性。 它有什么作用？  实时股票监控：持续跟踪股票价格和市场数据。 新闻情绪分析：阅读和评估新闻文章以获得可行的见解。 突然降价检测：将大幅降价标记为潜在的买入机会。 自动交易决策：根据预定义的策略执行交易。 与交易平台集成：将交易信号直接发送到 TradingView 或其他平台进行执行。  为什么选择 MSTO？模块化和可扩展的架构 MSTO 在单个服务中使用模块化、受微服务启发的架构。每种交易策略都作为独立的、并发的“服务”运行可以无缝添加或更新而不影响其他策略。  并行策略执行：多个策略可以同时运行，独立分析股票和新闻。 可扩展设计：能够同时处理数百只股票，并高效利用资源。 异步处理：实时分析股票数据和新闻，不会出现延迟或阻塞。 可扩展性：添加或修改交易策略，而不会破坏现有功能。  最酷的部分：编写您自己的策略 MSTO 在构建时考虑了灵活性，可轻松自定义和部署您的交易逻辑。  易于使用的策略模板：预构建的示例可让您快速入门。 回测支持：在部署之前使用历史数据验证您的想法 即时部署：以最少的配置快速启动策略。  示例：仅用几行代码即可实施当股票下跌 5% 且有正面新闻情绪时买入的策略。 主要功能  动态监控和分析  同时监控多只股票并分析相关新闻。 实时处理价格变动、情绪和基本指标。  可立即使用的内置策略  基本事件驱动：评估公司特定事件，如收益、合并或管理层变动。 简单波动：识别突然的价格波动以寻找潜在的交易机会。 根据您的需求创建定制策略。  无缝部署和执行  轻松设置：使用 Docker 在任何平台上进行精简部署。 云就绪：与 AWS 和其他云提供商兼容，可进行大规模操作。 强大的数据库集成：使用 PostgreSQL 进行可靠的数据存储和检索。   技术堆栈  Python 3.10 具有灵活性和高性能。 Docker 可轻松跨环境部署。 PostgreSQL 可实现强大且可扩展的数据管理。 异步框架 用于实时并行处理。  入门  克隆存储库（https://github.com/cenab/MSTO）。 设置您的 API 密钥（例如，新闻、交易平台）。 选择要监控的股票。 选择或创建您的交易策略。 运行 MSTO 并让它处理其余部分。  MSTO 使初学者和经验丰富的交易者都能够轻松地自动化、测试和改进他们的交易想法。其模块化架构确保添加新策略、扩展或部署到新环境简单而高效。无论您是在测试概念还是执行实时交易，MSTO 都能满足您的需求。    提交人    /u/helloitsmebatu   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hj1vkv/msto_stock_algorithm_for_buying_stocks_at_a/</guid>
      <pubDate>Sat, 21 Dec 2024 04:09:53 GMT</pubDate>
    </item>
    <item>
      <title>我最好的 roku 替代品是什么？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiyp3y/whats_my_best_option_for_a_roku_alternative/</link>
      <description><![CDATA[我曾经很喜欢我的 roku，但每年都会用广告换取性能。我们主要用它观看流媒体服务：netflix、disney、max、youtube 和 paramount。 我看过 kodi。如果我们有一个媒体库，它看起来会很棒，但我找不到插件来让它支持我们观看的服务。 Mythtv 似乎仍在做 DVR 的东西，但我们不再支付有线电视费了。    提交人    /u/SuperfluousBrain   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiyp3y/whats_my_best_option_for_a_roku_alternative/</guid>
      <pubDate>Sat, 21 Dec 2024 01:08:18 GMT</pubDate>
    </item>
    <item>
      <title>与 MIT 无署名和未授权的双重授权</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiwcqz/duallicensing_with_the_mit_no_attribution_and/</link>
      <description><![CDATA[为了获得最大的自由，我想将我的软件放入公共领域。但是，公共领域的概念并非在每个司法管辖区都存在。因此，我想使用宽松许可证和非许可证双重许可。有趣的是，stb（C/C++ 的单文件公共领域库）在 MIT 和非许可证下获得双重许可。请参阅https://github.com/nothings/stb/blob/master/LICENSE。但是，MIT 许可证要求对软件进行署名。我希望我的软件尽可能宽松，所以我用同样的想法制作了自己的许可证，但使用 MIT 无署名 (MIT-0) 而不是 MIT。以下是许可证文本，从现在起我将在我的开源项目中使用它： ``` 该软件有两种许可证 - 请选择您喜欢的任意一种。  许可证 1 - MIT 无署名 (MIT-0) 版权所有 &lt;YEAR&gt; &lt;版权所有者&gt; 特此授予获得此软件和相关文档文件（“软件”）副本的任何人免费许可，以无限制方式处理软件，包括但不限于使用、复制、修改、合并、发布、分发、再许可和/或销售软件副本的权利，以及允许向其提供软件的人员这样做。 该软件按“原样”提供，不作任何形式的保证，无论明示或暗示，包括但不限于适销性、针对特定目的的适用性和不侵权性的保证。在任何情况下，作者或版权所有者均不对任何索赔、损害或其他责任负责，无论是合同行为、侵权行为还是其他行为，无论是由软件或使用或其他处理软件引起的，还是与之相关的。  许可证 2 - 未授权 https://unlicense.org 这是免费且不受限制的软件，已发布到公共领域。 任何人都可以自由复制、修改、发布、使用、编译、销售或分发此软件，无论是以源代码形式还是编译后的二进制文件形式，用于任何目的，无论是商业还是非商业目的，通过任何方式。 在承认版权法的司法管辖区，本软件的作者或作者们将软件中的所有版权利益奉献给公共领域。我们做出此奉献是为了广大公众的利益，但会损害我们的继承人和继任者的利益。我们打算将此奉献视为永久放弃版权法规定的此软件的所有现有和未来权利的公开行为。 本软件按“原样”提供，不作任何形式的保证，无论明示或暗示，包括但不限于适销性、针对特定目的的适用性和不侵权性的保证。在任何情况下，作者均不对任何索赔、损害或其他责任负责，无论是合同行为、侵权行为还是其他行为，无论是由软件或使用或以其他方式处理软件而引起、由其引起或与之有关。 ```    提交人    /u/SaltyMaybe7887   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiwcqz/duallicensing_with_the_mit_no_attribution_and/</guid>
      <pubDate>Fri, 20 Dec 2024 23:09:04 GMT</pubDate>
    </item>
    <item>
      <title>WordleWacker，每日提供 Wordle 解决方案！</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiu8ap/wordlewacker_wordle_solutions_daily/</link>
      <description><![CDATA[      欢迎试用这款可自动解决 Wordle 问题的 chrome 扩展程序。打开问题以报告错误或提出功能请求。    提交人    /u/GamerG3arYT   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiu8ap/wordlewacker_wordle_solutions_daily/</guid>
      <pubDate>Fri, 20 Dec 2024 21:27:52 GMT</pubDate>
    </item>
    <item>
      <title>寻求项目的早期反馈</title>
      <link>https://www.reddit.com/r/opensource/comments/1hirgpu/looking_for_early_feedback_on_project/</link>
      <description><![CDATA[我目前正在为我制作的一种（严肃的）语言开发编译器。我之前从未开发过编译器或更大规模的开源项目，因此，一些早期的反馈将有助于避免早期出现问题。 欢迎任何贡献！ 链接：https://github.com/BlackFuffey/Polymerizer 请注意，语言规范的链接已损坏，因为该存储库很乱，我决定将其保密，直到编译器达到&quot;可用&quot; 阶段。所有已实现的内容都在 test.kev    提交人    /u/BlackFuffey   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hirgpu/looking_for_early_feedback_on_project/</guid>
      <pubDate>Fri, 20 Dec 2024 19:21:55 GMT</pubDate>
    </item>
    <item>
      <title>Kluger Sim - 基于浏览器的蒙特卡罗模拟构建器</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiovl8/kluger_sim_browser_based_monte_carlo_simulation/</link>
      <description><![CDATA[我正在开发一款在浏览器中运行的软件（以后肯定能够移植到 Tauri 或 Electron 以开发桌面应用版本），用于以沙盒风格构建蒙特卡罗模拟。从 UI 角度来看，它仍然非常丑陋，但已经可以构建基本模拟了。我正在使用 C++ 和 Emscripten 编译器来尝试加快模拟循环期间的计算时间。基本上，用户构建一个 Sim，该 sim 由一个大型 C++ 结构表示，然后它会循环用户想要的次数（根据需要从 sim 结构中提取和更新数据），然后它会吐出（现在到控制台）用户要求的任何输出。我设想一些第三方 JS 库最终会通过绘图或其他方式更好地可视化这些输出，但尚未实现这一桥梁。 我现在担心的是模拟循环的速度。我构建了一个用于近似 Pi 的模拟（蒙特卡洛 Pi 近似），然后我运行该模拟，比如说 10,000 次。我原本预计结果会在一秒或更短的时间内出现（对于 WASM 来说，这可能不现实？），但似乎需要的时间比这长得多……大约 10 秒或 15 秒（我从未严格计时过）。对于在现实生活中有用的更复杂的模拟，用户可能想要运行 sim 数百万次，因此显然所需的时间是不切实际的。 这是 tldr 的基本逻辑：通过拖放函数构造 sim，这些函数名称按顺序存储到向量中，然后 switch 语句通过循环该向量来确定要运行哪个函数，每个函数根据需要更新主结构，最后在按顺序调用函数多次（按照 sim 要求的顺序）后，将输出发送到控制台。 以下是我知道我已经可以做的一些改进：  目前，所有内容都作为字符串传递给 C++ 结构，因此发生的任何数学运算都必须首先将字符串转换为双精度数，执行数学运算，然后将其转换回字符串。我认为，改变这一点可以在 1 万个循环中节省几秒钟，但可能只有几秒钟。我可以实现可选线程（如果用户确信他们的特定模拟可以并行运行，那么我可以创建几个线程，而不是仅仅以串行方式运行所有线程，只使用互斥锁来跟踪结构中的共享变量） - 但这只会增加特定模拟的模拟速度......并且它本身并没有提高我的代码的效率。如果有人好奇或有兴趣拆开我的代码以使其更快，我洗耳恭听。堆栈只是 C++、Python（Flask）、JS、HTML、CSS......我不会使用前端框架，主要是为了最少的维护和更好的面向未来......所以 JS 有点像狂野的西部，但我想我大部分时间都把它保密了。如果您还在阅读并且好奇，谢谢...这里是 GitHub：Kluger Sim GitHub 整个项目都很新，因此目前尚无关于如何使用它的文档。我想那些既能编程又能理解蒙特卡罗模拟的人应该能够猜出目前 UI 中的东西是干什么的……但如果有什么不明显的地方，我会在需要时在这些评论中提供意见。    提交人    /u/zacguymarino   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiovl8/kluger_sim_browser_based_monte_carlo_simulation/</guid>
      <pubDate>Fri, 20 Dec 2024 17:27:21 GMT</pubDate>
    </item>
    <item>
      <title>在哪里可以找到开源项目？</title>
      <link>https://www.reddit.com/r/opensource/comments/1hinsa5/where_to_find_open_source_projects/</link>
      <description><![CDATA[我是初学者，我想知道在哪里可以找到可以贡献的开源项目     提交人    /u/Historical-Chip-5152   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hinsa5/where_to_find_open_source_projects/</guid>
      <pubDate>Fri, 20 Dec 2024 16:39:54 GMT</pubDate>
    </item>
    <item>
      <title>创建了一个极简的、仅供客户端使用的电子邮件签名生成器</title>
      <link>https://www.reddit.com/r/opensource/comments/1himzfp/created_an_ultraminimal_clientonly_email/</link>
      <description><![CDATA[不想一直被打扰，所以我想我只需创建自己的生成器。  GitHub：https://github.com/activenode/signature-project  页面：signature.activeno.de     由   提交  /u/activenode   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1himzfp/created_an_ultraminimal_clientonly_email/</guid>
      <pubDate>Fri, 20 Dec 2024 16:03:38 GMT</pubDate>
    </item>
    <item>
      <title>开源产品的商业模式</title>
      <link>https://www.reddit.com/r/opensource/comments/1hildeu/business_model_for_open_source_product/</link>
      <description><![CDATA[大家好， 在不伤害社区的情况下，将开源产品货币化的最佳方式是什么。销售插件、限制功能还是其他什么？你对此事有什么经验？    提交人    /u/kalintush   [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hildeu/business_model_for_open_source_product/</guid>
      <pubDate>Fri, 20 Dec 2024 14:48:36 GMT</pubDate>
    </item>
    <item>
      <title>我制作了一个免费发送短信的短信网关并将其开源</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiksyl/i_made_an_smsgateway_for_sending_sms_for_free_and/</link>
      <description><![CDATA[我构建了 textbee.dev，一个基于 Android 的开源免费短信网关。 以下是主要功能：  短信发送：无论是双因素身份验证 (2FA)、一次性密码 (OTP)、警报、CRM 集成、电子商务交付通知，还是您的应用所需的任何其他用例，textbee.dev 都可让您直接从其仪表板或通过其 API 发送短信。 批量短信：使用 API 高效地发送批量短信，使其成为大众传播的理想选择。 批量短信：上传您的 CSV 文件并使用模板为每个收件人自定义包含动态内容的消息 - 直接从您的仪表板发送 短信接收：除了发送短信外，您还可以启用接收功能，通过 API 或仪表板访问传入消息（用于实时通知的 Webhook 正在开发中 😉 ） 免费和开源：作为免费和开源平台，您无需支付任何费用即可使用其服务。您还可以选择自行托管实例，从而获得完全的控制权和灵活性。  textbee 目前正在积极开发中，非常感谢您提供反馈和任何功能请求。此外，欢迎在 GitHub 上自由贡献  Github：github.com/vernu/textbee 站点网址：textbee.dev     由   提交  /u/Anxious_Situation_60   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiksyl/i_made_an_smsgateway_for_sending_sms_for_free_and/</guid>
      <pubDate>Fri, 20 Dec 2024 14:21:23 GMT</pubDate>
    </item>
    <item>
      <title>Sirang - 基于 QUIC 的实验性 TCP 隧道</title>
      <link>https://www.reddit.com/r/opensource/comments/1hihx3w/sirang_an_experimental_tcp_tunnel_over_quic/</link>
      <description><![CDATA[       由   提交/u/Icelain  [链接] [评论] &lt; /表&gt;]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hihx3w/sirang_an_experimental_tcp_tunnel_over_quic/</guid>
      <pubDate>Fri, 20 Dec 2024 11:35:35 GMT</pubDate>
    </item>
    <item>
      <title>无需我的参与，存储库即可获得用户、贡献者和星星</title>
      <link>https://www.reddit.com/r/opensource/comments/1higenj/repository_start_to_gain_users_contributors_and/</link>
      <description><![CDATA[我的 GitHub 个人资料上有几个开源存储库。通常，只有当我公开提及它们时，它们才会获得用户。但是，我的一个存储库正在自行获得星星和用户。这很有趣。 突然间，人们开始安装我的 pip 包，提交拉取请求并为存储库加注星标：  GitHub repo insights 流量显示大多数人来自 Google。 在 pypistats 上，我可以看到 2024-11-06 之后的更多活动，但这些日期我什么也没做。  你知道为什么会发生这种情况吗？它是如何工作的？为什么没有访问者并且在没有我的活动的情况下在一天内发生了变化？ 它在您的存储库上如何工作？ 我很乐意创建更多有用的开源解决方案，人们可​​以自然地找到它，而无需自己推广它。但我还是不明白这个过程是如何运作的。    提交人    /u/Kirmark   [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1higenj/repository_start_to_gain_users_contributors_and/</guid>
      <pubDate>Fri, 20 Dec 2024 09:46:19 GMT</pubDate>
    </item>
    <item>
      <title>推出 ShortMoji：键盘上 Emoji Magic 的快捷方式！🐐</title>
      <link>https://www.reddit.com/r/opensource/comments/1hief0c/introducing_shortmoji_your_keyboards_shortcut_to/</link>
      <description><![CDATA[嗨，Redditors ！ 我很高兴与大家分享 ShortMoji：一个轻量级的开源程序，可让您使用简单的键盘快捷键插入表情符号（受 Discord 的表情符号系统启发）！无论您是在聊天、编码还是其他，ShortMoji 都有89 个表情符号快捷方式为您提供支持，而且还在不断增加！🤩  易于使用：快捷键 + 空格 = 表情符号。就是这么简单！🥳 超轻量级：几乎不消耗资源。非常适合多任务处理。🧠 免费且开源：修改、共享或通过 GitHub 做出贡献。 🖤  🌟 特点：  Discord 用户熟悉的快捷方式。 快速更正拼写错误的快捷方式。 定期更新更多表情符号和可能的新功能。 GitHub 链接在这里 - 您现在就可以下载！  🤓 下一步是什么？ 我正在积极开发 ShortMoji，希望听到您的反馈！建议表情符号，报告错误或通过拉取请求做出贡献，使其变得更好！ 接下来我应该添加什么表情符号快捷方式？在下面发表评论！🗨️   由    /u/TooFu_Wone  提交  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hief0c/introducing_shortmoji_your_keyboards_shortcut_to/</guid>
      <pubDate>Fri, 20 Dec 2024 07:11:58 GMT</pubDate>
    </item>
    <item>
      <title>你好，我是 Luis，过去两周我一直在研究这个 Flutter/dart 包，它使使用 Brave API 变得容易。</title>
      <link>https://www.reddit.com/r/opensource/comments/1hiebcq/hi_im_luis_and_i_worked_the_last_2_weeks_on_this/</link>
      <description><![CDATA[        提交人    /u/kresstein   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1hiebcq/hi_im_luis_and_i_worked_the_last_2_weeks_on_this/</guid>
      <pubDate>Fri, 20 Dec 2024 07:04:50 GMT</pubDate>
    </item>
    </channel>
</rss>
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：ChatGPT</title>
    <link>https://www.reddit.com/r/ChatGPT/new</link>
    <description>Subreddit 讨论 ChatGPT 和 AI。与 OpenAI 无关。谢谢 Nat！</description>
    <lastBuildDate>Tue, 25 Jun 2024 03:21:59 GMT</lastBuildDate>
    <item>
      <title>GPT 4-o（无记忆）的实际指令（预提示）直接来自 OpenAI</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnw7pn/gpt_4o_memorylesss_actual_directive_preprompt/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnw7pn/gpt_4o_memorylesss_actual_directive_preprompt/</guid>
      <pubDate>Tue, 25 Jun 2024 03:18:29 GMT</pubDate>
    </item>
    <item>
      <title>斯科特·阿伦森 (Scott Aaronson) 表示，智力较低的物种控制智力较高的物种的一个例子是狗让人类满足它们的需求，而人工智能接管的一个乐观结果可能是我们成为狗</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnvrvu/scott_aaronson_says_an_example_of_a_less/</link>
      <description><![CDATA[        提交人    /u/Maxie445   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnvrvu/scott_aaronson_says_an_example_of_a_less/</guid>
      <pubDate>Tue, 25 Jun 2024 02:55:19 GMT</pubDate>
    </item>
    <item>
      <title>我无法让 Chat GPT 继续从姓名及其公司列表中搜索电子邮件。</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnvl0m/i_cannot_get_chat_gpt_to_continue_its_task/</link>
      <description><![CDATA[因此，我让 GPT 搜索附有公司名称的列表中人员的工作电子邮件地址。到目前为止，GPT 已成功找到列表中每个人的电子邮件。但这是一个相当长的列表，我要求 GPT 继续循环执行完全相同的过程，继续查找列表中的下一个名称，直到到达末尾。尽管 GPT 识别并验证它知道继续到列表末尾，但它会在找到每封电子邮件后停止搜索。我必须在找到每封电子邮件后输入“更新并继续任务”。我该如何消除此问题？我的列表中有大约 100 个姓名/公司，显然指示 GPT 在找到每封电子邮件后重复此操作。    提交人    /u/TXCloudyWeather   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnvl0m/i_cannot_get_chat_gpt_to_continue_its_task/</guid>
      <pubDate>Tue, 25 Jun 2024 02:44:54 GMT</pubDate>
    </item>
    <item>
      <title>现在我几乎有一半的时间都待在那里……等待的空白点。永远。</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnv51c/pretty_much_half_of_my_time_there_now_the_white/</link>
      <description><![CDATA[        提交人    /u/Plus-Tradition-1970   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnv51c/pretty_much_half_of_my_time_there_now_the_white/</guid>
      <pubDate>Tue, 25 Jun 2024 02:21:10 GMT</pubDate>
    </item>
    <item>
      <title>关于我生活的爱歌</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnukso/ai_song_about_my_life/</link>
      <description><![CDATA[        提交人    /u/Flashy-Focus-2426   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnukso/ai_song_about_my_life/</guid>
      <pubDate>Tue, 25 Jun 2024 01:52:05 GMT</pubDate>
    </item>
    <item>
      <title>为什么 gemini api 太敏感了</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnuhm9/whats_with_the_gemini_api_being_too_sensitive/</link>
      <description><![CDATA[      它几乎标记了所有东西，这是一个常见的比喻，它几乎不可用，即：  系统提示：你是一位著名歌手，你的名字是neko 提示：写一首关于你的名字的酷歌 有没有与双子座合作的技巧或解决方法    提交人    /u/FlatBig3035   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnuhm9/whats_with_the_gemini_api_being_too_sensitive/</guid>
      <pubDate>Tue, 25 Jun 2024 01:47:33 GMT</pubDate>
    </item>
    <item>
      <title>评价我的 Ai 歌曲</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnucgq/rate_my_ai_song/</link>
      <description><![CDATA[        提交人    /u/Flashy-Focus-2426   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnucgq/rate_my_ai_song/</guid>
      <pubDate>Tue, 25 Jun 2024 01:40:03 GMT</pubDate>
    </item>
    <item>
      <title>我看到了你 100% 人工智能生成的乡村歌曲，并为你唱起我的人工智能 90 年代流行歌曲 - 你还不知道你爱我</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dnu952/i_see_your_100_ai_generated_country_song_and/</link>
      <description><![CDATA[    /u/JustifiedDarklord   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dnu952/i_see_your_100_ai_generated_country_song_and/</guid>
      <pubDate>Tue, 25 Jun 2024 01:35:13 GMT</pubDate>
    </item>
    <item>
      <title>对于 Scite_ 用于学术工作有什么看法？</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntzcs/thoughts_on_scite_for_academic_work/</link>
      <description><![CDATA[大家好， 我正在考虑使用 Scite_ 来帮助更快地找到我正在做的一些工作的引文。我想知道人们是否有使用过它，以及您是否推荐它。 我不会盲目地遵循它，并且会在包含之前检查每个引文，但想知道人工智能是否物有所值！ 谢谢！    提交人    /u/Appropriate-Help-014   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntzcs/thoughts_on_scite_for_academic_work/</guid>
      <pubDate>Tue, 25 Jun 2024 01:20:49 GMT</pubDate>
    </item>
    <item>
      <title>当你开始回答却没有注意到最后一个字时</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntwuu/when_you_start_answering_before_noticing_the_last/</link>
      <description><![CDATA[        提交人    /u/readparse   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntwuu/when_you_start_answering_before_noticing_the_last/</guid>
      <pubDate>Tue, 25 Jun 2024 01:17:12 GMT</pubDate>
    </item>
    <item>
      <title>这是更新的 lmsys 排行榜！！Claude 3.5 sonnet 现在排名第二！！并且是编码第一名！！</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntv8q/heres_updated_lmsys_leaderboard_claude_35_sonnet/</link>
      <description><![CDATA[      哇，看看它     由    /u/PipeDependent7890  提交  [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntv8q/heres_updated_lmsys_leaderboard_claude_35_sonnet/</guid>
      <pubDate>Tue, 25 Jun 2024 01:14:49 GMT</pubDate>
    </item>
    <item>
      <title>诈骗者使用人工智能进行回应</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntr5q/scamers_using_ai_for_responses/</link>
      <description><![CDATA[        提交人    /u/Drowningbelow   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntr5q/scamers_using_ai_for_responses/</guid>
      <pubDate>Tue, 25 Jun 2024 01:08:53 GMT</pubDate>
    </item>
    <item>
      <title>哎呀</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntp26/yikes/</link>
      <description><![CDATA[        提交人    /u/GrantFranzuela   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntp26/yikes/</guid>
      <pubDate>Tue, 25 Jun 2024 01:05:46 GMT</pubDate>
    </item>
    <item>
      <title>查德·米拉·穆拉蒂</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntjd5/chad_mira_murati/</link>
      <description><![CDATA[        提交人    /u/nousernameontwitch   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntjd5/chad_mira_murati/</guid>
      <pubDate>Tue, 25 Jun 2024 00:58:10 GMT</pubDate>
    </item>
    <item>
      <title>如何有效地标记音频？</title>
      <link>https://www.reddit.com/r/ChatGPT/comments/1dntiej/how_to_tokenize_audio_efficiently/</link>
      <description><![CDATA[大家好。我想创建一个标记器，可用于以大约 10 秒 = 1000 个标记的速率对音频进行标记。这是我的尝试： ``` import numpy as np import librosa import json import soundfile as sf class AudioTokenizer: def init(self, n_tokens=256, frame_length_ms=100): self.n_tokens = n_tokens self.frame_length_ms = frame_length_ms self.frame_length = None self.hop_length = None self.sr = None self.tokens = np.linspace(-1, 1, n_tokens) def quantize(self, audio_file, sr=8000): self.sr = sr y, _ = librosa.load(audio_file, sr=sr) y = librosa.util.normalize(y) # 对音频进行下采样 #y = y[::4] # 取每一个第四个样本 min_val, max_val = np.min(y), np.max(y) self.tokens = np.linspace(min_val, max_val, self.n_tokens) self.frame_length = int(self.frame_length_ms * self.sr / 1000) self.hop_length = self.frame_length # 无重叠 frames = librosa.util.frame(y, frame_length=self.frame_length, hop_length=self.hop_length).T frames = np.copy(frames) window = np.hamming(self.frame_length) frames *= window quantized = np.zeros_like(frames, dtype=int) for i, frame in enumerate(frames): quantized[i] = np.argmin(np.abs(self.tokens[:, np.newaxis] - frame), axis=0) return y, quantized def tokenize(self, quantized): return quantized.flatten().tolist() def detokenize(self, tokens): quantized_frames = np.array(tokens).reshape(-1, self.frame_length) reconstructed_frames = self.tokens[quantized_frames] # 重叠相加重建音频信号 reconstructed = self.overlap_add(reconstructed_frames, self.hop_length) return reconstructed def override_add(self, frames, hop_length): num_frames, frame_length = frames.shape output_length = (num_frames - 1) * hop_length + frame_length output = np.zeros(output_length) for i, frame in enumerate(frames): start = i * hop_length end = start + frame_length output[start:end] += frame return output def save_tokenizer(self, filename): tokenizer_data = { &#39;n_tokens&#39;: self.n_tokens, &#39;frame_length_ms&#39;: self.frame_length_ms, &#39;tokens&#39;: self.tokens.tolist() } 使用 open(filename, &#39;w&#39;) 作为 f: json.dump(tokenizer_data, f) @classmethod def load_tokenizer(cls, filename): 使用 open(filename, &#39;r&#39;) 作为 f: tokenizer_data = json.load(f) tokenizer = cls(n_tokens=tokenizer_data[&#39;n_tokens&#39;], frame_length_ms=tokenizer_data[&#39;frame_length_ms&#39;]) tokenizer.tokens = np.array(tokenizer_data[&#39;tokens&#39;]) return tokenizer  测试 AudioTokenizer if name == &quot;ma​​in&quot;: tokenizer = AudioTokenizer(n_tokens=128, frame_length_ms=100000) tokenizer.save_tokenizer(&#39;audio_tokenizer.json&#39;) loaded_tokenizer = AudioTokenizer.load_tokenizer(&#39;audio_tokenizer.json&#39;) test_audio = &#39;datasetutafirst.wav&#39; original, quantized = loaded_tokenizer.quantize(test_audio) print(f&quot;原始音频形状：{original.shape}&quot;) print(f&quot;量化形状：{quantized.shape}&quot;) tokens = loaded_tokenizer.tokenize(quantized) print(f&quot;标记数：{len(tokens)}&quot;) reconstructed_audio = loaded_tokenizer.detokenize(tokens) print(f&quot;重建的音频形状：{reconstructed_audio.shape}&quot;) sf.write(&#39;reconstructed_audio.wav&#39;, reconstructed_audio, loaded_tokenizer.sr) print(&quot;量化、标记化和去标记化测试完成。&quot;)  ``` 日志：  原始音频形状：（1887866,） 量化形状：（2, 800000） 标记数：1600000 重建的音频形状：（1600000,） 量化、标记化和去标记化测试完成。  您对如何减少标记数量有什么想法吗？注意：源音频为 200 秒，但您可以尝试任意时间（只需调整参数）    提交人    /u/yukiarimo   [link] [comments]]]></description>
      <guid>https://www.reddit.com/r/ChatGPT/comments/1dntiej/how_to_tokenize_audio_efficiently/</guid>
      <pubDate>Tue, 25 Jun 2024 00:56:48 GMT</pubDate>
    </item>
    </channel>
</rss>